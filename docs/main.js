!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=53)}([function(e,t,r){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var n=r(42),i=r(43),s=r(44);function o(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(e,t){if(o()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return d(this,e)}return c(this,e,t,r)}function c(e,t,r,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=f(e,t);return e}(e,t,r,n):"string"==typeof t?function(e,t,r){"string"==typeof r&&""!==r||(r="utf8");if(!u.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|p(t,r),i=(e=a(e,n)).write(t,r);i!==n&&(e=e.slice(0,i));return e}(e,t,r):function(e,t){if(u.isBuffer(t)){var r=0|h(t.length);return 0===(e=a(e,r)).length||t.copy(e,0,0,r),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(n=t.length)!=n?a(e,0):f(e,t);if("Buffer"===t.type&&s(t.data))return f(e,t.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function l(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function d(e,t){if(l(t),e=a(e,t<0?0:0|h(t)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function f(e,t){var r=t.length<0?0:0|h(t.length);e=a(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function h(e){if(e>=o())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o().toString(16)+" bytes");return 0|e}function p(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return D(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return Y(e).length;default:if(n)return D(e).length;t=(""+t).toLowerCase(),n=!0}}function y(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return P(this,t,r);case"utf8":case"utf-8":return O(this,t,r);case"ascii":return k(this,t,r);case"latin1":case"binary":return T(this,t,r);case"base64":return I(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return j(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function v(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function g(e,t,r,n,i){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof t&&(t=u.from(t,n)),u.isBuffer(t))return 0===t.length?-1:m(e,t,r,n,i);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):m(e,[t],r,n,i);throw new TypeError("val must be string, number or Buffer")}function m(e,t,r,n,i){var s,o=1,a=e.length,u=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;o=2,a/=2,u/=2,r/=2}function c(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}if(i){var l=-1;for(s=r;s<a;s++)if(c(e,s)===c(t,-1===l?0:s-l)){if(-1===l&&(l=s),s-l+1===u)return l*o}else-1!==l&&(s-=s-l),l=-1}else for(r+u>a&&(r=a-u),s=r;s>=0;s--){for(var d=!0,f=0;f<u;f++)if(c(e,s+f)!==c(t,f)){d=!1;break}if(d)return s}return-1}function b(e,t,r,n){r=Number(r)||0;var i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;var s=t.length;if(s%2!=0)throw new TypeError("Invalid hex string");n>s/2&&(n=s/2);for(var o=0;o<n;++o){var a=parseInt(t.substr(2*o,2),16);if(isNaN(a))return o;e[r+o]=a}return o}function w(e,t,r,n){return q(D(t,e.length-r),e,r,n)}function x(e,t,r,n){return q(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function S(e,t,r,n){return x(e,t,r,n)}function _(e,t,r,n){return q(Y(t),e,r,n)}function E(e,t,r,n){return q(function(e,t){for(var r,n,i,s=[],o=0;o<e.length&&!((t-=2)<0);++o)r=e.charCodeAt(o),n=r>>8,i=r%256,s.push(i),s.push(n);return s}(t,e.length-r),e,r,n)}function I(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function O(e,t,r){r=Math.min(e.length,r);for(var n=[],i=t;i<r;){var s,o,a,u,c=e[i],l=null,d=c>239?4:c>223?3:c>191?2:1;if(i+d<=r)switch(d){case 1:c<128&&(l=c);break;case 2:128==(192&(s=e[i+1]))&&(u=(31&c)<<6|63&s)>127&&(l=u);break;case 3:s=e[i+1],o=e[i+2],128==(192&s)&&128==(192&o)&&(u=(15&c)<<12|(63&s)<<6|63&o)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:s=e[i+1],o=e[i+2],a=e[i+3],128==(192&s)&&128==(192&o)&&128==(192&a)&&(u=(15&c)<<18|(63&s)<<12|(63&o)<<6|63&a)>65535&&u<1114112&&(l=u)}null===l?(l=65533,d=1):l>65535&&(l-=65536,n.push(l>>>10&1023|55296),l=56320|1023&l),n.push(l),i+=d}return function(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=4096));return r}(n)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=o(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,r){return c(null,e,t,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,r){return function(e,t,r,n){return l(t),t<=0?a(e,t):void 0!==r?"string"==typeof n?a(e,t).fill(r,n):a(e,t).fill(r):a(e,t)}(null,e,t,r)},u.allocUnsafe=function(e){return d(null,e)},u.allocUnsafeSlow=function(e){return d(null,e)},u.isBuffer=function(e){return!(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,i=0,s=Math.min(r,n);i<s;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!s(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=u.allocUnsafe(t),i=0;for(r=0;r<e.length;++r){var o=e[r];if(!u.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(n,i),i+=o.length}return n},u.byteLength=p,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)v(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)v(this,t,t+3),v(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)v(this,t,t+7),v(this,t+1,t+6),v(this,t+2,t+5),v(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?O(this,0,e):y.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",r=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,r,n,i){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),t<0||r>e.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&t>=r)return 0;if(n>=i)return-1;if(t>=r)return 1;if(this===e)return 0;for(var s=(i>>>=0)-(n>>>=0),o=(r>>>=0)-(t>>>=0),a=Math.min(s,o),c=this.slice(n,i),l=e.slice(t,r),d=0;d<a;++d)if(c[d]!==l[d]){s=c[d],o=l[d];break}return s<o?-1:o<s?1:0},u.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},u.prototype.indexOf=function(e,t,r){return g(this,e,t,r,!0)},u.prototype.lastIndexOf=function(e,t,r){return g(this,e,t,r,!1)},u.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-t;if((void 0===r||r>i)&&(r=i),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var s=!1;;)switch(n){case"hex":return b(this,e,t,r);case"utf8":case"utf-8":return w(this,e,t,r);case"ascii":return x(this,e,t,r);case"latin1":case"binary":return S(this,e,t,r);case"base64":return _(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,e,t,r);default:if(s)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),s=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function k(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(127&e[i]);return n}function T(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(e[i]);return n}function P(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var i="",s=t;s<r;++s)i+=F(e[s]);return i}function j(e,t,r){for(var n=e.slice(t,r),i="",s=0;s<n.length;s+=2)i+=String.fromCharCode(n[s]+256*n[s+1]);return i}function A(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function R(e,t,r,n,i,s){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<s)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function C(e,t,r,n){t<0&&(t=65535+t+1);for(var i=0,s=Math.min(e.length-r,2);i<s;++i)e[r+i]=(t&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function M(e,t,r,n){t<0&&(t=4294967295+t+1);for(var i=0,s=Math.min(e.length-r,4);i<s;++i)e[r+i]=t>>>8*(n?i:3-i)&255}function B(e,t,r,n,i,s){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function L(e,t,r,n,s){return s||B(e,0,r,4),i.write(e,t,r,n,23,4),r+4}function N(e,t,r,n,s){return s||B(e,0,r,8),i.write(e,t,r,n,52,8),r+8}u.prototype.slice=function(e,t){var r,n=this.length;if((e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=u.prototype;else{var i=t-e;r=new u(i,void 0);for(var s=0;s<i;++s)r[s]=this[s+e]}return r},u.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||A(e,t,this.length);for(var n=this[e],i=1,s=0;++s<t&&(i*=256);)n+=this[e+s]*i;return n},u.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||A(e,t,this.length);for(var n=this[e+--t],i=1;t>0&&(i*=256);)n+=this[e+--t]*i;return n},u.prototype.readUInt8=function(e,t){return t||A(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||A(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||A(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||A(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||A(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||A(e,t,this.length);for(var n=this[e],i=1,s=0;++s<t&&(i*=256);)n+=this[e+s]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*t)),n},u.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||A(e,t,this.length);for(var n=t,i=1,s=this[e+--n];n>0&&(i*=256);)s+=this[e+--n]*i;return s>=(i*=128)&&(s-=Math.pow(2,8*t)),s},u.prototype.readInt8=function(e,t){return t||A(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||A(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(e,t){t||A(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(e,t){return t||A(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||A(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||A(e,4,this.length),i.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||A(e,4,this.length),i.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||A(e,8,this.length),i.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||A(e,8,this.length),i.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||R(this,e,t,r,Math.pow(2,8*r)-1,0);var i=1,s=0;for(this[t]=255&e;++s<r&&(i*=256);)this[t+s]=e/i&255;return t+r},u.prototype.writeUIntBE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||R(this,e,t,r,Math.pow(2,8*r)-1,0);var i=r-1,s=1;for(this[t+i]=255&e;--i>=0&&(s*=256);)this[t+i]=e/s&255;return t+r},u.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):C(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):C(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):M(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):M(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);R(this,e,t,r,i-1,-i)}var s=0,o=1,a=0;for(this[t]=255&e;++s<r&&(o*=256);)e<0&&0===a&&0!==this[t+s-1]&&(a=1),this[t+s]=(e/o>>0)-a&255;return t+r},u.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);R(this,e,t,r,i-1,-i)}var s=r-1,o=1,a=0;for(this[t+s]=255&e;--s>=0&&(o*=256);)e<0&&0===a&&0!==this[t+s+1]&&(a=1),this[t+s]=(e/o>>0)-a&255;return t+r},u.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):C(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):C(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):M(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):M(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,r){return L(this,e,t,!0,r)},u.prototype.writeFloatBE=function(e,t,r){return L(this,e,t,!1,r)},u.prototype.writeDoubleLE=function(e,t,r){return N(this,e,t,!0,r)},u.prototype.writeDoubleBE=function(e,t,r){return N(this,e,t,!1,r)},u.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var i,s=n-r;if(this===e&&r<t&&t<n)for(i=s-1;i>=0;--i)e[i+t]=this[i+r];else if(s<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<s;++i)e[i+t]=this[i+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+s),t);return s},u.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var s;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(s=t;s<r;++s)this[s]=e;else{var o=u.isBuffer(e)?e:D(new u(e,n).toString()),a=o.length;for(s=0;s<r-t;++s)this[s+t]=o[s%a]}return this};var U=/[^+\/0-9A-Za-z-_]/g;function F(e){return e<16?"0"+e.toString(16):e.toString(16)}function D(e,t){var r;t=t||1/0;for(var n=e.length,i=null,s=[],o=0;o<n;++o){if((r=e.charCodeAt(o))>55295&&r<57344){if(!i){if(r>56319){(t-=3)>-1&&s.push(239,191,189);continue}if(o+1===n){(t-=3)>-1&&s.push(239,191,189);continue}i=r;continue}if(r<56320){(t-=3)>-1&&s.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(t-=3)>-1&&s.push(239,191,189);if(i=null,r<128){if((t-=1)<0)break;s.push(r)}else if(r<2048){if((t-=2)<0)break;s.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;s.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;s.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return s}function Y(e){return n.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(U,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function q(e,t,r,n){for(var i=0;i<n&&!(i+r>=t.length||i>=e.length);++i)t[i+r]=e[i];return i}}).call(this,r(1))},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectChange=t.MessageType=t.PacketType=t.ProcessType=void 0,function(e){e[e.Agent=1]="Agent",e[e.Headup=2]="Headup",e[e.Player=3]="Player",e[e.Server=4]="Server",e[e.Master=5]="Master",e[e.Module=6]="Module"}(t.ProcessType||(t.ProcessType={})),function(e){e[e.Heartbeat=0]="Heartbeat",e[e.Handshake=1]="Handshake",e[e.Authenticate=2]="Authenticate",e[e.Messages=3]="Messages",e[e.FederationAdded=4]="FederationAdded",e[e.FederationRemoved=5]="FederationRemoved"}(t.PacketType||(t.PacketType={})),function(e){e[e.Null=0]="Null",e[e.ObjectChanges=1]="ObjectChanges",e[e.EventDispatch=2]="EventDispatch",e[e.ServiceRequest=3]="ServiceRequest",e[e.ServiceFulfill=4]="ServiceFulfill",e[e.ServiceReject=5]="ServiceReject"}(t.MessageType||(t.MessageType={})),function(e){e[e.CREATE=1]="CREATE",e[e.UPDATE=2]="UPDATE",e[e.DELETE=3]="DELETE"}(t.ObjectChange||(t.ObjectChange={}))},function(e){e.exports=JSON.parse('{"deltas":[0,1],"colors":[[0.4,0.4,0.4,0.6],[0.4,0.4,0.4,0.6]]}')},function(e,t,r){"use strict";var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.Compressor=void 0;var i=r(0),s=function(){function e(){this.properties={},this.objects={},this.lastPropertyId=0,this.lastObjectId=0,this.buffer=null,this.index=0}return e.prototype.encode=function(e){for(var t in this.buffer=i.Buffer.allocUnsafe(8),this.index=0,e)e.hasOwnProperty(t)&&this.write(e[t],t);return this.addByte(0),i.Buffer.from(this.buffer.subarray(0,this.index))},e.prototype.write=function(e,t){var r,i,s=t?this.getOrAddProperty(t):32768,o=256&s?128:0;if(null==e)return o|=1,this.addByte(o),void this.addProperty(s,t);var a=typeof e;if("boolean"===a)return o|=e?3:2,this.addByte(o),void this.addProperty(s,t);if("number"!==a&&"bigint"!==a){if(null==e.$id)if(e instanceof Uint8Array){var u=e.byteLength;0!==u&&u<31?(o|=64,o|=u,this.addByte(o),this.addProperty(s,t),this.addBinary(e)):u<65536?(o|=64,this.addByte(o),this.addProperty(s,t),this.addUInt16(u),this.addBinary(e)):u<4294967296&&(o|=95,this.addByte(o),this.addProperty(s,t),this.addUInt32(u),this.addBinary(e))}else{if("string"==typeof e||e instanceof String){var c=this.index;this.addByte(0),this.addProperty(s,t);var l=this.addString(e.toString());return 0!==l&&l<32?(o|=96,o|=l):(o|=96,this.addByte(0)),void(this.buffer[c]=o)}if(e instanceof Array){o|=5,this.addByte(o),this.addProperty(s,t);try{for(var d=n(e),f=d.next();!f.done;f=d.next()){var h=f.value;this.write(h,null)}}catch(e){r={error:e}}finally{try{f&&!f.done&&(i=d.return)&&i.call(d)}finally{if(r)throw r.error}}this.addByte(0)}else if("object"!==a);else{for(var p in o|=4,this.addByte(o),this.addProperty(s,t),e)e.hasOwnProperty(p)&&this.write(e[p],p);this.addByte(0)}}else if(o|=8,o|=(h=this.getOrAddObjectId(e.$id))>>8&7,this.addByte(o),this.addProperty(s,t),this.addByte(255&h),0===h||2047===h)for(var y=0;y<e.$id.length;y+=2)this.addByte(parseInt(e.$id.substr(y,2),16))}else Number.isInteger(e)?e>=0&&e<24?(o|=32,o|=e,this.addByte(o),this.addProperty(s,t)):(o|=56,e<0&&(o|=4,e+=4294967296,e^=4294967295),e<256?(this.addByte(o),this.addProperty(s,t),this.addByte(e)):e<65536?(o|=1,this.addByte(o),this.addProperty(s,t),this.addUInt16(e)):(o|=2,this.addByte(o),this.addProperty(s,t),this.addUInt32(e))):(o|=6,this.addByte(o),this.addProperty(s,t),this.addFloat(e))},e.prototype.ensureBufferSize=function(e){if(e>this.buffer.length){var t=i.Buffer.allocUnsafe(1.5*e|0);this.buffer.copy(t,0,0,this.index),this.buffer=t}},e.prototype.addByte=function(e){this.ensureBufferSize(this.index+1),this.buffer.writeUInt8(e,this.index++)},e.prototype.addUInt16=function(e){this.ensureBufferSize(this.index+2),this.buffer.writeUInt16BE(e,this.index),this.index+=2},e.prototype.addUInt32=function(e){this.ensureBufferSize(this.index+4),this.buffer.writeUInt32BE(e,this.index),this.index+=4},e.prototype.addFloat=function(e){this.ensureBufferSize(this.index+4),this.buffer.writeFloatLE(e,this.index),this.index+=4},e.prototype.addProperty=function(e,t){t&&(this.addByte(255&e),0!==e&&511!==e||(this.addString(t),this.addByte(0)))},e.prototype.addString=function(e){this.ensureBufferSize(this.index+e.length);var t=this.buffer.write(e,this.index,e.length,"utf-8");return this.index+=t,t},e.prototype.addBinary=function(e){this.ensureBufferSize(this.index+e.length);var t=i.Buffer.from(e).copy(this.buffer,this.index);this.index+=t},e.prototype.getOrAddProperty=function(e){var t=this.properties[e];if(null!=t)return t;var r=0;return 511==++this.lastPropertyId&&(this.properties={},this.lastPropertyId=1,r=511),this.properties[e]=this.lastPropertyId,r},e.prototype.getOrAddObjectId=function(e){var t=this.objects[e];if(null!=t)return t;var r=0;return 2047==++this.lastObjectId&&(this.objects={},this.lastObjectId=1,r=2047),this.objects[e]=this.lastObjectId,r},e}();t.Compressor=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Decompressor=void 0;var n=r(0),i=function(){function e(){this.propertyStrings=[],this.objectIds=[]}return e.prototype.decode=function(e){this.buffer=e,this.index=0;for(var t={};this.decodeElement(t,null););return t},e.prototype.decodeElement=function(e,t){var r=this.readByte();if(0===r)return!1;var i=127&r,s=e?this.readProperty(r):null;switch(i){case 1:return e?e[s]=null:t.push(null),!0;case 2:return e?e[s]=!1:t.push(!1),!0;case 3:return e?e[s]=!0:t.push(!0),!0;case 4:for(var o={};this.decodeElement(o,null););return e?e[s]=o:t.push(o),!0;case 5:for(o=[];this.decodeElement(null,o););return e?e[s]=o:t.push(o),!0;case 6:o=this.readFloat();return e?e[s]=o:t.push(o),!0}if(8==(120&i)){var a=this.readByte();2047===(a|=(7&i)<<8)&&(this.objectIds=[],a=0);o=void 0;if(0===a)o=this.readObjectId(),this.objectIds.push(o);else{if(!(a<=this.objectIds.length))throw new Error("decompressor: invalid object "+(a-1)+" (should be < "+this.objectIds.length+")");o=this.objectIds[a-1]}return e?e[s]=o:t.push(o),!0}switch(96&i){case 32:var u=31&i;if(u<24)return e?e[s]=u:t.push(u),!0;o=0;switch(3&i){case 0:o=this.readByte();break;case 1:o=this.readUInt16();break;case 2:o=this.readUInt32()}return 0!=(4&i)&&(o^=4294967295,o-=4294967296),e?e[s]=o:t.push(o),!0;case 64:0===(c=31&i)?c=this.readUInt16():31===c&&(c=this.readUInt32());o=n.Buffer.from(this.buffer.buffer,this.index,c);return this.index+=c,e?e[s]=o:t.push(o),!0;case 96:var c;o=void 0;return o=0===(c=31&i)?this.readString():this.readStringWithSize(c),e?e[s]=o:t.push(o),!0}return!1},e.prototype.readProperty=function(e){var t=this.readByte();if(0!=(128&e)&&(t|=256),511===t&&(this.propertyStrings=[],t=0),0===t){var r=this.readString();return this.propertyStrings.push(r),r}if(--t>=this.propertyStrings.length)throw new Error("decompressor: invalid property "+t+" (should be < "+this.propertyStrings.length+")");return this.propertyStrings[t]},e.prototype.readByte=function(){return this.buffer.readUInt8(this.index++)},e.prototype.readUInt16=function(){var e=this.buffer.readUInt16BE(this.index);return this.index+=2,e},e.prototype.readUInt32=function(){var e=this.buffer.readUInt32BE(this.index);return this.index+=4,e},e.prototype.readFloat=function(){var e=this.buffer.readFloatLE(this.index);return this.index+=4,e},e.prototype.readObjectId=function(){var e={$id:n.Buffer.from(this.buffer.buffer,this.index,12).toString("hex")};return this.index+=12,e},e.prototype.readString=function(){for(var e=this.index;0!==this.buffer.readUInt8(e);)++e;var t=this.buffer.subarray(this.index,e),r=new TextDecoder("utf-8").decode(t);return this.index=e+1,r},e.prototype.readStringWithSize=function(e){var t=this.buffer.subarray(this.index,this.index+e),r=new TextDecoder("utf-8").decode(t);return this.index+=e,r},e}();t.Decompressor=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.generateObjectId=void 0;var n=r(0),i=0;var s=function(e){for(var t=new Uint8Array(e),r=0;r<e;++r)t[r]=Math.floor(256*Math.random());return t}(5);t.generateObjectId=function(){var e=~~(Date.now()/1e3),t=i=(i+1)%16777215,r=n.Buffer.alloc(12);return r[3]=255&e,r[2]=e>>8&255,r[1]=e>>16&255,r[0]=e>>24&255,r[4]=s[0],r[5]=s[1],r[6]=s[2],r[7]=s[3],r[8]=s[4],r[11]=255&t,r[10]=t>>8&255,r[9]=t>>16&255,r.toString("hex")}},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),i(r(41),t),i(r(4),t),i(r(5),t),i(r(8),t),i(r(9),t),i(r(11),t),i(r(46),t),i(r(2),t),i(r(10),t),i(r(6),t),i(r(12),t),i(r(16),t),i(r(48),t),i(r(15),t),i(r(49),t),i(r(50),t),i(r(51),t),i(r(52),t),i(r(17),t)},function(e,t,r){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),t.EmbeddedConnection=void 0;var n=r(4),i=r(5),s=function(){function t(){if(this.targetOrigin="*",this.onOpenCallback=null,this.onCloseCallback=null,this.onPacketCallback=null,this.compressor=null,this.decompressor=null,this.openerInterval=null,!window.parent)throw Error("EmbeddedConnection: missing window.parent")}return t.prototype.sendMessage=function(e){window.parent.postMessage(e,this.targetOrigin)},t.prototype.onOpen=function(e){this.onOpenCallback=e},t.prototype.onClose=function(e){this.onCloseCallback=e},t.prototype.onPacket=function(e){this.onPacketCallback=e},t.prototype.open=function(){this.messageListener?console.warn("EmbeddedConnection.open(): session is already opened"):(this.compressor=new n.Compressor,this.decompressor=new i.Decompressor,this.addMessageListener(),this.startSendOpen())},t.prototype.close=function(){this.stopSendOpen(),this.messageListener?this.sendMessage({close:!0}):console.warn("EmbeddedConnection.close(): session is not open")},t.prototype.sendPacket=function(e){this.sendMessage({packet:this.compressor.encode(e)})},t.prototype.addMessageListener=function(){var t=this;this.messageListener=function(r){if(r.source===window.parent)if(r.data.packet)if(t.onPacketCallback){var n=r.data.packet,i=e.from(n,0,n.byteLength),s=t.decompressor.decode(i);t.onPacketCallback(s)}else console.error("EmbeddedConnection: missing onPacket callback");else r.data.open?(t.stopSendOpen(),t.onOpenCallback&&t.onOpenCallback()):r.data.close&&(t.stopSendOpen(),t.removeMessageListener(),t.onCloseCallback&&t.onCloseCallback())},window.addEventListener("message",this.messageListener)},t.prototype.removeMessageListener=function(){window.removeEventListener("message",this.messageListener),this.messageListener=null},t.prototype.startSendOpen=function(){var e=this;this.sendMessage({open:!0}),this.openerInterval=setInterval((function(){e.openerInterval&&e.sendMessage({open:!0})}),200)},t.prototype.stopSendOpen=function(){this.openerInterval&&(clearInterval(this.openerInterval),this.openerInterval=null)},t}();t.EmbeddedConnection=s}).call(this,r(0).Buffer)},function(e,t,r){"use strict";var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.Federation=void 0;var i=r(2),s=r(0),o=r(6),a=r(10),u=function(){function e(e,t){this.runtime=e,this.federationId=t,this.objectInstances={},this.undefinedInstances=[],this.objectClasses={},this.eventsObservers={},this.serviceProviders={}}return e._isObject=function(e){return e&&"object"==typeof e},e.prototype.objects=function(e){var t=this.objectClasses[e];return t||(t=new a.ObjectClass(this,e),this.objectClasses[e]=t),t},e.prototype.findObject=function(e){for(var t in this.objectInstances)if(this.objectInstances.hasOwnProperty(t)&&e(this.objectInstances[t]))return this.objectInstances[t];return null},e.prototype.getObjectOrNull=function(e){return this.objectInstances.hasOwnProperty(e)?this.objectInstances[e]:null},e.prototype.processNativeChanges=function(e){var t,r,s=this.getOrCreateObjectRef(e.i.$id);if(s._class||(s._class=e.c),!s.$class){var o=this.objects(s._class);s.$class=o;try{for(var u=n(o.propertyNames),c=u.next();!c.done;c=u.next()){var l=c.value;a.defineObjectProperty(this,s,l),s[l+"$changed"]=!1}}catch(e){t={error:e}}finally{try{c&&!c.done&&(r=u.return)&&r.call(u)}finally{if(t)throw t.error}}}var d=e.t===i.ObjectChange.CREATE,f=e.t===i.ObjectChange.DELETE;d?s.$defined||this.undefinedInstances.push(s):f&&(s._defined=!1,s._defined$changed=!0);var h=e.p;if(h)for(var p in h){if(h.hasOwnProperty(p))a.defineObjectProperty(this,s,p),s["-"+p]=this.decodeObjectIds(h[p].v),d||(s[p+"$changed"]=!0)}if((f||s.$defined)&&(s.$class.subject.next(s),s._defined$changed=!1),f){delete this.objectInstances[e.i.$id];var y=this.undefinedInstances.findIndex((function(e){return e===s}));-1!==y&&delete this.undefinedInstances[y]}if(h)for(var p in h)h.hasOwnProperty(p)&&(s[p+"$changed"]=!1);this.defineUndefinedInstances()},e.prototype.defineUndefinedInstances=function(){for(var e=this;;){var t=this.undefinedInstances.findIndex((function(t){return!e.objectHasUndefinedRefs(t)}));if(-1===t)return;var r=this.undefinedInstances[t];for(var n in this.undefinedInstances.splice(t,1),r)r.hasOwnProperty(n)&&!n.startsWith("$")&&n.endsWith("$changed")&&(r[n]=!0);for(var n in r._defined=!0,r.$class.subject.next(r),r)r.hasOwnProperty(n)&&!n.startsWith("$")&&n.endsWith("$changed")&&(r[n]=!1)}},e.prototype.createObjectInstance=function(e){var t=this.getOrCreateObjectRef(o.generateObjectId());return t._class=e,t.$class=this.objects(e),t._defined=!0,this.runtime.sendObjectChangesToRuntime(this.federationId,t,e,i.ObjectChange.CREATE,null,null),t},e.prototype.objectPropertyChanged=function(e,t,r){this.runtime.sendObjectChangesToRuntime(this.federationId,e,e._class,i.ObjectChange.UPDATE,t,r)},e.prototype.getOrCreateObjectRef=function(e){var t=this,r=this.objectInstances[e];if(!r){var n={_defined:!1,_defined$changed:!1};Object.defineProperty(n,"$id",{get:function(){return e}}),Object.defineProperty(n,"$defined",{get:function(){return n._defined}}),Object.defineProperty(n,"$defined$changed",{get:function(){return n._defined$changed}}),Object.defineProperty(n,"$deletable",{get:function(){return!1}}),Object.defineProperty(n,"$deletable$wanted",{get:function(){return!1}}),Object.defineProperty(n,"$delete",{value:function(){t.runtime.sendObjectChangesToRuntime(t.federationId,{$id:e},n._class,i.ObjectChange.DELETE,null,null),n._defined=!1}}),r=n,this.objectInstances[e]=r}return r},e.prototype.decodeObjectIds=function(t){var r=this;if(null!=t){var n=t.$id;if(null!=n)return this.getOrCreateObjectRef(n);if(t instanceof s.Buffer)return t;if(t instanceof Array){var i=[];return t.forEach((function(e){return i.push(r.decodeObjectIds(e))})),i}if(e._isObject(t)){var o={};for(var a in t)t.hasOwnProperty(a)&&(o[a]=this.decodeObjectIds(t[a]));return o}}return t},e.prototype.objectHasUndefinedRefs=function(e){for(var t in e)if(e.hasOwnProperty(t)&&t.startsWith("-")&&e.hasOwnProperty(t.substr(1)+"$changed")&&this.valueHasUndefinedRefs(e[t]))return!0;return!1},e.prototype.valueHasUndefinedRefs=function(t){var r=this;if(null==t)return!1;var n=t.$id;if(null!=n)return!this.objectInstances.hasOwnProperty(n)||!this.objectInstances[n]._defined;if(t instanceof s.Buffer)return!1;if(t instanceof Array)return t.some((function(e){return r.valueHasUndefinedRefs(e)}));if(e._isObject(t)){for(var i in t)if(t.hasOwnProperty(i)&&this.valueHasUndefinedRefs(t[i]))return!0;return!1}return!1},e.prototype.observeEvents=function(e,t){this.eventsObservers[e]=t},e.prototype.dispatchEvent=function(e,t){this.dispatchEventScript(e,t),this.runtime.sendEventNotificationToRuntime(this.federationId,e,t)},e.prototype.dispatchEventScript=function(e,t){var r=this.eventsObservers[e];r&&r(t)},e.prototype.provideService=function(e,t){this.serviceProviders[e]=t},e.prototype.requestService=function(e,t){return this.requestLocalService(e,t)||this.runtime.sendServiceRequestToRuntime(this.federationId,e,t)},e.prototype.requestLocalService=function(e,t){var r=this.serviceProviders[e];return r?r(t):null},e}();t.Federation=u},function(e,t,r){"use strict";var n=this&&this.__generator||function(e,t){var r,n,i,s,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,n&&(i=2&s[0]?n.return:s[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,s[1])).done)return i;switch(n=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,n=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!(i=o.trys,(i=i.length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){o.label=s[1];break}if(6===s[0]&&o.label<i[1]){o.label=i[1],i=s;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(s);break}i[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],n=0}finally{r=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}},i=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectClass=t.defineObjectProperty=void 0;var s=Reflect.getOwnPropertyDescriptor,o=r(40);function a(e,t,r){if(!s(t,r)){var n="-"+r;Object.defineProperty(t,r,{enumerable:!0,get:function(){return t[n]},set:function(i){t[n]=i,e.objectPropertyChanged(t,r,i)}})}}t.defineObjectProperty=a;var u=function(){function e(e,t){this.federation=e,this.name=t,this.subject=new o.Subject,this.propertyNames=[]}return e.prototype.define=function(e){var t,r;try{for(var n=i(e),s=n.next();!s.done;s=n.next()){var o=s.value;this.propertyNames.push(o)}}catch(e){t={error:e}}finally{try{s&&!s.done&&(r=n.return)&&r.call(n)}finally{if(t)throw t.error}}},e.prototype.create=function(e){var t,r,n=this.federation.createObjectInstance(this.name);try{for(var s=i(this.propertyNames),o=s.next();!o.done;o=s.next()){var u=o.value;a(this.federation,n,u)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(r=s.return)&&r.call(s)}finally{if(t)throw t.error}}if(e)for(var u in e)e.hasOwnProperty(u)&&(a(this.federation,n,u),n[u]=e[u]);return n},e.prototype.subscribe=function(e,t,r){return this.subject.subscribe(e,t,r)},e.prototype[Symbol.iterator]=function(){var e,t,r,i,s,o;return n(this,(function(n){switch(n.label){case 0:for(r in e=this.federation.objectInstances,t=[],e)t.push(r);i=0,n.label=1;case 1:return i<t.length?(s=t[i],e.hasOwnProperty(s)&&(o=e[s])._defined&&o.$class===this?[4,o]:[3,3]):[3,4];case 2:n.sent(),n.label=3;case 3:return i++,[3,1];case 4:return[2]}}))},e.prototype.find=function(e){var t,r;try{for(var n=i(this),s=n.next();!s.done;s=n.next()){var o=s.value;if(e(o))return o}}catch(e){t={error:e}}finally{try{s&&!s.done&&(r=n.return)&&r.call(n)}finally{if(t)throw t.error}}return null},e}();t.ObjectClass=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.InputDevicePoster=void 0;var n=r(45),i=function(){function e(){this.inputDeviceAdapter=null,this.inputDeviceAdapter=new n.InputDeviceAdapter(this)}return e.prototype.keyDown=function(e){window.parent.postMessage({keyDown:{keyCode:e}},"*")},e.prototype.keyUp=function(e){window.parent.postMessage({keyUp:{keyCode:e}},"*")},e.prototype.mouseUpdate=function(e,t,r,n,i){window.parent.postMessage({mouseUpdate:{x:e,y:t,buttons:r,count:n,timestamp:i}},"*")},e.prototype.mouseWheel=function(e,t,r,n){window.parent.postMessage({mouseWheel:{x:e,y:t,dx:r,dy:n}},"*")},e}();t.InputDevicePoster=i},function(e,t,r){"use strict";(function(e,n){var i,s=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.Runtime=void 0,r(14);var a=r(9),u=r(2),c=r(15),l=r(40),d=function(t){function r(){var e=t.call(this)||this;return e.configuration=null,e.federations={},e.onStartup=new l.Subject,e.onError=null,e.connection=null,e.connectionIsOpen=!1,e.serviceRequests={},e.lastServiceRequestId=0,e.authentication=null,e.outgoingPayloads=[],e.outgoingMessages=[],e.outgoingImmediate=null,e}return s(r,t),r.toError=function(e){if(null==e)return null;if("[object Error]"===Object.prototype.toString.call(e))return e;if(e.message){var t=e.stackX?e.stackX:e.stack?e.stack:e.file?e.name+": "+e.message+"\n  at "+e.file+":"+e.line+" ("+e.file+":"+e.line+":1)":null;return(r=new Error(e.message)).name=e.name,r.stack=t||"",t&&(r.stackX=t),r}try{var r;return(r=new Error(JSON.stringify(e))).stack="",r}catch(e){}return e},r.toReason=function(e){return{name:Object.prototype.toString.call(e),message:e.message,stack:e.stack}},r.prototype.startup=function(e){var t=this;this.configuration=e,this.connection=this.configuration.newConnection(),this.connection.onOpen((function(){t.connectionIsOpen=!0;var e=t.outgoingPayloads;for(var r in t.outgoingPayloads=null,t.enqueueOrSendOutgoingPayload({m:u.PacketType.Handshake,id:t.configuration.processId,pt:t.configuration.processType}),t.configuration.subjectId&&t.enqueueOrSendOutgoingPayload({m:u.PacketType.Authenticate,a:"",s:t.configuration.subjectId,n:"",i:""}),t.federations)t.federations.hasOwnProperty(r)&&t.enqueueOrSendOutgoingPayload({m:u.PacketType.FederationAdded,x:r,id:t.configuration.processId});t.trySendAuthenticateMessage(),t.outgoingPayloads=e})),this.connection.onClose((function(){t.connectionIsOpen=!1})),this.connection.onPacket((function(e){try{t.dispatchPacket(e)}catch(e){t.onError&&t.onError(e)}})),this.connection.open(),this.onStartup.next(),this.onStartup.complete()},r.prototype.authenticate=function(e,t,r,n){this.authentication={accessToken:e,subjectId:t,nickname:r,imageUrl:n},this.trySendAuthenticateMessage()},r.prototype.trySendAuthenticateMessage=function(){this.connectionIsOpen&&this.authentication&&this.enqueueOrSendOutgoingPayload({m:u.PacketType.Authenticate,a:this.authentication.accessToken,s:this.authentication.subjectId,n:this.authentication.nickname,i:this.authentication.imageUrl})},r.prototype.joinFederation=function(e){var t=new a.Federation(this,e);return this.federations[e]=t,this.connectionIsOpen&&this.enqueueOrSendOutgoingPayload({m:u.PacketType.FederationAdded,x:e,id:this.configuration.processId}),t},r.prototype.leaveFederation=function(e){this.federations.hasOwnProperty(e)&&(this.enqueueOrSendOutgoingPayload({m:u.PacketType.FederationRemoved,x:e,id:this.configuration.processId}),delete this.federations[e])},r.prototype.dispatchPacket=function(e){var t,r;if(e.m===u.PacketType.Messages)try{for(var n=o(e.mm),i=n.next();!i.done;i=n.next()){var s=i.value;switch(s.m){case u.MessageType.ObjectChanges:this._dispatchObjectChangesFromRemote(s);break;case u.MessageType.EventDispatch:this._dispatchEventFromRemote(s);break;case u.MessageType.ServiceRequest:this._dispatchServiceRequestFromRemote(s);break;case u.MessageType.ServiceFulfill:this._dispatchServiceFulfillFromRemote(s);break;case u.MessageType.ServiceReject:this._dispatchServiceRejectFromRemote(s)}}}catch(e){t={error:e}}finally{try{i&&!i.done&&(r=n.return)&&r.call(n)}finally{if(t)throw t.error}}},r.prototype.sendObjectChangesToRuntime=function(e,t,r,n,i,s){var o={};null!=i&&(o[i]={v:s,t:0}),this.enqueueOrSendOutgoingPayload({m:u.PacketType.Messages,mm:[{m:u.MessageType.ObjectChanges,x:e,i:t,c:r,t:n,p:o}]})},r.prototype.sendEventNotificationToRuntime=function(e,t,r){this.enqueueOrSendOutgoingPayload({m:u.PacketType.Messages,mm:[{m:u.MessageType.EventDispatch,x:e,e:t,v:r}]})},r.prototype.sendServiceRequestToRuntime=function(e,t,r){var n=this,i=++this.lastServiceRequestId;return new Promise((function(s,o){n.serviceRequests[i]={federationId:e,resolve:s,reject:o};try{n.enqueueOrSendOutgoingPayload({m:u.PacketType.Messages,mm:[{m:u.MessageType.ServiceRequest,x:e,s:t,r:i,v:r}]})}catch(e){delete n.serviceRequests[i],o(e)}}))},r.prototype.enqueueOrSendOutgoingPayload=function(e){var t,r;if(this.connectionIsOpen){if(this.outgoingPayloads){try{for(var n=o(this.outgoingPayloads),i=n.next();!i.done;i=n.next()){var s=i.value;this.connection.sendPacket(s)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(r=n.return)&&r.call(n)}finally{if(t)throw t.error}}this.outgoingPayloads=null}e.m===u.PacketType.Messages?this.enqueueOutgoingMessages(e.mm):(this.flushOutgoingMessages(),this.connection.sendPacket(e))}else this.outgoingPayloads.push(e)},r.prototype.enqueueOutgoingMessages=function(t){var r,n,i=this;try{for(var s=o(t),a=s.next();!a.done;a=s.next()){var u=a.value;this.outgoingMessages.push(u)}}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=s.return)&&n.call(s)}finally{if(r)throw r.error}}this.outgoingImmediate||(this.outgoingImmediate=e((function(){i.outgoingImmediate=null,i.flushOutgoingMessages()})))},r.prototype.flushOutgoingMessages=function(){this.outgoingMessages.length&&(this.connection.sendPacket({m:u.PacketType.Messages,mm:this.outgoingMessages}),this.outgoingMessages=[]),this.outgoingImmediate&&(n(this.outgoingImmediate),this.outgoingImmediate=null)},r.prototype._dispatchObjectChangesFromRemote=function(e){var t=this.federations[e.x];t&&t.processNativeChanges(e)},r.prototype._dispatchEventFromRemote=function(e){var t=this.federations[e.x];if(t){var r=t.decodeObjectIds(e.v);t.dispatchEventScript(e.e,r)}},r.prototype._dispatchServiceRequestFromRemote=function(e){var t=this,n=this.federations[e.x];if(!n)return this.enqueueOrSendOutgoingPayload({m:u.PacketType.Messages,mm:[{m:u.MessageType.ServiceReject,r:e.r,v:r.toReason(new Error("unknown federation: "+e.x))}]});var i=n.decodeObjectIds(e.v),s=n.requestLocalService(e.s,i);if(!s)return this.enqueueOrSendOutgoingPayload({m:u.PacketType.Messages,mm:[{m:u.MessageType.ServiceReject,r:e.r,v:r.toReason(new Error("unknown service: "+e.s))}]});s.then((function(r){t.enqueueOrSendOutgoingPayload({m:u.PacketType.Messages,mm:[{m:u.MessageType.ServiceFulfill,r:e.r,v:r}]})})).catch((function(n){t.enqueueOrSendOutgoingPayload({m:u.PacketType.Messages,mm:[{m:u.MessageType.ServiceReject,r:e.r,v:r.toReason(n)}]})}))},r.prototype._dispatchServiceFulfillFromRemote=function(e){var t=this.serviceRequests[e.r];if(t){delete this.serviceRequests[e.r];var r=this.federations[t.federationId];if(r){var n=r.decodeObjectIds(e.v);t.resolve(n)}else t.reject(new Error("federation not found"))}else console.error("_dispatchServiceFulfillFromRemote: request "+e.r+" not found")},r.prototype._dispatchServiceRejectFromRemote=function(e){var t=this.serviceRequests[e.r];if(t){delete this.serviceRequests[e.r];var n=this.federations[t.federationId];if(n){var i=n.decodeObjectIds(e.v);t.reject(r.toError(i))}else t.reject(new Error("federation not found"))}else console.error("_dispatchServiceRejectFromRemote: request "+e.r+" not found")},r}(c.RuntimeSession);t.Runtime=d}).call(this,r(13).setImmediate,r(13).clearImmediate)},function(e,t,r){(function(e){var n=void 0!==e&&e||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function s(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new s(i.call(setTimeout,n,arguments),clearTimeout)},t.setInterval=function(){return new s(i.call(setInterval,n,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},s.prototype.unref=s.prototype.ref=function(){},s.prototype.close=function(){this._clearFn.call(n,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},r(14),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,r(1))},function(e,t,r){(function(e,t){!function(e,r){"use strict";if(!e.setImmediate){var n,i,s,o,a,u=1,c={},l=!1,d=e.document,f=Object.getPrototypeOf&&Object.getPrototypeOf(e);f=f&&f.setTimeout?f:e,"[object process]"==={}.toString.call(e.process)?n=function(e){t.nextTick((function(){p(e)}))}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,r=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=r,t}}()?e.MessageChannel?((s=new MessageChannel).port1.onmessage=function(e){p(e.data)},n=function(e){s.port2.postMessage(e)}):d&&"onreadystatechange"in d.createElement("script")?(i=d.documentElement,n=function(e){var t=d.createElement("script");t.onreadystatechange=function(){p(e),t.onreadystatechange=null,i.removeChild(t),t=null},i.appendChild(t)}):n=function(e){setTimeout(p,0,e)}:(o="setImmediate$"+Math.random()+"$",a=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(o)&&p(+t.data.slice(o.length))},e.addEventListener?e.addEventListener("message",a,!1):e.attachEvent("onmessage",a),n=function(t){e.postMessage(o+t,"*")}),f.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),r=0;r<t.length;r++)t[r]=arguments[r+1];var i={callback:e,args:t};return c[u]=i,n(u),u++},f.clearImmediate=h}function h(e){delete c[e]}function p(e){if(l)setTimeout(p,0,e);else{var t=c[e];if(t){l=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(void 0,r)}}(t)}finally{h(e),l=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,r(1),r(47))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RuntimeSession=void 0;var n=function(){};t.RuntimeSession=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RuntimeConfiguration=void 0;var n=r(2),i=r(6),s=r(17),o=r(8),a=function(){function e(){}return e.autoRedirect=function(){window===window.parent&&(window.location.href="https://warstage.net/index.html#"+window.location.toString())},e.autoDetect=function(){var t=new e,r=new URLSearchParams(document.location.search.substring(1)),a=r.get("connect");a?(t.newConnection=function(){return new s.WebSocketConnection(a)},t.processType=n.ProcessType.Agent):(t.newConnection=function(){return new o.EmbeddedConnection},t.processType=n.ProcessType.Module);var u=r.get("pt");return u&&(t.processType=Number(u)),t.processId=r.get("pid")||i.generateObjectId(),t.subjectId=r.get("sub"),t},e}();t.RuntimeConfiguration=a},function(e,t,r){"use strict";(function(e,n){var i=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.WebSocketConnection=void 0;var s=r(4),o=r(5),a=function(){function t(e){this.url=e,this.webSocket=null,this.isOpen=!1,this.compressor=null,this.decompressor=null,this.queueOut=[],this.queueIn=[],this.reader=null}return t.toHexString=function(e){return Array.from(e,(function(e){return("0"+(255&e).toString(16)).slice(-2)})).join("")},t.prototype.reset=function(){this.webSocket=null,this.isOpen=!1,this.compressor=null,this.decompressor=null,this.queueOut=[],this.queueIn=[],this.reader=null},t.prototype.onOpen=function(e){this.onOpenCallback=e},t.prototype.onClose=function(e){this.onCloseCallback=e},t.prototype.onPacket=function(e){this.onPacketCallback=e},t.prototype.open=function(){var t=this;this.reopener||(this.reopener=e.setInterval((function(){t.webSocket||t.open()}),500)),this.onPacket&&(this.webSocket=new WebSocket(this.url,"warstage"),this.webSocket.addEventListener("open",(function(){var e,r;t.isOpen=!0,t.compressor=new s.Compressor,t.decompressor=new o.Decompressor,t.onOpenCallback&&t.onOpenCallback();try{for(var n=i(t.queueOut),a=n.next();!a.done;a=n.next()){var u=a.value,c=t.compressor.encode({p:u});t.webSocket.send(c.buffer)}}catch(t){e={error:t}}finally{try{a&&!a.done&&(r=n.return)&&r.call(n)}finally{if(e)throw e.error}}t.queueOut=[]})),this.webSocket.addEventListener("close",(function(){t.reset(),t.onCloseCallback&&t.onCloseCallback()})),this.webSocket.addEventListener("error",(function(){t.reset()})),this.webSocket.addEventListener("message",(function(e){t.queueIn.push(e.data),t.tryProcessQueueIn()})))},t.prototype.tryProcessQueueIn=function(){var e=this;if(!this.reader&&this.queueIn.length){var t=new FileReader;t.onload=function(){if(t===e.reader){e.reader=null;var r=t.result;try{var i=e.decompressor.decode(n.from(r,0,r.byteLength));e.onPacketCallback(i.p),e.tryProcessQueueIn()}catch(t){e.isOpen=!1,e.webSocket.close()}}},this.reader=t,t.readAsArrayBuffer(this.queueIn.shift())}},t.prototype.close=function(){this.isOpen=!1,this.webSocket&&this.webSocket.close(),this.reopener&&(clearInterval(this.reopener),this.reopener=null),this.reset()},t.prototype.sendPacket=function(e){if(this.isOpen){var t=this.compressor.encode({p:e});this.webSocket.send(t.buffer)}else this.queueOut.push(e)},t}();t.WebSocketConnection=a}).call(this,r(1),r(0).Buffer)},function(e){e.exports=JSON.parse('{"deltas":[0,5],"colors":[[0.4,0.4,0.4,0.6],[0.4,0.4,0.4,0.6]]}')},function(e){e.exports=JSON.parse('[{"name":"arrow","size":[1,1,1],"lines":[{"deltas":[0,-4],"colors":[[0,0,0,0.2],[0,0,0,0.2]]}]},{"name":"bullet","size":[1,1,1],"lines":[{"deltas":[0,-50],"colors":[[1,1,0,0.2],[1,1,1,0.2]]}]},{"name":"cannonball","size":[1,1,1],"lines":[{"deltas":[0,-25,-25,-50],"colors":[[0.2,0.2,0.2,1],[0.2,0.2,0.2,0.75],[0.8,0.8,0.8,0.85],[0.8,0.8,0.8,0.65]]}]},{"name":"smoke","size":[1,1,1],"skins":[{"type":"BILLBOARD","loops":[{"texture":"billboards.png","texgrid":8,"vertices":[0,7,1,8,1,7,2,8,2,7,3,8,3,7,4,8,4,7,5,8,5,7,6,8,6,7,7,8,7,7,8,8]}]}]}]')},function(e){e.exports=JSON.parse('[{"name":"tree","size":[1,5,1],"skins":[{"type":"BILLBOARD","loops":[{"texture":"billboards.png","texgrid":8,"vertices":[0,0,1,1]}]}]},{"name":"tree","size":[1,5,1],"skins":[{"type":"BILLBOARD","loops":[{"texture":"billboards.png","texgrid":8,"vertices":[1,0,2,1]}]}]},{"name":"tree","size":[1,5,1],"skins":[{"type":"BILLBOARD","loops":[{"texture":"billboards.png","texgrid":8,"vertices":[2,0,3,1]}]}]},{"name":"tree","size":[1,5,1],"skins":[{"type":"BILLBOARD","loops":[{"texture":"billboards.png","texgrid":8,"vertices":[3,0,4,1]}]}]},{"name":"tree","size":[1,5,1],"skins":[{"type":"BILLBOARD","loops":[{"texture":"billboards.png","texgrid":8,"vertices":[4,0,5,1]}]}]},{"name":"tree","size":[1,5,1],"skins":[{"type":"BILLBOARD","loops":[{"texture":"billboards.png","texgrid":8,"vertices":[5,0,6,1]}]}]},{"name":"tree","size":[1,5,1],"skins":[{"type":"BILLBOARD","loops":[{"texture":"billboards.png","texgrid":8,"vertices":[6,0,7,1]}]}]},{"name":"tree","size":[1,5,1],"skins":[{"type":"BILLBOARD","loops":[{"texture":"billboards.png","texgrid":8,"vertices":[7,0,8,1]}]}]}]')},function(e){e.exports=JSON.parse('{"type":"BILLBOARD","loops":[{"type":{"friendly":true},"texture":"billboards.png","texgrid":8,"angles":[0,180],"vertices":[3,1,4,2,4,1,5,2]},{"type":{"hostile":true},"texture":"billboards.png","texgrid":8,"angles":[0,180],"vertices":[3,2,4,3,4,2,5,3]},{"type":{"dead":true},"texture":"billboards.png","texgrid":8,"vertices":[0,3,1,4]},{"type":{"dead":true},"texture":"billboards.png","texgrid":8,"vertices":[1,3,2,4]},{"type":{"dead":true},"texture":"billboards.png","texgrid":8,"vertices":[2,3,3,4]},{"type":{"dead":true},"texture":"billboards.png","texgrid":8,"vertices":[3,3,4,4]},{"type":{"dead":true},"texture":"billboards.png","texgrid":8,"vertices":[4,3,3,4]},{"type":{"dead":true},"texture":"billboards.png","texgrid":8,"vertices":[3,3,2,4]},{"type":{"dead":true},"texture":"billboards.png","texgrid":8,"vertices":[2,3,1,4]},{"type":{"dead":true},"texture":"billboards.png","texgrid":8,"vertices":[1,3,0,4]}]}')},function(e){e.exports=JSON.parse('{"type":"BILLBOARD","loops":[{"type":{"friendly":true},"texture":"billboards.png","texgrid":8,"angles":[45,90,135,225,270,315],"vertices":[7,1,8,2,6,1,7,2,5,1,6,2,6,1,5,2,7,1,6,2,8,1,7,2]},{"type":{"hostile":true},"texture":"billboards.png","texgrid":8,"angles":[45,90,135,225,270,315],"vertices":[7,2,8,3,6,2,7,3,5,2,6,3,6,2,5,3,7,2,6,3,8,2,7,3]},{"type":{"dead":true},"texture":"billboards.png","texgrid":8,"vertices":[0,4,1,5]},{"type":{"dead":true},"texture":"billboards.png","texgrid":8,"vertices":[1,4,2,5]},{"type":{"dead":true},"texture":"billboards.png","texgrid":8,"vertices":[2,4,3,5]},{"type":{"dead":true},"texture":"billboards.png","texgrid":8,"vertices":[3,4,4,5]},{"type":{"dead":true},"texture":"billboards.png","texgrid":8,"vertices":[4,4,5,5]},{"type":{"dead":true},"texture":"billboards.png","texgrid":8,"vertices":[5,4,6,5]},{"type":{"dead":true},"texture":"billboards.png","texgrid":8,"vertices":[6,4,7,5]},{"type":{"dead":true},"texture":"billboards.png","texgrid":8,"vertices":[7,4,8,5]}]}')},function(e){e.exports=JSON.parse('{"type":"BILLBOARD","loops":[{"type":{"friendly":true},"texture":"billboards.png","texgrid":8,"angles":[0,180],"vertices":[1,1,2,2,2,1,3,2]},{"type":{"hostile":true},"texture":"billboards.png","texgrid":8,"angles":[0,180],"vertices":[1,2,2,3,2,2,3,3]},{"type":{"dead":true},"texture":"billboards.png","texgrid":8,"vertices":[4,3,5,4]},{"type":{"dead":true},"texture":"billboards.png","texgrid":8,"vertices":[5,3,6,4]},{"type":{"dead":true},"texture":"billboards.png","texgrid":8,"vertices":[6,3,7,4]},{"type":{"dead":true},"texture":"billboards.png","texgrid":8,"vertices":[7,3,8,4]},{"type":{"dead":true},"texture":"billboards.png","texgrid":8,"vertices":[8,3,7,4]},{"type":{"dead":true},"texture":"billboards.png","texgrid":8,"vertices":[7,3,6,4]},{"type":{"dead":true},"texture":"billboards.png","texgrid":8,"vertices":[6,3,5,4]},{"type":{"dead":true},"texture":"billboards.png","texgrid":8,"vertices":[5,3,4,4]}]}')},function(e){e.exports=JSON.parse('{"unitType":{"subunits":[{"element":{"size":[0.7,1.8,0.3],"shape":"ASH-ARQ","movement":{"speed":{"normal":5,"fast":9}}},"individuals":80,"weapons":[{"melee":{"reach":0,"time":{"ready":1,"strike":3}}},{"missiles":[{"range":[20,110],"initialSpeed":750,"hitRadius":0.35,"time":{"aim":3,"release":0.5,"reload":3},"projectileShape":"bullet"}]}]}],"formations":[{"name":"Line","type":"LINE","spacing":[1.1,0.9],"ranks":5}],"training":0.5},"shape":{"size":[1,2,1],"skin":"ash","line":null},"marker":{"texture":"markers.png","texgrid":16,"layers":[{"vertices":[[0,0],[3,3]],"state":{"hostile":true,"command":true,"dragged":false}},{"vertices":[[3,0],[6,3]],"state":{"allied":true,"command":true,"dragged":false}},{"vertices":[[6,0],[9,3]],"state":{"friendly":true,"command":true,"dragged":false}},{"vertices":[[9,0],[12,3]],"state":{"routed":true,"command":true,"dragged":false}},{"vertices":[[0,3],[3,6]],"state":{"hostile":true,"command":false,"dragged":false}},{"vertices":[[3,3],[6,6]],"state":{"allied":true,"command":false,"dragged":false}},{"vertices":[[6,3],[9,6]],"state":{"friendly":true,"command":false,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"routed":true,"command":false,"dragged":false}},{"vertices":[[0,6],[3,9]],"state":{"hostile":true,"dragged":true}},{"vertices":[[3,6],[6,9]],"state":{"allied":true,"dragged":true}},{"vertices":[[6,6],[9,9]],"state":{"friendly":true,"dragged":true}},{"vertices":[[6,9],[9,12]],"state":{"dragged":false}},{"vertices":[[12,12],[15,15]],"state":{"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"hovered":true,"dragged":false}}]}}')},function(e){e.exports=JSON.parse('{"unitType":{"subunits":[{"element":{"size":[0.7,1.8,0.3],"shape":"ASH-BOW","movement":{"speed":{"normal":4,"fast":10}}},"individuals":80,"weapons":[{"melee":{"reach":0,"time":{"ready":1,"strike":3}}},{"missiles":[{"range":[20,150],"initialSpeed":75,"hitRadius":0.45,"time":{"aim":2,"release":0.2,"reload":2},"projectileShape":"arrow"}]}]}],"formations":[{"name":"Line","type":"LINE","spacing":[1.1,0.9],"ranks":5}],"training":0.5},"shape":{"size":[1,2,1],"skin":"ash","line":null},"marker":{"texture":"markers.png","texgrid":16,"layers":[{"vertices":[[0,0],[3,3]],"state":{"hostile":true,"command":true,"dragged":false}},{"vertices":[[3,0],[6,3]],"state":{"allied":true,"command":true,"dragged":false}},{"vertices":[[6,0],[9,3]],"state":{"friendly":true,"command":true,"dragged":false}},{"vertices":[[9,0],[12,3]],"state":{"routed":true,"command":true,"dragged":false}},{"vertices":[[0,3],[3,6]],"state":{"hostile":true,"command":false,"dragged":false}},{"vertices":[[3,3],[6,6]],"state":{"allied":true,"command":false,"dragged":false}},{"vertices":[[6,3],[9,6]],"state":{"friendly":true,"command":false,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"routed":true,"command":false,"dragged":false}},{"vertices":[[0,6],[3,9]],"state":{"hostile":true,"dragged":true}},{"vertices":[[3,6],[6,9]],"state":{"allied":true,"dragged":true}},{"vertices":[[6,6],[9,9]],"state":{"friendly":true,"dragged":true}},{"vertices":[[6,9],[9,12]],"state":{"dragged":false}},{"vertices":[[12,9],[15,12]],"state":{"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"hovered":true,"dragged":false}}]}}')},function(e){e.exports=JSON.parse('{"unitType":{"subunits":[{"element":{"size":[0.7,1.8,0.3],"shape":"ASH-CAN","movement":{"speed":{"normal":1,"fast":1.8}}},"individuals":80,"weapons":[{"melee":{"reach":0,"time":{"ready":1,"strike":3}}},{"missiles":[{"range":[50,500],"initialSpeed":250,"hitRadius":4,"time":{"aim":5,"release":1.5,"reload":5},"projectileShape":"cannonball"}]}]}],"formations":[{"name":"Line","type":"LINE","spacing":[1.1,0.9],"ranks":5}],"training":0.5},"shape":{"size":[1,2,1],"skin":"ash","line":null},"marker":{"texture":"markers.png","texgrid":16,"layers":[{"vertices":[[0,0],[3,3]],"state":{"hostile":true,"command":true,"dragged":false}},{"vertices":[[3,0],[6,3]],"state":{"allied":true,"command":true,"dragged":false}},{"vertices":[[6,0],[9,3]],"state":{"friendly":true,"command":true,"dragged":false}},{"vertices":[[9,0],[12,3]],"state":{"routed":true,"command":true,"dragged":false}},{"vertices":[[0,3],[3,6]],"state":{"hostile":true,"command":false,"dragged":false}},{"vertices":[[3,3],[6,6]],"state":{"allied":true,"command":false,"dragged":false}},{"vertices":[[6,3],[9,6]],"state":{"friendly":true,"command":false,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"routed":true,"command":false,"dragged":false}},{"vertices":[[0,6],[3,9]],"state":{"hostile":true,"dragged":true}},{"vertices":[[3,6],[6,9]],"state":{"allied":true,"dragged":true}},{"vertices":[[6,6],[9,9]],"state":{"friendly":true,"dragged":true}},{"vertices":[[6,9],[9,12]],"state":{"dragged":false}},{"vertices":[[12,12],[15,15]],"state":{"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"hovered":true,"dragged":false}}]}}')},function(e){e.exports=JSON.parse('{"unitType":{"subunits":[{"element":{"size":[0.7,1.8,0.3],"shape":"ASH-KATA","movement":{"speed":{"normal":5,"fast":9}}},"individuals":80,"weapons":[{"melee":{"reach":1,"time":{"ready":1,"strike":1.8}}}]}],"formations":[{"name":"Line","type":"LINE","spacing":[1.1,0.9],"ranks":5}],"training":0.5},"shape":{"size":[1,2,1],"skin":"ash","line":"kata"},"marker":{"texture":"markers.png","texgrid":16,"layers":[{"vertices":[[0,0],[3,3]],"state":{"hostile":true,"command":true,"dragged":false}},{"vertices":[[3,0],[6,3]],"state":{"allied":true,"command":true,"dragged":false}},{"vertices":[[6,0],[9,3]],"state":{"friendly":true,"command":true,"dragged":false}},{"vertices":[[9,0],[12,3]],"state":{"routed":true,"command":true,"dragged":false}},{"vertices":[[0,3],[3,6]],"state":{"hostile":true,"command":false,"dragged":false}},{"vertices":[[3,3],[6,6]],"state":{"allied":true,"command":false,"dragged":false}},{"vertices":[[6,3],[9,6]],"state":{"friendly":true,"command":false,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"routed":true,"command":false,"dragged":false}},{"vertices":[[0,6],[3,9]],"state":{"hostile":true,"dragged":true}},{"vertices":[[3,6],[6,9]],"state":{"allied":true,"dragged":true}},{"vertices":[[6,6],[9,9]],"state":{"friendly":true,"dragged":true}},{"vertices":[[6,9],[9,12]],"state":{"dragged":false}},{"vertices":[[12,12],[15,15]],"state":{"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"hovered":true,"dragged":false}}]}}')},function(e){e.exports=JSON.parse('{"unitType":{"subunits":[{"element":{"size":[0.7,1.8,0.3],"shape":"ASH-NAGI","movement":{"speed":{"normal":5,"fast":9}}},"individuals":80,"weapons":[{"melee":{"reach":2.4,"time":{"ready":1,"strike":1.9}}}]}],"formations":[{"name":"Line","type":"LINE","spacing":[1.1,0.9],"ranks":5}],"training":0.5},"shape":{"size":[1,2,1],"skin":"ash","line":"nagi"},"marker":{"texture":"markers.png","texgrid":16,"layers":[{"vertices":[[0,0],[3,3]],"state":{"hostile":true,"command":true,"dragged":false}},{"vertices":[[3,0],[6,3]],"state":{"allied":true,"command":true,"dragged":false}},{"vertices":[[6,0],[9,3]],"state":{"friendly":true,"command":true,"dragged":false}},{"vertices":[[9,0],[12,3]],"state":{"routed":true,"command":true,"dragged":false}},{"vertices":[[0,3],[3,6]],"state":{"hostile":true,"command":false,"dragged":false}},{"vertices":[[3,3],[6,6]],"state":{"allied":true,"command":false,"dragged":false}},{"vertices":[[6,3],[9,6]],"state":{"friendly":true,"command":false,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"routed":true,"command":false,"dragged":false}},{"vertices":[[0,6],[3,9]],"state":{"hostile":true,"dragged":true}},{"vertices":[[3,6],[6,9]],"state":{"allied":true,"dragged":true}},{"vertices":[[6,6],[9,9]],"state":{"friendly":true,"dragged":true}},{"vertices":[[6,9],[9,12]],"state":{"dragged":false}},{"vertices":[[12,12],[15,15]],"state":{"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"hovered":true,"dragged":false}}]}}')},function(e){e.exports=JSON.parse('{"unitType":{"subunits":[{"element":{"size":[0.7,1.8,0.3],"shape":"ASH-YARI","movement":{"speed":{"normal":5,"fast":9}}},"individuals":80,"weapons":[{"melee":{"reach":5,"time":{"ready":1,"strike":2}}}]}],"formations":[{"name":"Line","type":"LINE","spacing":[1.1,0.9],"ranks":5}],"training":0.5},"shape":{"size":[1,2,1],"skin":"ash","line":"yari"},"marker":{"texture":"markers.png","texgrid":16,"layers":[{"vertices":[[0,0],[3,3]],"state":{"hostile":true,"command":true,"dragged":false}},{"vertices":[[3,0],[6,3]],"state":{"allied":true,"command":true,"dragged":false}},{"vertices":[[6,0],[9,3]],"state":{"friendly":true,"command":true,"dragged":false}},{"vertices":[[9,0],[12,3]],"state":{"routed":true,"command":true,"dragged":false}},{"vertices":[[0,3],[3,6]],"state":{"hostile":true,"command":false,"dragged":false}},{"vertices":[[3,3],[6,6]],"state":{"allied":true,"command":false,"dragged":false}},{"vertices":[[6,3],[9,6]],"state":{"friendly":true,"command":false,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"routed":true,"command":false,"dragged":false}},{"vertices":[[0,6],[3,9]],"state":{"hostile":true,"dragged":true}},{"vertices":[[3,6],[6,9]],"state":{"allied":true,"dragged":true}},{"vertices":[[6,6],[9,9]],"state":{"friendly":true,"dragged":true}},{"vertices":[[6,9],[9,12]],"state":{"dragged":false}},{"vertices":[[12,12],[15,15]],"state":{"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"hovered":true,"dragged":false}}]}}')},function(e){e.exports=JSON.parse('{"unitType":{"subunits":[{"element":{"size":[1.1,2.5,2.3],"shape":"CAV-BOW","movement":{"speed":{"normal":7,"fast":16}}},"individuals":80,"weapons":[{"melee":{"reach":0,"time":{"ready":1,"strike":3}}},{"missiles":[{"range":[20,110],"initialSpeed":750,"hitRadius":0.35,"time":{"aim":3,"release":0.5,"reload":3},"projectileShape":"bullet"}]}]}],"formations":[{"name":"Line","type":"LINE","spacing":[1.1,1.7],"ranks":5}],"training":0.8},"shape":{"size":[1,3,3],"skin":"cav","line":null},"marker":{"texture":"markers.png","texgrid":16,"layers":[{"vertices":[[0,0],[3,3]],"state":{"hostile":true,"command":true,"dragged":false}},{"vertices":[[3,0],[6,3]],"state":{"allied":true,"command":true,"dragged":false}},{"vertices":[[6,0],[9,3]],"state":{"friendly":true,"command":true,"dragged":false}},{"vertices":[[9,0],[12,3]],"state":{"routed":true,"command":true,"dragged":false}},{"vertices":[[0,3],[3,6]],"state":{"hostile":true,"command":false,"dragged":false}},{"vertices":[[3,3],[6,6]],"state":{"allied":true,"command":false,"dragged":false}},{"vertices":[[6,3],[9,6]],"state":{"friendly":true,"command":false,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"routed":true,"command":false,"dragged":false}},{"vertices":[[0,6],[3,9]],"state":{"hostile":true,"dragged":true}},{"vertices":[[3,6],[6,9]],"state":{"allied":true,"dragged":true}},{"vertices":[[6,6],[9,9]],"state":{"friendly":true,"dragged":true}},{"vertices":[[6,9],[9,12]],"state":{"dragged":false}},{"vertices":[[12,12],[15,15]],"state":{"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"hovered":true,"dragged":false}}]}}')},function(e){e.exports=JSON.parse('{"unitType":{"subunits":[{"element":{"size":[1.1,2.5,2.3],"shape":"CAV-CAN","movement":{"speed":{"normal":1.4,"fast":2.8}}},"individuals":80,"weapons":[{"melee":{"reach":0,"time":{"ready":1,"strike":3}}},{"missiles":[{"range":[20,110],"initialSpeed":750,"hitRadius":0.35,"time":{"aim":3,"release":0.5,"reload":3},"projectileShape":"bullet"}]}]}],"formations":[{"name":"Line","type":"LINE","spacing":[1.1,1.7],"ranks":5}],"training":0.8},"shape":{"size":[1,3,3],"skin":"cav","line":null},"marker":{"texture":"markers.png","texgrid":16,"layers":[{"vertices":[[0,0],[3,3]],"state":{"hostile":true,"command":true,"dragged":false}},{"vertices":[[3,0],[6,3]],"state":{"allied":true,"command":true,"dragged":false}},{"vertices":[[6,0],[9,3]],"state":{"friendly":true,"command":true,"dragged":false}},{"vertices":[[9,0],[12,3]],"state":{"routed":true,"command":true,"dragged":false}},{"vertices":[[0,3],[3,6]],"state":{"hostile":true,"command":false,"dragged":false}},{"vertices":[[3,3],[6,6]],"state":{"allied":true,"command":false,"dragged":false}},{"vertices":[[6,3],[9,6]],"state":{"friendly":true,"command":false,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"routed":true,"command":false,"dragged":false}},{"vertices":[[0,6],[3,9]],"state":{"hostile":true,"dragged":true}},{"vertices":[[3,6],[6,9]],"state":{"allied":true,"dragged":true}},{"vertices":[[6,6],[9,9]],"state":{"friendly":true,"dragged":true}},{"vertices":[[6,9],[9,12]],"state":{"dragged":false}},{"vertices":[[12,12],[15,15]],"state":{"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"hovered":true,"dragged":false}}]}}')},function(e){e.exports=JSON.parse('{"unitType":{"subunits":[{"element":{"size":[1.1,2.5,2.3],"shape":"CAV-KATA","movement":{"speed":{"normal":7,"fast":14}}},"individuals":80,"weapons":[{"melee":{"reach":1,"time":{"ready":1,"strike":1.8}}}]}],"formations":[{"name":"Line","type":"LINE","spacing":[1.1,1.7],"ranks":5}],"training":0.8},"shape":{"size":[1,3,3],"skin":"cav","line":"kata"},"marker":{"texture":"markers.png","texgrid":16,"layers":[{"vertices":[[0,0],[3,3]],"state":{"hostile":true,"command":true,"dragged":false}},{"vertices":[[3,0],[6,3]],"state":{"allied":true,"command":true,"dragged":false}},{"vertices":[[6,0],[9,3]],"state":{"friendly":true,"command":true,"dragged":false}},{"vertices":[[9,0],[12,3]],"state":{"routed":true,"command":true,"dragged":false}},{"vertices":[[0,3],[3,6]],"state":{"hostile":true,"command":false,"dragged":false}},{"vertices":[[3,3],[6,6]],"state":{"allied":true,"command":false,"dragged":false}},{"vertices":[[6,3],[9,6]],"state":{"friendly":true,"command":false,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"routed":true,"command":false,"dragged":false}},{"vertices":[[0,6],[3,9]],"state":{"hostile":true,"dragged":true}},{"vertices":[[3,6],[6,9]],"state":{"allied":true,"dragged":true}},{"vertices":[[6,6],[9,9]],"state":{"friendly":true,"dragged":true}},{"vertices":[[6,9],[9,12]],"state":{"dragged":false}},{"vertices":[[12,12],[15,15]],"state":{"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"hovered":true,"dragged":false}}]}}')},function(e){e.exports=JSON.parse('{"unitType":{"subunits":[{"element":{"size":[1.1,2.5,2.3],"shape":"CAV-NAGI","movement":{"speed":{"normal":7,"fast":14}}},"individuals":80,"weapons":[{"melee":{"reach":1,"time":{"ready":1,"strike":1.8}}}]}],"formations":[{"name":"Line","type":"LINE","spacing":[1.1,1.7],"ranks":5}],"training":0.8},"shape":{"size":[1,3,3],"skin":"cav","line":"nagi"},"marker":{"texture":"markers.png","texgrid":16,"layers":[{"vertices":[[0,0],[3,3]],"state":{"hostile":true,"command":true,"dragged":false}},{"vertices":[[3,0],[6,3]],"state":{"allied":true,"command":true,"dragged":false}},{"vertices":[[6,0],[9,3]],"state":{"friendly":true,"command":true,"dragged":false}},{"vertices":[[9,0],[12,3]],"state":{"routed":true,"command":true,"dragged":false}},{"vertices":[[0,3],[3,6]],"state":{"hostile":true,"command":false,"dragged":false}},{"vertices":[[3,3],[6,6]],"state":{"allied":true,"command":false,"dragged":false}},{"vertices":[[6,3],[9,6]],"state":{"friendly":true,"command":false,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"routed":true,"command":false,"dragged":false}},{"vertices":[[0,6],[3,9]],"state":{"hostile":true,"dragged":true}},{"vertices":[[3,6],[6,9]],"state":{"allied":true,"dragged":true}},{"vertices":[[6,6],[9,9]],"state":{"friendly":true,"dragged":true}},{"vertices":[[6,9],[9,12]],"state":{"dragged":false}},{"vertices":[[12,12],[15,15]],"state":{"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"hovered":true,"dragged":false}}]}}')},function(e){e.exports=JSON.parse('{"unitType":{"subunits":[{"element":{"size":[1.1,2.5,2.3],"shape":"CAV-YARI","movement":{"speed":{"normal":7,"fast":14}}},"individuals":80,"weapons":[{"melee":{"reach":1,"time":{"ready":1,"strike":1.8}}}]}],"formations":[{"name":"Line","type":"LINE","spacing":[1.1,1.7],"ranks":5}],"training":0.8},"shape":{"size":[1,3,3],"skin":"cav","line":"yari"},"marker":{"texture":"markers.png","texgrid":16,"layers":[{"vertices":[[0,0],[3,3]],"state":{"hostile":true,"command":true,"dragged":false}},{"vertices":[[3,0],[6,3]],"state":{"allied":true,"command":true,"dragged":false}},{"vertices":[[6,0],[9,3]],"state":{"friendly":true,"command":true,"dragged":false}},{"vertices":[[9,0],[12,3]],"state":{"routed":true,"command":true,"dragged":false}},{"vertices":[[0,3],[3,6]],"state":{"hostile":true,"command":false,"dragged":false}},{"vertices":[[3,3],[6,6]],"state":{"allied":true,"command":false,"dragged":false}},{"vertices":[[6,3],[9,6]],"state":{"friendly":true,"command":false,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"routed":true,"command":false,"dragged":false}},{"vertices":[[0,6],[3,9]],"state":{"hostile":true,"dragged":true}},{"vertices":[[3,6],[6,9]],"state":{"allied":true,"dragged":true}},{"vertices":[[6,6],[9,9]],"state":{"friendly":true,"dragged":true}},{"vertices":[[6,9],[9,12]],"state":{"dragged":false}},{"vertices":[[12,12],[15,15]],"state":{"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"hovered":true,"dragged":false}}]}}')},function(e){e.exports=JSON.parse('{"unitType":{"subunits":[{"element":{"size":[0.7,1.8,0.3],"shape":"SAM-BOW","movement":{"speed":{"normal":4,"fast":10}}},"individuals":80,"weapons":[{"melee":{"reach":0,"time":{"ready":1,"strike":3}}},{"missiles":[{"range":[20,110],"initialSpeed":750,"hitRadius":0.35,"time":{"aim":3,"release":0.5,"reload":3},"projectileShape":"bullet"}]}]}],"formations":[{"name":"Line","type":"LINE","spacing":[1.1,0.9],"ranks":5}],"training":0.8},"shape":{"size":[1,2,1],"skin":"sam","line":null},"marker":{"texture":"markers.png","texgrid":16,"layers":[{"vertices":[[0,0],[3,3]],"state":{"hostile":true,"command":true,"dragged":false}},{"vertices":[[3,0],[6,3]],"state":{"allied":true,"command":true,"dragged":false}},{"vertices":[[6,0],[9,3]],"state":{"friendly":true,"command":true,"dragged":false}},{"vertices":[[9,0],[12,3]],"state":{"routed":true,"command":true,"dragged":false}},{"vertices":[[0,3],[3,6]],"state":{"hostile":true,"command":false,"dragged":false}},{"vertices":[[3,3],[6,6]],"state":{"allied":true,"command":false,"dragged":false}},{"vertices":[[6,3],[9,6]],"state":{"friendly":true,"command":false,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"routed":true,"command":false,"dragged":false}},{"vertices":[[0,6],[3,9]],"state":{"hostile":true,"dragged":true}},{"vertices":[[3,6],[6,9]],"state":{"allied":true,"dragged":true}},{"vertices":[[6,6],[9,9]],"state":{"friendly":true,"dragged":true}},{"vertices":[[6,9],[9,12]],"state":{"dragged":false}},{"vertices":[[12,12],[15,15]],"state":{"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"hovered":true,"dragged":false}}]}}')},function(e){e.exports=JSON.parse('{"unitType":{"subunits":[{"element":{"size":[0.7,1.8,0.3],"shape":"SAM-ARQ","movement":{"speed":{"normal":5,"fast":9}}},"individuals":80,"weapons":[{"melee":{"reach":0,"time":{"ready":1,"strike":3}}},{"missiles":[{"range":[20,110],"initialSpeed":750,"hitRadius":0.35,"time":{"aim":3,"release":0.5,"reload":3},"projectileShape":"bullet"}]}]}],"formations":[{"name":"Line","type":"LINE","spacing":[1.1,0.9],"ranks":5}],"training":0.8},"shape":{"size":[1,2,1],"skin":"sam","line":null},"marker":{"texture":"markers.png","texgrid":16,"layers":[{"vertices":[[0,0],[3,3]],"state":{"hostile":true,"command":true,"dragged":false}},{"vertices":[[3,0],[6,3]],"state":{"allied":true,"command":true,"dragged":false}},{"vertices":[[6,0],[9,3]],"state":{"friendly":true,"command":true,"dragged":false}},{"vertices":[[9,0],[12,3]],"state":{"routed":true,"command":true,"dragged":false}},{"vertices":[[0,3],[3,6]],"state":{"hostile":true,"command":false,"dragged":false}},{"vertices":[[3,3],[6,6]],"state":{"allied":true,"command":false,"dragged":false}},{"vertices":[[6,3],[9,6]],"state":{"friendly":true,"command":false,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"routed":true,"command":false,"dragged":false}},{"vertices":[[0,6],[3,9]],"state":{"hostile":true,"dragged":true}},{"vertices":[[3,6],[6,9]],"state":{"allied":true,"dragged":true}},{"vertices":[[6,6],[9,9]],"state":{"friendly":true,"dragged":true}},{"vertices":[[6,9],[9,12]],"state":{"dragged":false}},{"vertices":[[12,12],[15,15]],"state":{"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"hovered":true,"dragged":false}}]}}')},function(e){e.exports=JSON.parse('{"unitType":{"subunits":[{"element":{"size":[0.7,1.8,0.3],"shape":"SAM-KATA","movement":{"speed":{"normal":5,"fast":9}}},"individuals":80,"weapons":[{"melee":{"reach":1,"time":{"ready":1,"strike":1.8}}}]}],"formations":[{"name":"Line","type":"LINE","spacing":[1.1,0.9],"ranks":5}],"training":0.8},"shape":{"size":[1,2,1],"skin":"sam","line":"kata"},"marker":{"texture":"markers.png","texgrid":16,"layers":[{"vertices":[[0,0],[3,3]],"state":{"hostile":true,"command":true,"dragged":false}},{"vertices":[[3,0],[6,3]],"state":{"allied":true,"command":true,"dragged":false}},{"vertices":[[6,0],[9,3]],"state":{"friendly":true,"command":true,"dragged":false}},{"vertices":[[9,0],[12,3]],"state":{"routed":true,"command":true,"dragged":false}},{"vertices":[[0,3],[3,6]],"state":{"hostile":true,"command":false,"dragged":false}},{"vertices":[[3,3],[6,6]],"state":{"allied":true,"command":false,"dragged":false}},{"vertices":[[6,3],[9,6]],"state":{"friendly":true,"command":false,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"routed":true,"command":false,"dragged":false}},{"vertices":[[0,6],[3,9]],"state":{"hostile":true,"dragged":true}},{"vertices":[[3,6],[6,9]],"state":{"allied":true,"dragged":true}},{"vertices":[[6,6],[9,9]],"state":{"friendly":true,"dragged":true}},{"vertices":[[6,9],[9,12]],"state":{"dragged":false}},{"vertices":[[12,12],[15,15]],"state":{"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"hovered":true,"dragged":false}}]}}')},function(e){e.exports=JSON.parse('{"unitType":{"subunits":[{"element":{"size":[0.7,1.8,0.3],"shape":"SAM-NAGI","movement":{"speed":{"normal":5,"fast":9}}},"individuals":80,"weapons":[{"melee":{"reach":1,"time":{"ready":1,"strike":1.8}}}]}],"formations":[{"name":"Line","type":"LINE","spacing":[1.1,0.9],"ranks":5}],"training":0.8},"shape":{"size":[1,2,1],"skin":"sam","line":"nagi"},"marker":{"texture":"markers.png","texgrid":16,"layers":[{"vertices":[[0,0],[3,3]],"state":{"hostile":true,"command":true,"dragged":false}},{"vertices":[[3,0],[6,3]],"state":{"allied":true,"command":true,"dragged":false}},{"vertices":[[6,0],[9,3]],"state":{"friendly":true,"command":true,"dragged":false}},{"vertices":[[9,0],[12,3]],"state":{"routed":true,"command":true,"dragged":false}},{"vertices":[[0,3],[3,6]],"state":{"hostile":true,"command":false,"dragged":false}},{"vertices":[[3,3],[6,6]],"state":{"allied":true,"command":false,"dragged":false}},{"vertices":[[6,3],[9,6]],"state":{"friendly":true,"command":false,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"routed":true,"command":false,"dragged":false}},{"vertices":[[0,6],[3,9]],"state":{"hostile":true,"dragged":true}},{"vertices":[[3,6],[6,9]],"state":{"allied":true,"dragged":true}},{"vertices":[[6,6],[9,9]],"state":{"friendly":true,"dragged":true}},{"vertices":[[6,9],[9,12]],"state":{"dragged":false}},{"vertices":[[12,12],[15,15]],"state":{"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"hovered":true,"dragged":false}}]}}')},function(e){e.exports=JSON.parse('{"unitType":{"subunits":[{"element":{"size":[0.7,1.8,0.3],"shape":"SAM-YARI","movement":{"speed":{"normal":5,"fast":9}}},"individuals":80,"weapons":[{"melee":{"reach":1,"time":{"ready":1,"strike":1.8}}}]}],"formations":[{"name":"Line","type":"LINE","spacing":[1.1,0.9],"ranks":5}],"training":0.8},"shape":{"size":[1,2,1],"skin":"sam","line":"yari"},"marker":{"texture":"markers.png","texgrid":16,"layers":[{"vertices":[[0,0],[3,3]],"state":{"hostile":true,"command":true,"dragged":false}},{"vertices":[[3,0],[6,3]],"state":{"allied":true,"command":true,"dragged":false}},{"vertices":[[6,0],[9,3]],"state":{"friendly":true,"command":true,"dragged":false}},{"vertices":[[9,0],[12,3]],"state":{"routed":true,"command":true,"dragged":false}},{"vertices":[[0,3],[3,6]],"state":{"hostile":true,"command":false,"dragged":false}},{"vertices":[[3,3],[6,6]],"state":{"allied":true,"command":false,"dragged":false}},{"vertices":[[6,3],[9,6]],"state":{"friendly":true,"command":false,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"routed":true,"command":false,"dragged":false}},{"vertices":[[0,6],[3,9]],"state":{"hostile":true,"dragged":true}},{"vertices":[[3,6],[6,9]],"state":{"allied":true,"dragged":true}},{"vertices":[[6,6],[9,9]],"state":{"friendly":true,"dragged":true}},{"vertices":[[6,9],[9,12]],"state":{"dragged":false}},{"vertices":[[12,12],[15,15]],"state":{"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"selected":true,"dragged":false}},{"vertices":[[9,3],[12,6]],"state":{"hovered":true,"dragged":false}}]}}')},function(e,t,r){"use strict";r.r(t),r.d(t,"Observable",(function(){return _})),r.d(t,"ConnectableObservable",(function(){return R})),r.d(t,"GroupedObservable",(function(){return M})),r.d(t,"observable",(function(){return b})),r.d(t,"Subject",(function(){return T})),r.d(t,"BehaviorSubject",(function(){return L})),r.d(t,"ReplaySubject",(function(){return re})),r.d(t,"AsyncSubject",(function(){return ie})),r.d(t,"asap",(function(){return he})),r.d(t,"asapScheduler",(function(){return fe})),r.d(t,"async",(function(){return ye})),r.d(t,"asyncScheduler",(function(){return pe})),r.d(t,"queue",(function(){return q})),r.d(t,"queueScheduler",(function(){return Y})),r.d(t,"animationFrame",(function(){return me})),r.d(t,"animationFrameScheduler",(function(){return ge})),r.d(t,"VirtualTimeScheduler",(function(){return be})),r.d(t,"VirtualAction",(function(){return we})),r.d(t,"Scheduler",(function(){return F})),r.d(t,"Subscription",(function(){return h})),r.d(t,"Subscriber",(function(){return v})),r.d(t,"Notification",(function(){return Z})),r.d(t,"NotificationKind",(function(){return W})),r.d(t,"pipe",(function(){return x})),r.d(t,"noop",(function(){return xe})),r.d(t,"identity",(function(){return w})),r.d(t,"isObservable",(function(){return Se})),r.d(t,"ArgumentOutOfRangeError",(function(){return _e})),r.d(t,"EmptyError",(function(){return Ee})),r.d(t,"ObjectUnsubscribedError",(function(){return I})),r.d(t,"UnsubscriptionError",(function(){return f})),r.d(t,"TimeoutError",(function(){return Ie})),r.d(t,"bindCallback",(function(){return Pe})),r.d(t,"bindNodeCallback",(function(){return Re})),r.d(t,"combineLatest",(function(){return He})),r.d(t,"concat",(function(){return it})),r.d(t,"defer",(function(){return st})),r.d(t,"empty",(function(){return $})),r.d(t,"forkJoin",(function(){return ot})),r.d(t,"from",(function(){return Xe})),r.d(t,"fromEvent",(function(){return ut})),r.d(t,"fromEventPattern",(function(){return ct})),r.d(t,"generate",(function(){return lt})),r.d(t,"iif",(function(){return ft})),r.d(t,"interval",(function(){return pt})),r.d(t,"merge",(function(){return vt})),r.d(t,"never",(function(){return mt})),r.d(t,"of",(function(){return G})),r.d(t,"onErrorResumeNext",(function(){return bt})),r.d(t,"pairs",(function(){return wt})),r.d(t,"partition",(function(){return Ot})),r.d(t,"race",(function(){return kt})),r.d(t,"range",(function(){return jt})),r.d(t,"throwError",(function(){return K})),r.d(t,"timer",(function(){return Rt})),r.d(t,"using",(function(){return Mt})),r.d(t,"zip",(function(){return Bt})),r.d(t,"scheduled",(function(){return Je})),r.d(t,"EMPTY",(function(){return z})),r.d(t,"NEVER",(function(){return gt})),r.d(t,"config",(function(){return a}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)};function i(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}function s(e){return"function"==typeof e}var o=!1,a={Promise:void 0,set useDeprecatedSynchronousErrorHandling(e){e&&(new Error).stack;o=e},get useDeprecatedSynchronousErrorHandling(){return o}};function u(e){setTimeout((function(){throw e}),0)}var c={closed:!0,next:function(e){},error:function(e){if(a.useDeprecatedSynchronousErrorHandling)throw e;u(e)},complete:function(){}},l=function(){return Array.isArray||function(e){return e&&"number"==typeof e.length}}();function d(e){return null!==e&&"object"==typeof e}var f=function(){function e(e){return Error.call(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e,this}return e.prototype=Object.create(Error.prototype),e}(),h=function(){function e(e){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,e&&(this._ctorUnsubscribe=!0,this._unsubscribe=e)}return e.prototype.unsubscribe=function(){var t;if(!this.closed){var r=this._parentOrParents,n=this._ctorUnsubscribe,i=this._unsubscribe,o=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,r instanceof e)r.remove(this);else if(null!==r)for(var a=0;a<r.length;++a){r[a].remove(this)}if(s(i)){n&&(this._unsubscribe=void 0);try{i.call(this)}catch(e){t=e instanceof f?p(e.errors):[e]}}if(l(o)){a=-1;for(var u=o.length;++a<u;){var c=o[a];if(d(c))try{c.unsubscribe()}catch(e){t=t||[],e instanceof f?t=t.concat(p(e.errors)):t.push(e)}}}if(t)throw new f(t)}},e.prototype.add=function(t){var r=t;if(!t)return e.EMPTY;switch(typeof t){case"function":r=new e(t);case"object":if(r===this||r.closed||"function"!=typeof r.unsubscribe)return r;if(this.closed)return r.unsubscribe(),r;if(!(r instanceof e)){var n=r;(r=new e)._subscriptions=[n]}break;default:throw new Error("unrecognized teardown "+t+" added to Subscription.")}var i=r._parentOrParents;if(null===i)r._parentOrParents=this;else if(i instanceof e){if(i===this)return r;r._parentOrParents=[i,this]}else{if(-1!==i.indexOf(this))return r;i.push(this)}var s=this._subscriptions;return null===s?this._subscriptions=[r]:s.push(r),r},e.prototype.remove=function(e){var t=this._subscriptions;if(t){var r=t.indexOf(e);-1!==r&&t.splice(r,1)}},e.EMPTY=function(e){return e.closed=!0,e}(new e),e}();function p(e){return e.reduce((function(e,t){return e.concat(t instanceof f?t.errors:t)}),[])}var y=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}(),v=function(e){function t(r,n,i){var s=e.call(this)||this;switch(s.syncErrorValue=null,s.syncErrorThrown=!1,s.syncErrorThrowable=!1,s.isStopped=!1,arguments.length){case 0:s.destination=c;break;case 1:if(!r){s.destination=c;break}if("object"==typeof r){r instanceof t?(s.syncErrorThrowable=r.syncErrorThrowable,s.destination=r,r.add(s)):(s.syncErrorThrowable=!0,s.destination=new g(s,r));break}default:s.syncErrorThrowable=!0,s.destination=new g(s,r,n,i)}return s}return i(t,e),t.prototype[y]=function(){return this},t.create=function(e,r,n){var i=new t(e,r,n);return i.syncErrorThrowable=!1,i},t.prototype.next=function(e){this.isStopped||this._next(e)},t.prototype.error=function(e){this.isStopped||(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this))},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){this.destination.error(e),this.unsubscribe()},t.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},t.prototype._unsubscribeAndRecycle=function(){var e=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=e,this},t}(h),g=function(e){function t(t,r,n,i){var o,a=e.call(this)||this;a._parentSubscriber=t;var u=a;return s(r)?o=r:r&&(o=r.next,n=r.error,i=r.complete,r!==c&&(s((u=Object.create(r)).unsubscribe)&&a.add(u.unsubscribe.bind(u)),u.unsubscribe=a.unsubscribe.bind(a))),a._context=u,a._next=o,a._error=n,a._complete=i,a}return i(t,e),t.prototype.next=function(e){if(!this.isStopped&&this._next){var t=this._parentSubscriber;a.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?this.__tryOrSetError(t,this._next,e)&&this.unsubscribe():this.__tryOrUnsub(this._next,e)}},t.prototype.error=function(e){if(!this.isStopped){var t=this._parentSubscriber,r=a.useDeprecatedSynchronousErrorHandling;if(this._error)r&&t.syncErrorThrowable?(this.__tryOrSetError(t,this._error,e),this.unsubscribe()):(this.__tryOrUnsub(this._error,e),this.unsubscribe());else if(t.syncErrorThrowable)r?(t.syncErrorValue=e,t.syncErrorThrown=!0):u(e),this.unsubscribe();else{if(this.unsubscribe(),r)throw e;u(e)}}},t.prototype.complete=function(){var e=this;if(!this.isStopped){var t=this._parentSubscriber;if(this._complete){var r=function(){return e._complete.call(e._context)};a.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?(this.__tryOrSetError(t,r),this.unsubscribe()):(this.__tryOrUnsub(r),this.unsubscribe())}else this.unsubscribe()}},t.prototype.__tryOrUnsub=function(e,t){try{e.call(this._context,t)}catch(e){if(this.unsubscribe(),a.useDeprecatedSynchronousErrorHandling)throw e;u(e)}},t.prototype.__tryOrSetError=function(e,t,r){if(!a.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{t.call(this._context,r)}catch(t){return a.useDeprecatedSynchronousErrorHandling?(e.syncErrorValue=t,e.syncErrorThrown=!0,!0):(u(t),!0)}return!1},t.prototype._unsubscribe=function(){var e=this._parentSubscriber;this._context=null,this._parentSubscriber=null,e.unsubscribe()},t}(v);function m(e){for(;e;){var t=e,r=t.closed,n=t.destination,i=t.isStopped;if(r||i)return!1;e=n&&n instanceof v?n:null}return!0}var b=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}();function w(e){return e}function x(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return S(e)}function S(e){return 0===e.length?w:1===e.length?e[0]:function(t){return e.reduce((function(e,t){return t(e)}),t)}}var _=function(){function e(e){this._isScalar=!1,e&&(this._subscribe=e)}return e.prototype.lift=function(t){var r=new e;return r.source=this,r.operator=t,r},e.prototype.subscribe=function(e,t,r){var n=this.operator,i=function(e,t,r){if(e){if(e instanceof v)return e;if(e[y])return e[y]()}return e||t||r?new v(e,t,r):new v(c)}(e,t,r);if(n?i.add(n.call(i,this.source)):i.add(this.source||a.useDeprecatedSynchronousErrorHandling&&!i.syncErrorThrowable?this._subscribe(i):this._trySubscribe(i)),a.useDeprecatedSynchronousErrorHandling&&i.syncErrorThrowable&&(i.syncErrorThrowable=!1,i.syncErrorThrown))throw i.syncErrorValue;return i},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){a.useDeprecatedSynchronousErrorHandling&&(e.syncErrorThrown=!0,e.syncErrorValue=t),m(e)?e.error(t):console.warn(t)}},e.prototype.forEach=function(e,t){var r=this;return new(t=E(t))((function(t,n){var i;i=r.subscribe((function(t){try{e(t)}catch(e){n(e),i&&i.unsubscribe()}}),n,t)}))},e.prototype._subscribe=function(e){var t=this.source;return t&&t.subscribe(e)},e.prototype[b]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===e.length?this:S(e)(this)},e.prototype.toPromise=function(e){var t=this;return new(e=E(e))((function(e,r){var n;t.subscribe((function(e){return n=e}),(function(e){return r(e)}),(function(){return e(n)}))}))},e.create=function(t){return new e(t)},e}();function E(e){if(e||(e=a.Promise||Promise),!e)throw new Error("no Promise impl found");return e}var I=function(){function e(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return e.prototype=Object.create(Error.prototype),e}(),O=function(e){function t(t,r){var n=e.call(this)||this;return n.subject=t,n.subscriber=r,n.closed=!1,n}return i(t,e),t.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var e=this.subject,t=e.observers;if(this.subject=null,t&&0!==t.length&&!e.isStopped&&!e.closed){var r=t.indexOf(this.subscriber);-1!==r&&t.splice(r,1)}}},t}(h),k=function(e){function t(t){var r=e.call(this,t)||this;return r.destination=t,r}return i(t,e),t}(v),T=function(e){function t(){var t=e.call(this)||this;return t.observers=[],t.closed=!1,t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return i(t,e),t.prototype[y]=function(){return new k(this)},t.prototype.lift=function(e){var t=new P(this,this);return t.operator=e,t},t.prototype.next=function(e){if(this.closed)throw new I;if(!this.isStopped)for(var t=this.observers,r=t.length,n=t.slice(),i=0;i<r;i++)n[i].next(e)},t.prototype.error=function(e){if(this.closed)throw new I;this.hasError=!0,this.thrownError=e,this.isStopped=!0;for(var t=this.observers,r=t.length,n=t.slice(),i=0;i<r;i++)n[i].error(e);this.observers.length=0},t.prototype.complete=function(){if(this.closed)throw new I;this.isStopped=!0;for(var e=this.observers,t=e.length,r=e.slice(),n=0;n<t;n++)r[n].complete();this.observers.length=0},t.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},t.prototype._trySubscribe=function(t){if(this.closed)throw new I;return e.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(e){if(this.closed)throw new I;return this.hasError?(e.error(this.thrownError),h.EMPTY):this.isStopped?(e.complete(),h.EMPTY):(this.observers.push(e),new O(this,e))},t.prototype.asObservable=function(){var e=new _;return e.source=this,e},t.create=function(e,t){return new P(e,t)},t}(_),P=function(e){function t(t,r){var n=e.call(this)||this;return n.destination=t,n.source=r,n}return i(t,e),t.prototype.next=function(e){var t=this.destination;t&&t.next&&t.next(e)},t.prototype.error=function(e){var t=this.destination;t&&t.error&&this.destination.error(e)},t.prototype.complete=function(){var e=this.destination;e&&e.complete&&this.destination.complete()},t.prototype._subscribe=function(e){return this.source?this.source.subscribe(e):h.EMPTY},t}(T);var j=function(){function e(e){this.connectable=e}return e.prototype.call=function(e,t){var r=this.connectable;r._refCount++;var n=new A(e,r),i=t.subscribe(n);return n.closed||(n.connection=r.connect()),i},e}(),A=function(e){function t(t,r){var n=e.call(this,t)||this;return n.connectable=r,n}return i(t,e),t.prototype._unsubscribe=function(){var e=this.connectable;if(e){this.connectable=null;var t=e._refCount;if(t<=0)this.connection=null;else if(e._refCount=t-1,t>1)this.connection=null;else{var r=this.connection,n=e._connection;this.connection=null,!n||r&&n!==r||n.unsubscribe()}}else this.connection=null},t}(v),R=function(e){function t(t,r){var n=e.call(this)||this;return n.source=t,n.subjectFactory=r,n._refCount=0,n._isComplete=!1,n}return i(t,e),t.prototype._subscribe=function(e){return this.getSubject().subscribe(e)},t.prototype.getSubject=function(){var e=this._subject;return e&&!e.isStopped||(this._subject=this.subjectFactory()),this._subject},t.prototype.connect=function(){var e=this._connection;return e||(this._isComplete=!1,(e=this._connection=new h).add(this.source.subscribe(new C(this.getSubject(),this))),e.closed&&(this._connection=null,e=h.EMPTY)),e},t.prototype.refCount=function(){return(e=this).lift(new j(e));var e},t}(_),C=function(e){function t(t,r){var n=e.call(this,t)||this;return n.connectable=r,n}return i(t,e),t.prototype._error=function(t){this._unsubscribe(),e.prototype._error.call(this,t)},t.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),e.prototype._complete.call(this)},t.prototype._unsubscribe=function(){var e=this.connectable;if(e){this.connectable=null;var t=e._connection;e._refCount=0,e._subject=null,e._connection=null,t&&t.unsubscribe()}},t}(k);var M=function(e){function t(t,r,n){var i=e.call(this)||this;return i.key=t,i.groupSubject=r,i.refCountSubscription=n,i}return i(t,e),t.prototype._subscribe=function(e){var t=new h,r=this.refCountSubscription,n=this.groupSubject;return r&&!r.closed&&t.add(new B(r)),t.add(n.subscribe(e)),t},t}(_),B=function(e){function t(t){var r=e.call(this)||this;return r.parent=t,t.count++,r}return i(t,e),t.prototype.unsubscribe=function(){var t=this.parent;t.closed||this.closed||(e.prototype.unsubscribe.call(this),t.count-=1,0===t.count&&t.attemptedToUnsubscribe&&t.unsubscribe())},t}(h),L=function(e){function t(t){var r=e.call(this)||this;return r._value=t,r}return i(t,e),Object.defineProperty(t.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),t.prototype._subscribe=function(t){var r=e.prototype._subscribe.call(this,t);return r&&!r.closed&&t.next(this._value),r},t.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new I;return this._value},t.prototype.next=function(t){e.prototype.next.call(this,this._value=t)},t}(T),N=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n.pending=!1,n}return i(t,e),t.prototype.schedule=function(e,t){if(void 0===t&&(t=0),this.closed)return this;this.state=e;var r=this.id,n=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(n,r,t)),this.pending=!0,this.delay=t,this.id=this.id||this.requestAsyncId(n,this.id,t),this},t.prototype.requestAsyncId=function(e,t,r){return void 0===r&&(r=0),setInterval(e.flush.bind(e,this),r)},t.prototype.recycleAsyncId=function(e,t,r){if(void 0===r&&(r=0),null!==r&&this.delay===r&&!1===this.pending)return t;clearInterval(t)},t.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var r=this._execute(e,t);if(r)return r;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(e,t){var r=!1,n=void 0;try{this.work(e)}catch(e){r=!0,n=!!e&&e||new Error(e)}if(r)return this.unsubscribe(),n},t.prototype._unsubscribe=function(){var e=this.id,t=this.scheduler,r=t.actions,n=r.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==n&&r.splice(n,1),null!=e&&(this.id=this.recycleAsyncId(t,e,null)),this.delay=null},t}(function(e){function t(t,r){return e.call(this)||this}return i(t,e),t.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},t}(h)),U=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n}return i(t,e),t.prototype.schedule=function(t,r){return void 0===r&&(r=0),r>0?e.prototype.schedule.call(this,t,r):(this.delay=r,this.state=t,this.scheduler.flush(this),this)},t.prototype.execute=function(t,r){return r>0||this.closed?e.prototype.execute.call(this,t,r):this._execute(t,r)},t.prototype.requestAsyncId=function(t,r,n){return void 0===n&&(n=0),null!==n&&n>0||null===n&&this.delay>0?e.prototype.requestAsyncId.call(this,t,r,n):t.flush(this)},t}(N),F=function(){function e(t,r){void 0===r&&(r=e.now),this.SchedulerAction=t,this.now=r}return e.prototype.schedule=function(e,t,r){return void 0===t&&(t=0),new this.SchedulerAction(this,e).schedule(r,t)},e.now=function(){return Date.now()},e}(),D=function(e){function t(r,n){void 0===n&&(n=F.now);var i=e.call(this,r,(function(){return t.delegate&&t.delegate!==i?t.delegate.now():n()}))||this;return i.actions=[],i.active=!1,i.scheduled=void 0,i}return i(t,e),t.prototype.schedule=function(r,n,i){return void 0===n&&(n=0),t.delegate&&t.delegate!==this?t.delegate.schedule(r,n,i):e.prototype.schedule.call(this,r,n,i)},t.prototype.flush=function(e){var t=this.actions;if(this.active)t.push(e);else{var r;this.active=!0;do{if(r=e.execute(e.state,e.delay))break}while(e=t.shift());if(this.active=!1,r){for(;e=t.shift();)e.unsubscribe();throw r}}},t}(F),Y=new(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t}(D))(U),q=Y,z=new _((function(e){return e.complete()}));function $(e){return e?function(e){return new _((function(t){return e.schedule((function(){return t.complete()}))}))}(e):z}function H(e){return e&&"function"==typeof e.schedule}var W,V=function(e){return function(t){for(var r=0,n=e.length;r<n&&!t.closed;r++)t.next(e[r]);t.complete()}};function J(e,t){return new _((function(r){var n=new h,i=0;return n.add(t.schedule((function(){i!==e.length?(r.next(e[i++]),r.closed||n.add(this.schedule())):r.complete()}))),n}))}function X(e,t){return t?J(e,t):new _(V(e))}function G(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[e.length-1];return H(r)?(e.pop(),J(e,r)):X(e)}function K(e,t){return new _(t?function(r){return t.schedule(Q,0,{error:e,subscriber:r})}:function(t){return t.error(e)})}function Q(e){var t=e.error;e.subscriber.error(t)}W||(W={});var Z=function(){function e(e,t,r){this.kind=e,this.value=t,this.error=r,this.hasValue="N"===e}return e.prototype.observe=function(e){switch(this.kind){case"N":return e.next&&e.next(this.value);case"E":return e.error&&e.error(this.error);case"C":return e.complete&&e.complete()}},e.prototype.do=function(e,t,r){switch(this.kind){case"N":return e&&e(this.value);case"E":return t&&t(this.error);case"C":return r&&r()}},e.prototype.accept=function(e,t,r){return e&&"function"==typeof e.next?this.observe(e):this.do(e,t,r)},e.prototype.toObservable=function(){switch(this.kind){case"N":return G(this.value);case"E":return K(this.error);case"C":return $()}throw new Error("unexpected notification kind value")},e.createNext=function(t){return void 0!==t?new e("N",t):e.undefinedValueNotification},e.createError=function(t){return new e("E",void 0,t)},e.createComplete=function(){return e.completeNotification},e.completeNotification=new e("C"),e.undefinedValueNotification=new e("N",void 0),e}();var ee=function(e){function t(t,r,n){void 0===n&&(n=0);var i=e.call(this,t)||this;return i.scheduler=r,i.delay=n,i}return i(t,e),t.dispatch=function(e){var t=e.notification,r=e.destination;t.observe(r),this.unsubscribe()},t.prototype.scheduleMessage=function(e){this.destination.add(this.scheduler.schedule(t.dispatch,this.delay,new te(e,this.destination)))},t.prototype._next=function(e){this.scheduleMessage(Z.createNext(e))},t.prototype._error=function(e){this.scheduleMessage(Z.createError(e)),this.unsubscribe()},t.prototype._complete=function(){this.scheduleMessage(Z.createComplete()),this.unsubscribe()},t}(v),te=function(){return function(e,t){this.notification=e,this.destination=t}}(),re=function(e){function t(t,r,n){void 0===t&&(t=Number.POSITIVE_INFINITY),void 0===r&&(r=Number.POSITIVE_INFINITY);var i=e.call(this)||this;return i.scheduler=n,i._events=[],i._infiniteTimeWindow=!1,i._bufferSize=t<1?1:t,i._windowTime=r<1?1:r,r===Number.POSITIVE_INFINITY?(i._infiniteTimeWindow=!0,i.next=i.nextInfiniteTimeWindow):i.next=i.nextTimeWindow,i}return i(t,e),t.prototype.nextInfiniteTimeWindow=function(t){if(!this.isStopped){var r=this._events;r.push(t),r.length>this._bufferSize&&r.shift()}e.prototype.next.call(this,t)},t.prototype.nextTimeWindow=function(t){this.isStopped||(this._events.push(new ne(this._getNow(),t)),this._trimBufferThenGetEvents()),e.prototype.next.call(this,t)},t.prototype._subscribe=function(e){var t,r=this._infiniteTimeWindow,n=r?this._events:this._trimBufferThenGetEvents(),i=this.scheduler,s=n.length;if(this.closed)throw new I;if(this.isStopped||this.hasError?t=h.EMPTY:(this.observers.push(e),t=new O(this,e)),i&&e.add(e=new ee(e,i)),r)for(var o=0;o<s&&!e.closed;o++)e.next(n[o]);else for(o=0;o<s&&!e.closed;o++)e.next(n[o].value);return this.hasError?e.error(this.thrownError):this.isStopped&&e.complete(),t},t.prototype._getNow=function(){return(this.scheduler||q).now()},t.prototype._trimBufferThenGetEvents=function(){for(var e=this._getNow(),t=this._bufferSize,r=this._windowTime,n=this._events,i=n.length,s=0;s<i&&!(e-n[s].time<r);)s++;return i>t&&(s=Math.max(s,i-t)),s>0&&n.splice(0,s),n},t}(T),ne=function(){return function(e,t){this.time=e,this.value=t}}(),ie=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.value=null,t.hasNext=!1,t.hasCompleted=!1,t}return i(t,e),t.prototype._subscribe=function(t){return this.hasError?(t.error(this.thrownError),h.EMPTY):this.hasCompleted&&this.hasNext?(t.next(this.value),t.complete(),h.EMPTY):e.prototype._subscribe.call(this,t)},t.prototype.next=function(e){this.hasCompleted||(this.value=e,this.hasNext=!0)},t.prototype.error=function(t){this.hasCompleted||e.prototype.error.call(this,t)},t.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&e.prototype.next.call(this,this.value),e.prototype.complete.call(this)},t}(T),se=1,oe=function(){return Promise.resolve()}(),ae={};function ue(e){return e in ae&&(delete ae[e],!0)}var ce=function(e){var t=se++;return ae[t]=!0,oe.then((function(){return ue(t)&&e()})),t},le=function(e){ue(e)},de=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n}return i(t,e),t.prototype.requestAsyncId=function(t,r,n){return void 0===n&&(n=0),null!==n&&n>0?e.prototype.requestAsyncId.call(this,t,r,n):(t.actions.push(this),t.scheduled||(t.scheduled=ce(t.flush.bind(t,null))))},t.prototype.recycleAsyncId=function(t,r,n){if(void 0===n&&(n=0),null!==n&&n>0||null===n&&this.delay>0)return e.prototype.recycleAsyncId.call(this,t,r,n);0===t.actions.length&&(le(r),t.scheduled=void 0)},t}(N),fe=new(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.flush=function(e){this.active=!0,this.scheduled=void 0;var t,r=this.actions,n=-1,i=r.length;e=e||r.shift();do{if(t=e.execute(e.state,e.delay))break}while(++n<i&&(e=r.shift()));if(this.active=!1,t){for(;++n<i&&(e=r.shift());)e.unsubscribe();throw t}},t}(D))(de),he=fe,pe=new D(N),ye=pe,ve=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n}return i(t,e),t.prototype.requestAsyncId=function(t,r,n){return void 0===n&&(n=0),null!==n&&n>0?e.prototype.requestAsyncId.call(this,t,r,n):(t.actions.push(this),t.scheduled||(t.scheduled=requestAnimationFrame((function(){return t.flush(null)}))))},t.prototype.recycleAsyncId=function(t,r,n){if(void 0===n&&(n=0),null!==n&&n>0||null===n&&this.delay>0)return e.prototype.recycleAsyncId.call(this,t,r,n);0===t.actions.length&&(cancelAnimationFrame(r),t.scheduled=void 0)},t}(N),ge=new(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.flush=function(e){this.active=!0,this.scheduled=void 0;var t,r=this.actions,n=-1,i=r.length;e=e||r.shift();do{if(t=e.execute(e.state,e.delay))break}while(++n<i&&(e=r.shift()));if(this.active=!1,t){for(;++n<i&&(e=r.shift());)e.unsubscribe();throw t}},t}(D))(ve),me=ge,be=function(e){function t(t,r){void 0===t&&(t=we),void 0===r&&(r=Number.POSITIVE_INFINITY);var n=e.call(this,t,(function(){return n.frame}))||this;return n.maxFrames=r,n.frame=0,n.index=-1,n}return i(t,e),t.prototype.flush=function(){for(var e,t,r=this.actions,n=this.maxFrames;(t=r[0])&&t.delay<=n&&(r.shift(),this.frame=t.delay,!(e=t.execute(t.state,t.delay))););if(e){for(;t=r.shift();)t.unsubscribe();throw e}},t.frameTimeFactor=10,t}(D),we=function(e){function t(t,r,n){void 0===n&&(n=t.index+=1);var i=e.call(this,t,r)||this;return i.scheduler=t,i.work=r,i.index=n,i.active=!0,i.index=t.index=n,i}return i(t,e),t.prototype.schedule=function(r,n){if(void 0===n&&(n=0),!this.id)return e.prototype.schedule.call(this,r,n);this.active=!1;var i=new t(this.scheduler,this.work);return this.add(i),i.schedule(r,n)},t.prototype.requestAsyncId=function(e,r,n){void 0===n&&(n=0),this.delay=e.frame+n;var i=e.actions;return i.push(this),i.sort(t.sortActions),!0},t.prototype.recycleAsyncId=function(e,t,r){void 0===r&&(r=0)},t.prototype._execute=function(t,r){if(!0===this.active)return e.prototype._execute.call(this,t,r)},t.sortActions=function(e,t){return e.delay===t.delay?e.index===t.index?0:e.index>t.index?1:-1:e.delay>t.delay?1:-1},t}(N);function xe(){}function Se(e){return!!e&&(e instanceof _||"function"==typeof e.lift&&"function"==typeof e.subscribe)}var _e=function(){function e(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}return e.prototype=Object.create(Error.prototype),e}(),Ee=function(){function e(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}return e.prototype=Object.create(Error.prototype),e}(),Ie=function(){function e(){return Error.call(this),this.message="Timeout has occurred",this.name="TimeoutError",this}return e.prototype=Object.create(Error.prototype),e}();function Oe(e,t){return function(r){if("function"!=typeof e)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return r.lift(new ke(e,t))}}var ke=function(){function e(e,t){this.project=e,this.thisArg=t}return e.prototype.call=function(e,t){return t.subscribe(new Te(e,this.project,this.thisArg))},e}(),Te=function(e){function t(t,r,n){var i=e.call(this,t)||this;return i.project=r,i.count=0,i.thisArg=n||i,i}return i(t,e),t.prototype._next=function(e){var t;try{t=this.project.call(this.thisArg,e,this.count++)}catch(e){return void this.destination.error(e)}this.destination.next(t)},t}(v);function Pe(e,t,r){if(t){if(!H(t))return function(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];return Pe(e,r).apply(void 0,n).pipe(Oe((function(e){return l(e)?t.apply(void 0,e):t(e)})))};r=t}return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var i,s=this,o={context:s,subject:i,callbackFunc:e,scheduler:r};return new _((function(n){if(r){var a={args:t,subscriber:n,params:o};return r.schedule(je,0,a)}if(!i){i=new ie;try{e.apply(s,t.concat([function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];i.next(e.length<=1?e[0]:e),i.complete()}]))}catch(e){m(i)?i.error(e):console.warn(e)}}return i.subscribe(n)}))}}function je(e){var t=this,r=e.args,n=e.subscriber,i=e.params,s=i.callbackFunc,o=i.context,a=i.scheduler,u=i.subject;if(!u){u=i.subject=new ie;try{s.apply(o,r.concat([function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var n=e.length<=1?e[0]:e;t.add(a.schedule(Ae,0,{value:n,subject:u}))}]))}catch(e){u.error(e)}}this.add(u.subscribe(n))}function Ae(e){var t=e.value,r=e.subject;r.next(t),r.complete()}function Re(e,t,r){if(t){if(!H(t))return function(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];return Re(e,r).apply(void 0,n).pipe(Oe((function(e){return l(e)?t.apply(void 0,e):t(e)})))};r=t}return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var i={subject:void 0,args:t,callbackFunc:e,scheduler:r,context:this};return new _((function(n){var s=i.context,o=i.subject;if(r)return r.schedule(Ce,0,{params:i,subscriber:n,context:s});if(!o){o=i.subject=new ie;try{e.apply(s,t.concat([function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e.shift();r?o.error(r):(o.next(e.length<=1?e[0]:e),o.complete())}]))}catch(e){m(o)?o.error(e):console.warn(e)}}return o.subscribe(n)}))}}function Ce(e){var t=this,r=e.params,n=e.subscriber,i=e.context,s=r.callbackFunc,o=r.args,a=r.scheduler,u=r.subject;if(!u){u=r.subject=new ie;try{s.apply(i,o.concat([function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var n=e.shift();if(n)t.add(a.schedule(Be,0,{err:n,subject:u}));else{var i=e.length<=1?e[0]:e;t.add(a.schedule(Me,0,{value:i,subject:u}))}}]))}catch(e){this.add(a.schedule(Be,0,{err:e,subject:u}))}}this.add(u.subscribe(n))}function Me(e){var t=e.value,r=e.subject;r.next(t),r.complete()}function Be(e){var t=e.err;e.subject.error(t)}var Le=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.notifyNext=function(e,t,r,n,i){this.destination.next(t)},t.prototype.notifyError=function(e,t){this.destination.error(e)},t.prototype.notifyComplete=function(e){this.destination.complete()},t}(v),Ne=function(e){function t(t,r,n){var i=e.call(this)||this;return i.parent=t,i.outerValue=r,i.outerIndex=n,i.index=0,i}return i(t,e),t.prototype._next=function(e){this.parent.notifyNext(this.outerValue,e,this.outerIndex,this.index++,this)},t.prototype._error=function(e){this.parent.notifyError(e,this),this.unsubscribe()},t.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},t}(v);function Ue(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}var Fe=Ue(),De=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function Ye(e){return!!e&&"function"!=typeof e.subscribe&&"function"==typeof e.then}var qe=function(e){if(e&&"function"==typeof e[b])return n=e,function(e){var t=n[b]();if("function"!=typeof t.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return t.subscribe(e)};if(De(e))return V(e);if(Ye(e))return r=e,function(e){return r.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,u),e};if(e&&"function"==typeof e[Fe])return t=e,function(e){for(var r=t[Fe]();;){var n=void 0;try{n=r.next()}catch(t){return e.error(t),e}if(n.done){e.complete();break}if(e.next(n.value),e.closed)break}return"function"==typeof r.return&&e.add((function(){r.return&&r.return()})),e};var t,r,n,i=d(e)?"an invalid object":"'"+e+"'";throw new TypeError("You provided "+i+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")};function ze(e,t,r,n,i){if(void 0===i&&(i=new Ne(e,r,n)),!i.closed)return t instanceof _?t.subscribe(i):qe(t)(i)}var $e={};function He(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=void 0,n=void 0;return H(e[e.length-1])&&(n=e.pop()),"function"==typeof e[e.length-1]&&(r=e.pop()),1===e.length&&l(e[0])&&(e=e[0]),X(e,n).lift(new We(r))}var We=function(){function e(e){this.resultSelector=e}return e.prototype.call=function(e,t){return t.subscribe(new Ve(e,this.resultSelector))},e}(),Ve=function(e){function t(t,r){var n=e.call(this,t)||this;return n.resultSelector=r,n.active=0,n.values=[],n.observables=[],n}return i(t,e),t.prototype._next=function(e){this.values.push($e),this.observables.push(e)},t.prototype._complete=function(){var e=this.observables,t=e.length;if(0===t)this.destination.complete();else{this.active=t,this.toRespond=t;for(var r=0;r<t;r++){var n=e[r];this.add(ze(this,n,void 0,r))}}},t.prototype.notifyComplete=function(e){0==(this.active-=1)&&this.destination.complete()},t.prototype.notifyNext=function(e,t,r){var n=this.values,i=n[r],s=this.toRespond?i===$e?--this.toRespond:this.toRespond:0;n[r]=t,0===s&&(this.resultSelector?this._tryResultSelector(n):this.destination.next(n.slice()))},t.prototype._tryResultSelector=function(e){var t;try{t=this.resultSelector.apply(this,e)}catch(e){return void this.destination.error(e)}this.destination.next(t)},t}(Le);function Je(e,t){if(null!=e){if(function(e){return e&&"function"==typeof e[b]}(e))return function(e,t){return new _((function(r){var n=new h;return n.add(t.schedule((function(){var i=e[b]();n.add(i.subscribe({next:function(e){n.add(t.schedule((function(){return r.next(e)})))},error:function(e){n.add(t.schedule((function(){return r.error(e)})))},complete:function(){n.add(t.schedule((function(){return r.complete()})))}}))}))),n}))}(e,t);if(Ye(e))return function(e,t){return new _((function(r){var n=new h;return n.add(t.schedule((function(){return e.then((function(e){n.add(t.schedule((function(){r.next(e),n.add(t.schedule((function(){return r.complete()})))})))}),(function(e){n.add(t.schedule((function(){return r.error(e)})))}))}))),n}))}(e,t);if(De(e))return J(e,t);if(function(e){return e&&"function"==typeof e[Fe]}(e)||"string"==typeof e)return function(e,t){if(!e)throw new Error("Iterable cannot be null");return new _((function(r){var n,i=new h;return i.add((function(){n&&"function"==typeof n.return&&n.return()})),i.add(t.schedule((function(){n=e[Fe](),i.add(t.schedule((function(){if(!r.closed){var e,t;try{var i=n.next();e=i.value,t=i.done}catch(e){return void r.error(e)}t?r.complete():(r.next(e),this.schedule())}})))}))),i}))}(e,t)}throw new TypeError((null!==e&&typeof e||e)+" is not observable")}function Xe(e,t){return t?Je(e,t):e instanceof _?e:new _(qe(e))}var Ge=function(e){function t(t){var r=e.call(this)||this;return r.parent=t,r}return i(t,e),t.prototype._next=function(e){this.parent.notifyNext(e)},t.prototype._error=function(e){this.parent.notifyError(e),this.unsubscribe()},t.prototype._complete=function(){this.parent.notifyComplete(),this.unsubscribe()},t}(v),Ke=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.notifyNext=function(e){this.destination.next(e)},t.prototype.notifyError=function(e){this.destination.error(e)},t.prototype.notifyComplete=function(){this.destination.complete()},t}(v);function Qe(e,t){if(!t.closed)return e instanceof _?e.subscribe(t):qe(e)(t)}function Ze(e,t,r){return void 0===r&&(r=Number.POSITIVE_INFINITY),"function"==typeof t?function(n){return n.pipe(Ze((function(r,n){return Xe(e(r,n)).pipe(Oe((function(e,i){return t(r,e,n,i)})))}),r))}:("number"==typeof t&&(r=t),function(t){return t.lift(new et(e,r))})}var et=function(){function e(e,t){void 0===t&&(t=Number.POSITIVE_INFINITY),this.project=e,this.concurrent=t}return e.prototype.call=function(e,t){return t.subscribe(new tt(e,this.project,this.concurrent))},e}(),tt=function(e){function t(t,r,n){void 0===n&&(n=Number.POSITIVE_INFINITY);var i=e.call(this,t)||this;return i.project=r,i.concurrent=n,i.hasCompleted=!1,i.buffer=[],i.active=0,i.index=0,i}return i(t,e),t.prototype._next=function(e){this.active<this.concurrent?this._tryNext(e):this.buffer.push(e)},t.prototype._tryNext=function(e){var t,r=this.index++;try{t=this.project(e,r)}catch(e){return void this.destination.error(e)}this.active++,this._innerSub(t)},t.prototype._innerSub=function(e){var t=new Ge(this),r=this.destination;r.add(t);var n=Qe(e,t);n!==t&&r.add(n)},t.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},t.prototype.notifyNext=function(e){this.destination.next(e)},t.prototype.notifyComplete=function(){var e=this.buffer;this.active--,e.length>0?this._next(e.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},t}(Ke);function rt(e){return void 0===e&&(e=Number.POSITIVE_INFINITY),Ze(w,e)}function nt(){return rt(1)}function it(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return nt()(G.apply(void 0,e))}function st(e){return new _((function(t){var r;try{r=e()}catch(e){return void t.error(e)}return(r?Xe(r):$()).subscribe(t)}))}function ot(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(1===e.length){var r=e[0];if(l(r))return at(r,null);if(d(r)&&Object.getPrototypeOf(r)===Object.prototype){var n=Object.keys(r);return at(n.map((function(e){return r[e]})),n)}}if("function"==typeof e[e.length-1]){var i=e.pop();return at(e=1===e.length&&l(e[0])?e[0]:e,null).pipe(Oe((function(e){return i.apply(void 0,e)})))}return at(e,null)}function at(e,t){return new _((function(r){var n=e.length;if(0!==n)for(var i=new Array(n),s=0,o=0,a=function(a){var u=Xe(e[a]),c=!1;r.add(u.subscribe({next:function(e){c||(c=!0,o++),i[a]=e},error:function(e){return r.error(e)},complete:function(){++s!==n&&c||(o===n&&r.next(t?t.reduce((function(e,t,r){return e[t]=i[r],e}),{}):i),r.complete())}}))},u=0;u<n;u++)a(u);else r.complete()}))}function ut(e,t,r,n){return s(r)&&(n=r,r=void 0),n?ut(e,t,r).pipe(Oe((function(e){return l(e)?n.apply(void 0,e):n(e)}))):new _((function(n){!function e(t,r,n,i,s){var o;if(function(e){return e&&"function"==typeof e.addEventListener&&"function"==typeof e.removeEventListener}(t)){var a=t;t.addEventListener(r,n,s),o=function(){return a.removeEventListener(r,n,s)}}else if(function(e){return e&&"function"==typeof e.on&&"function"==typeof e.off}(t)){var u=t;t.on(r,n),o=function(){return u.off(r,n)}}else if(function(e){return e&&"function"==typeof e.addListener&&"function"==typeof e.removeListener}(t)){var c=t;t.addListener(r,n),o=function(){return c.removeListener(r,n)}}else{if(!t||!t.length)throw new TypeError("Invalid event target");for(var l=0,d=t.length;l<d;l++)e(t[l],r,n,i,s)}i.add(o)}(e,t,(function(e){arguments.length>1?n.next(Array.prototype.slice.call(arguments)):n.next(e)}),n,r)}))}function ct(e,t,r){return r?ct(e,t).pipe(Oe((function(e){return l(e)?r.apply(void 0,e):r(e)}))):new _((function(r){var n,i=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return r.next(1===e.length?e[0]:e)};try{n=e(i)}catch(e){return void r.error(e)}if(s(t))return function(){return t(i,n)}}))}function lt(e,t,r,n,i){var s,o;if(1==arguments.length){var a=e;o=a.initialState,t=a.condition,r=a.iterate,s=a.resultSelector||w,i=a.scheduler}else void 0===n||H(n)?(o=e,s=w,i=n):(o=e,s=n);return new _((function(e){var n=o;if(i)return i.schedule(dt,0,{subscriber:e,iterate:r,condition:t,resultSelector:s,state:n});for(;;){if(t){var a=void 0;try{a=t(n)}catch(t){return void e.error(t)}if(!a){e.complete();break}}var u=void 0;try{u=s(n)}catch(t){return void e.error(t)}if(e.next(u),e.closed)break;try{n=r(n)}catch(t){return void e.error(t)}}}))}function dt(e){var t=e.subscriber,r=e.condition;if(!t.closed){if(e.needIterate)try{e.state=e.iterate(e.state)}catch(e){return void t.error(e)}else e.needIterate=!0;if(r){var n=void 0;try{n=r(e.state)}catch(e){return void t.error(e)}if(!n)return void t.complete();if(t.closed)return}var i;try{i=e.resultSelector(e.state)}catch(e){return void t.error(e)}if(!t.closed&&(t.next(i),!t.closed))return this.schedule(e)}}function ft(e,t,r){return void 0===t&&(t=z),void 0===r&&(r=z),st((function(){return e()?t:r}))}function ht(e){return!l(e)&&e-parseFloat(e)+1>=0}function pt(e,t){return void 0===e&&(e=0),void 0===t&&(t=ye),(!ht(e)||e<0)&&(e=0),t&&"function"==typeof t.schedule||(t=ye),new _((function(r){return r.add(t.schedule(yt,e,{subscriber:r,counter:0,period:e})),r}))}function yt(e){var t=e.subscriber,r=e.counter,n=e.period;t.next(r),this.schedule({subscriber:t,counter:r+1,period:n},n)}function vt(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=Number.POSITIVE_INFINITY,n=null,i=e[e.length-1];return H(i)?(n=e.pop(),e.length>1&&"number"==typeof e[e.length-1]&&(r=e.pop())):"number"==typeof i&&(r=e.pop()),null===n&&1===e.length&&e[0]instanceof _?e[0]:rt(r)(X(e,n))}var gt=new _(xe);function mt(){return gt}function bt(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(0===e.length)return z;var r=e[0],n=e.slice(1);return 1===e.length&&l(r)?bt.apply(void 0,r):new _((function(e){var t=function(){return e.add(bt.apply(void 0,n).subscribe(e))};return Xe(r).subscribe({next:function(t){e.next(t)},error:t,complete:t})}))}function wt(e,t){return new _(t?function(r){var n=Object.keys(e),i=new h;return i.add(t.schedule(xt,0,{keys:n,index:0,subscriber:r,subscription:i,obj:e})),i}:function(t){for(var r=Object.keys(e),n=0;n<r.length&&!t.closed;n++){var i=r[n];e.hasOwnProperty(i)&&t.next([i,e[i]])}t.complete()})}function xt(e){var t=e.keys,r=e.index,n=e.subscriber,i=e.subscription,s=e.obj;if(!n.closed)if(r<t.length){var o=t[r];n.next([o,s[o]]),i.add(this.schedule({keys:t,index:r+1,subscriber:n,subscription:i,obj:s}))}else n.complete()}function St(e,t){function r(){return!r.pred.apply(r.thisArg,arguments)}return r.pred=e,r.thisArg=t,r}function _t(e,t){return function(r){return r.lift(new Et(e,t))}}var Et=function(){function e(e,t){this.predicate=e,this.thisArg=t}return e.prototype.call=function(e,t){return t.subscribe(new It(e,this.predicate,this.thisArg))},e}(),It=function(e){function t(t,r,n){var i=e.call(this,t)||this;return i.predicate=r,i.thisArg=n,i.count=0,i}return i(t,e),t.prototype._next=function(e){var t;try{t=this.predicate.call(this.thisArg,e,this.count++)}catch(e){return void this.destination.error(e)}t&&this.destination.next(e)},t}(v);function Ot(e,t,r){return[_t(t,r)(new _(qe(e))),_t(St(t,r))(new _(qe(e)))]}function kt(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(1===e.length){if(!l(e[0]))return e[0];e=e[0]}return X(e,void 0).lift(new Tt)}var Tt=function(){function e(){}return e.prototype.call=function(e,t){return t.subscribe(new Pt(e))},e}(),Pt=function(e){function t(t){var r=e.call(this,t)||this;return r.hasFirst=!1,r.observables=[],r.subscriptions=[],r}return i(t,e),t.prototype._next=function(e){this.observables.push(e)},t.prototype._complete=function(){var e=this.observables,t=e.length;if(0===t)this.destination.complete();else{for(var r=0;r<t&&!this.hasFirst;r++){var n=ze(this,e[r],void 0,r);this.subscriptions&&this.subscriptions.push(n),this.add(n)}this.observables=null}},t.prototype.notifyNext=function(e,t,r){if(!this.hasFirst){this.hasFirst=!0;for(var n=0;n<this.subscriptions.length;n++)if(n!==r){var i=this.subscriptions[n];i.unsubscribe(),this.remove(i)}this.subscriptions=null}this.destination.next(t)},t}(Le);function jt(e,t,r){return void 0===e&&(e=0),new _((function(n){void 0===t&&(t=e,e=0);var i=0,s=e;if(r)return r.schedule(At,0,{index:i,count:t,start:e,subscriber:n});for(;;){if(i++>=t){n.complete();break}if(n.next(s++),n.closed)break}}))}function At(e){var t=e.start,r=e.index,n=e.count,i=e.subscriber;r>=n?i.complete():(i.next(t),i.closed||(e.index=r+1,e.start=t+1,this.schedule(e)))}function Rt(e,t,r){void 0===e&&(e=0);var n=-1;return ht(t)?n=Number(t)<1?1:Number(t):H(t)&&(r=t),H(r)||(r=ye),new _((function(t){var i=ht(e)?e:+e-r.now();return r.schedule(Ct,i,{index:0,period:n,subscriber:t})}))}function Ct(e){var t=e.index,r=e.period,n=e.subscriber;if(n.next(t),!n.closed){if(-1===r)return n.complete();e.index=t+1,this.schedule(e,r)}}function Mt(e,t){return new _((function(r){var n,i;try{n=e()}catch(e){return void r.error(e)}try{i=t(n)}catch(e){return void r.error(e)}var s=(i?Xe(i):z).subscribe(r);return function(){s.unsubscribe(),n&&n.unsubscribe()}}))}function Bt(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[e.length-1];return"function"==typeof r&&e.pop(),X(e,void 0).lift(new Lt(r))}var Lt=function(){function e(e){this.resultSelector=e}return e.prototype.call=function(e,t){return t.subscribe(new Nt(e,this.resultSelector))},e}(),Nt=function(e){function t(t,r,n){void 0===n&&(n=Object.create(null));var i=e.call(this,t)||this;return i.resultSelector=r,i.iterators=[],i.active=0,i.resultSelector="function"==typeof r?r:void 0,i}return i(t,e),t.prototype._next=function(e){var t=this.iterators;l(e)?t.push(new Ft(e)):"function"==typeof e[Fe]?t.push(new Ut(e[Fe]())):t.push(new Dt(this.destination,this,e))},t.prototype._complete=function(){var e=this.iterators,t=e.length;if(this.unsubscribe(),0!==t){this.active=t;for(var r=0;r<t;r++){var n=e[r];if(n.stillUnsubscribed)this.destination.add(n.subscribe());else this.active--}}else this.destination.complete()},t.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},t.prototype.checkIterators=function(){for(var e=this.iterators,t=e.length,r=this.destination,n=0;n<t;n++){if("function"==typeof(o=e[n]).hasValue&&!o.hasValue())return}var i=!1,s=[];for(n=0;n<t;n++){var o,a=(o=e[n]).next();if(o.hasCompleted()&&(i=!0),a.done)return void r.complete();s.push(a.value)}this.resultSelector?this._tryresultSelector(s):r.next(s),i&&r.complete()},t.prototype._tryresultSelector=function(e){var t;try{t=this.resultSelector.apply(this,e)}catch(e){return void this.destination.error(e)}this.destination.next(t)},t}(v),Ut=function(){function e(e){this.iterator=e,this.nextResult=e.next()}return e.prototype.hasValue=function(){return!0},e.prototype.next=function(){var e=this.nextResult;return this.nextResult=this.iterator.next(),e},e.prototype.hasCompleted=function(){var e=this.nextResult;return Boolean(e&&e.done)},e}(),Ft=function(){function e(e){this.array=e,this.index=0,this.length=0,this.length=e.length}return e.prototype[Fe]=function(){return this},e.prototype.next=function(e){var t=this.index++,r=this.array;return t<this.length?{value:r[t],done:!1}:{value:null,done:!0}},e.prototype.hasValue=function(){return this.array.length>this.index},e.prototype.hasCompleted=function(){return this.array.length===this.index},e}(),Dt=function(e){function t(t,r,n){var i=e.call(this,t)||this;return i.parent=r,i.observable=n,i.stillUnsubscribed=!0,i.buffer=[],i.isComplete=!1,i}return i(t,e),t.prototype[Fe]=function(){return this},t.prototype.next=function(){var e=this.buffer;return 0===e.length&&this.isComplete?{value:null,done:!0}:{value:e.shift(),done:!1}},t.prototype.hasValue=function(){return this.buffer.length>0},t.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},t.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},t.prototype.notifyNext=function(e){this.buffer.push(e),this.parent.checkIterators()},t.prototype.subscribe=function(){return Qe(this.observable,new Ge(this))},t}(Ke)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MarkerColor=t.SkinType=t.ProjectileType=t.PropulsionType=t.FormationType=void 0,function(e){e.Column="COLUMN",e.Line="LINE",e.Skirmish="SKIRMISH",e.Square="SQUARE",e.Wedge="WEDGE"}(t.FormationType||(t.FormationType={})),function(e){e.Biped="BIPED",e.Quadruped="QUADRUPED",e.Bicycle="BICYCLE",e.Dicycle="DICYCLE",e.Wheels="WHEELS",e.Tracks="TRACKS",e.HalfTrack="HALFTRACK"}(t.PropulsionType||(t.PropulsionType={})),function(e){e[e.None=0]="None",e[e.Arrow=1]="Arrow",e[e.Bullet=2]="Bullet",e[e.Cannonball=3]="Cannonball"}(t.ProjectileType||(t.ProjectileType={})),function(e){e.Billboard="BILLBOARD"}(t.SkinType||(t.SkinType={})),function(e){e.Alliance="ALLIANCE",e.Commander="COMMANDER"}(t.MarkerColor||(t.MarkerColor={}))},function(e,t,r){"use strict";t.byteLength=function(e){var t=c(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,n=c(e),o=n[0],a=n[1],u=new s(function(e,t,r){return 3*(t+r)/4-r}(0,o,a)),l=0,d=a>0?o-4:o;for(r=0;r<d;r+=4)t=i[e.charCodeAt(r)]<<18|i[e.charCodeAt(r+1)]<<12|i[e.charCodeAt(r+2)]<<6|i[e.charCodeAt(r+3)],u[l++]=t>>16&255,u[l++]=t>>8&255,u[l++]=255&t;2===a&&(t=i[e.charCodeAt(r)]<<2|i[e.charCodeAt(r+1)]>>4,u[l++]=255&t);1===a&&(t=i[e.charCodeAt(r)]<<10|i[e.charCodeAt(r+1)]<<4|i[e.charCodeAt(r+2)]>>2,u[l++]=t>>8&255,u[l++]=255&t);return u},t.fromByteArray=function(e){for(var t,r=e.length,i=r%3,s=[],o=0,a=r-i;o<a;o+=16383)s.push(l(e,o,o+16383>a?a:o+16383));1===i?(t=e[r-1],s.push(n[t>>2]+n[t<<4&63]+"==")):2===i&&(t=(e[r-2]<<8)+e[r-1],s.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"="));return s.join("")};for(var n=[],i=[],s="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=o.length;a<u;++a)n[a]=o[a],i[o.charCodeAt(a)]=a;function c(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function l(e,t,r){for(var i,s,o=[],a=t;a<r;a+=3)i=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),o.push(n[(s=i)>>18&63]+n[s>>12&63]+n[s>>6&63]+n[63&s]);return o.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,r,n,i){var s,o,a=8*i-n-1,u=(1<<a)-1,c=u>>1,l=-7,d=r?i-1:0,f=r?-1:1,h=e[t+d];for(d+=f,s=h&(1<<-l)-1,h>>=-l,l+=a;l>0;s=256*s+e[t+d],d+=f,l-=8);for(o=s&(1<<-l)-1,s>>=-l,l+=n;l>0;o=256*o+e[t+d],d+=f,l-=8);if(0===s)s=1-c;else{if(s===u)return o?NaN:1/0*(h?-1:1);o+=Math.pow(2,n),s-=c}return(h?-1:1)*o*Math.pow(2,s-n)},t.write=function(e,t,r,n,i,s){var o,a,u,c=8*s-i-1,l=(1<<c)-1,d=l>>1,f=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,h=n?0:s-1,p=n?1:-1,y=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,o=l):(o=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-o))<1&&(o--,u*=2),(t+=o+d>=1?f/u:f*Math.pow(2,1-d))*u>=2&&(o++,u/=2),o+d>=l?(a=0,o=l):o+d>=1?(a=(t*u-1)*Math.pow(2,i),o+=d):(a=t*Math.pow(2,d-1)*Math.pow(2,i),o=0));i>=8;e[r+h]=255&a,h+=p,a/=256,i-=8);for(o=o<<i|a,c+=i;c>0;e[r+h]=255&o,h+=p,o/=256,c-=8);e[r+h-p]|=128*y}},function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.InputDeviceAdapter=void 0;var n=function(){function e(e){var t=this;this.observer=e,this.canvas=null,this.activeTextInput=!1,this.trackMouse=!1,this.keysDown={},this.mouseX=0,this.mouseY=0,this.buttons=0,this.mousedownTimestamp=null,this.mouseupX=0,this.mouseupY=0,this.clickCount=0,window.addEventListener("focus",(function(e){return t.handleFocusEvent(e)}),!0),window.addEventListener("blur",(function(){return t.handleBlurEvent()}),!0),window.addEventListener("keydown",(function(e){return t.handleKeyDownEvent(e)})),window.addEventListener("keyup",(function(e){return t.handleKeyUpEvent(e)})),window.addEventListener("mousedown",(function(e){return t.handleMouseDownEvent(e)}),!0),window.addEventListener("mouseup",(function(e){return t.handleMouseUpEvent(e)}),!0),window.addEventListener("mousemove",(function(e){return t.handleMouseMoveEvent(e)}),!0),window.addEventListener("DOMMouseScroll",(function(e){return t.handleMouseWheelEvent(e)})),window.addEventListener("mousewheel",(function(e){return t.handleMouseWheelEvent(e)})),window.addEventListener("wheel",(function(e){return t.handleMouseWheelEvent(e)})),document.addEventListener("contextmenu",(function(e){return t.handleContextMenuEvent(e)}),!1),setInterval((function(){if(t.buttons)try{var e=new Event("timestamp");t.mouseUpdate(e.timeStamp)}catch(e){}}),33)}return e.isWithinDistance=function(e,t,r,n,i){var s=e-r,o=t-n;return s*s+o*o<=i*i},e.shouldTrackGesture=function(t,r){for(var n=document.elementFromPoint(t,r);n;n=n.parentNode)if(e.isClickable(n)&&e.hasOpacity(n))return!1;return!0},e.shouldTrackWheel=function(t){for(var r=document.elementFromPoint(t.clientX,t.clientY);r;r=r.parentNode)if(e.isScrollable(r))return!1;return!0},e.hasOpacity=function(e){for(;e;){if(e.style&&"0"===e.style.opacity)return!1;e=e.parentNode}return!0},e.isClickable=function(e){if("INPUT"===e.tagName||"BUTTON"===e.tagName)return!0;if(e.className){var t=" "+e.className+" ";return-1!==t.indexOf(" clickable ")||-1!==t.indexOf(" panel ")}return!1},e.isScrollable=function(e){if("scroll"===e.overflowY)return!0;if(e.className&&-1!==(" "+e.className+" ").indexOf(" scrollable "))return!0;return!1},e.normalizeMouseWheelDelta=function(e){var t=e.deltaY;return t&&e.wheelDelta?t/4:Math.abs(t)<52.95000076293945?10*t:t/52.95000076293945},e.prototype.getCanvas=function(){return this.canvas||(this.canvas=document.getElementById("canvas")),this.canvas},e.prototype.mouseUpdate=function(e){this.observer.mouseUpdate(this.mouseX,this.mouseY,this.buttons,this.clickCount,e)},e.prototype.mouseWheel=function(e,t,r,n){this.observer.mouseWheel(e,t,r,n)},e.prototype.handleFocusEvent=function(e){this.activeTextInput="INPUT"===e.target.tagName},e.prototype.handleBlurEvent=function(){this.activeTextInput=!1},e.prototype.handleKeyDownEvent=function(e){if(!this.activeTextInput&&!(e.ctrlKey||e.shiftKey||e.altKey||e.metaKey)){var t=e.keyCode;this.keysDown[t]=!0,this.observer.keyDown(e.keyCode),e.preventDefault()}},e.prototype.handleKeyUpEvent=function(e){var t=e.keyCode;this.keysDown[t]&&(this.keysDown[t]=!1,this.observer.keyUp(e.keyCode))},e.prototype.handleMouseDownEvent=function(t){if(!this.trackMouse&&this.shouldTrackMouse(t)&&(this.trackMouse=!0),this.trackMouse){if(this.mouseX=t.pageX,this.mouseY=window.innerHeight-t.pageY,null!=this.mousedownTimestamp&&t.timeStamp-this.mousedownTimestamp<500&&e.isWithinDistance(this.mouseX,this.mouseY,this.mouseupX,this.mouseupY,12)?this.clickCount+=1:this.clickCount=1,this.mousedownTimestamp=t.timeStamp,void 0!==t.buttons)this.buttons=t.buttons;else switch(t.button){case 0:this.buttons|=1;break;case 1:this.buttons|=4;break;case 2:this.buttons|=2}this.mouseUpdate(t.timeStamp),t.stopPropagation(),t.preventDefault();var r=this.getCanvas();r&&r.setCapture&&r.setCapture()}},e.prototype.handleMouseUpEvent=function(e){if(this.trackMouse){if(this.mouseX=e.pageX,this.mouseY=window.innerHeight-e.pageY,this.mouseupX=this.mouseX,this.mouseupY=this.mouseY,void 0!==e.buttons)this.buttons=e.buttons;else switch(e.button){case 0:this.buttons&=6;break;case 1:this.buttons&=3;break;case 2:this.buttons&=5}this.mouseUpdate(e.timeStamp),e.stopPropagation(),e.preventDefault(),e.buttons||(this.trackMouse=!1)}},e.prototype.handleMouseMoveEvent=function(e){this.trackMouse&&(this.mouseX=e.pageX,this.mouseY=window.innerHeight-e.pageY,this.mouseUpdate(e.timeStamp),e.stopPropagation(),e.preventDefault())},e.prototype.handleMouseWheelEvent=function(t){if(e.shouldTrackWheel(t)){var r=-2*e.normalizeMouseWheelDelta(t);this.mouseWheel(t.pageX,window.innerHeight-t.pageY,0,r),t.stopPropagation()}},e.prototype.handleContextMenuEvent=function(e){this.shouldTrackMouse(e)&&e.preventDefault()},e.prototype.shouldTrackMouse=function(t){return t.target===this.canvas||e.shouldTrackGesture(t.clientX,t.clientY)},e}();t.InputDeviceAdapter=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t){var r,n,i=e.exports={};function s(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function a(e){if(r===setTimeout)return setTimeout(e,0);if((r===s||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:s}catch(e){r=s}try{n="function"==typeof clearTimeout?clearTimeout:o}catch(e){n=o}}();var u,c=[],l=!1,d=-1;function f(){l&&u&&(l=!1,u.length?c=u.concat(c):d=-1,c.length&&h())}function h(){if(!l){var e=a(f);l=!0;for(var t=c.length;t;){for(u=c,c=[];++d<t;)u&&u[d].run();d=-1,t=c.length}u=null,l=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===o||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function y(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new p(e,t)),1!==c.length||l||a(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=y,i.addListener=y,i.once=y,i.off=y,i.removeListener=y,i.removeAllListeners=y,i.emit=y,i.prependListener=y,i.prependOnceListener=y,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function o(e){try{u(n.next(e))}catch(e){s(e)}}function a(e){try{u(n.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}u((n=n.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var r,n,i,s,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,n&&(i=2&s[0]?n.return:s[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,s[1])).done)return i;switch(n=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,n=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!(i=o.trys,(i=i.length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){o.label=s[1];break}if(6===s[0]&&o.label<i[1]){o.label=i[1],i=s;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(s);break}i[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],n=0}finally{r=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.ScenarioRunner=void 0;var s=r(12),o=r(11),a=r(16),u=function(){function e(e){var t=this;this.scenarioFactory=e,this.runtime=null,this.systemFederation=null,this.lobbyFederation=null,this.battleFederation=null,this.player=null,this.launcher=null,this.module=null,this.match=null,this.scenario=null,this.inputDevicePoster=null,this.runtime=new s.Runtime,this.runtime.startup(a.RuntimeConfiguration.autoDetect()),this.systemFederation=this.runtime.joinFederation("000000000000000000000000"),this.systemFederation.objects("Player").subscribe((function(e){t.playerChanged(e)})),this.systemFederation.objects("Launcher").subscribe((function(e){t.launcherChanged(e)})),this.inputDevicePoster=new o.InputDevicePoster}return e.prototype.playerChanged=function(e){e.$defined$changed&&e.$defined&&(this.player=e),(e.playerId$changed||e.playerName$changed||e.playerIcon$changed)&&this.runtime.authenticate("",e.playerId||"",e.playerName||"",e.playerIcon||""),e.playerId$changed&&e.playerId&&(this.runtime.authenticate("",e.playerId,"",""),this.tryStartScenario())},e.prototype.launcherChanged=function(e){e.$defined$changed&&e.$defined&&(this.launcher=e),e.lobbyId$changed&&e.lobbyId&&this.launcherJoinedLobby(e.lobbyId),e.matchId$changed&&(e.matchId?this.match=this.lobbyFederation.getObjectOrNull(e.matchId):(this.match=null,this.battleFederation&&this.launcherLeftMatch()))},e.prototype.launcherJoinedLobby=function(e){var t=this;this.lobbyFederation&&this.lobbyFederation.federationId!==e&&(this.runtime.leaveFederation(e),this.lobbyFederation=null),this.lobbyFederation||(this.lobbyFederation=this.runtime.joinFederation(e),this.lobbyFederation.objects("Module").subscribe((function(e){e.$defined$changed&&(t.module=e.$defined?e:null),e.ownerId$changed&&t.tryStartScenario()})))},e.prototype.tryStartScenario=function(){this.module&&this.player&&this.module.ownerId===this.player.playerId&&!this.scenario&&this.startScenario(this.scenarioFactory(this.player.playerId)).then((function(){}),(function(e){console.error(e)}))},e.prototype.launcherLeftMatch=function(){this.scenario&&(this.scenario.shutdown(),this.scenario=null),this.battleFederation&&(this.runtime.leaveFederation(this.battleFederation.federationId),this.battleFederation=null)},e.prototype.startScenario=function(e){return n(this,void 0,void 0,(function(){var t,r,n,s;return i(this,(function(i){switch(i.label){case 0:return i.trys.push([0,3,,4]),[4,this.systemFederation.requestService("CreateMatch",{lobbyId:this.lobbyFederation.federationId,params:e.getParams()})];case 1:return t=i.sent(),r=t.matchId,n=this.lobbyFederation.getObjectOrNull(r),this.scenario=e,this.battleFederation=this.runtime.joinFederation(r),[4,this.pingBattleServices(this.battleFederation)];case 2:return i.sent(),e.startup(n,this.lobbyFederation,this.battleFederation),[3,4];case 3:return s=i.sent(),console.error(s),[3,4];case 4:return[2]}}))}))},e.prototype.pingBattleServices=function(e){return n(this,void 0,void 0,(function(){var t,r;return i(this,(function(n){switch(n.label){case 0:t=0,n.label=1;case 1:0,n.label=2;case 2:return n.trys.push([2,4,,8]),[4,e.requestService("PingBattleServices",{})];case 3:return n.sent(),[2];case 4:return r=n.sent(),t++<10?[4,new Promise((function(e){return setTimeout(e,100)}))]:[3,6];case 5:return n.sent(),[3,7];case 6:throw r;case 7:return[3,8];case 8:return[3,1];case 9:return[2]}}))}))},e}();t.ScenarioRunner=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.vec4=t.vec3=t.vec2=void 0;var n=function(){function e(){}return e.add=function(e,t){return{x:e.x+t.x,y:e.y+t.y}},e.sub=function(e,t){return{x:e.x-t.x,y:e.y-t.y}},e.mul=function(e,t){return{x:e.x*t,y:e.y*t}},e.distanceSquared=function(e,t){var r=t.x-e.x,n=t.y-e.y;return r*r+n*n},e.distance=function(t,r){return Math.sqrt(e.distanceSquared(t,r))},e.normSquared=function(e){return e.x*e.x+e.y*e.y},e.norm=function(t){return Math.sqrt(e.normSquared(t))},e.rotate=function(t,r){var n=e.norm(t);return r+=e.angle(t),{x:n*Math.cos(r),y:n*Math.sin(r)}},e.angle=function(e){return Math.atan2(e.y,e.x)},e}();t.vec2=n;var i=function(){};t.vec3=i;var s=function(){};t.vec4=s},function(e,t,r){"use strict";r.r(t),r.d(t,"SandboxScenario",(function(){return re}));var n={};r.r(n),r.d(n,"kata",(function(){return u})),r.d(n,"nagi",(function(){return u})),r.d(n,"yari",(function(){return l}));var i={};r.r(i),r.d(i,"ash",(function(){return v})),r.d(i,"cav",(function(){return m})),r.d(i,"sam",(function(){return w}));var s={};r.r(s),r.d(s,"ash_arq",(function(){return S})),r.d(s,"ash_bow",(function(){return E})),r.d(s,"ash_can",(function(){return O})),r.d(s,"ash_kata",(function(){return T})),r.d(s,"ash_nagi",(function(){return j})),r.d(s,"ash_yari",(function(){return R})),r.d(s,"cav_bow",(function(){return M})),r.d(s,"cav_can",(function(){return L})),r.d(s,"cav_kata",(function(){return U})),r.d(s,"cav_nagi",(function(){return D})),r.d(s,"cav_yari",(function(){return q})),r.d(s,"sam_arq",(function(){return W})),r.d(s,"sam_bow",(function(){return $})),r.d(s,"sam_kata",(function(){return J})),r.d(s,"sam_nagi",(function(){return G})),r.d(s,"sam_yari",(function(){return Q}));var o=r(7),a=r(3),u=r.t(a,2),c=r(18),l=r.t(c,2),d=r(19),f=r.t(d,2),h=r(20),p=r.t(h,2),y=r(21),v=r.t(y,2),g=r(22),m=r.t(g,2),b=r(23),w=r.t(b,2),x=r(24),S=r.t(x,2),_=r(25),E=r.t(_,2),I=r(26),O=r.t(I,2),k=r(27),T=r.t(k,2),P=r(28),j=r.t(P,2),A=r(29),R=r.t(A,2),C=r(30),M=r.t(C,2),B=r(31),L=r.t(B,2),N=r(32),U=r.t(N,2),F=r(33),D=r.t(F,2),Y=r(34),q=r.t(Y,2),z=r(35),$=r.t(z,2),H=r(36),W=r.t(H,2),V=r(37),J=r.t(V,2),X=r(38),G=r.t(X,2),K=r(39),Q=r.t(K,2),Z=function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function o(e){try{u(n.next(e))}catch(e){s(e)}}function a(e){try{u(n.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}u((n=n.apply(e,t||[])).next())}))},ee=function(e,t){var r,n,i,s,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,n&&(i=2&s[0]?n.return:s[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,s[1])).done)return i;switch(n=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,n=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!(i=o.trys,(i=i.length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){o.label=s[1];break}if(6===s[0]&&o.label<i[1]){o.label=i[1],i=s;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(s);break}i[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],n=0}finally{r=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}},te=function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};o.RuntimeConfiguration.autoRedirect();var re=function(){function e(e){this.playerId=e}return e.getBasePath=function(e){var t=e.lastIndexOf("/");return-1===t?"":e.substring(0,t+1)},e.getBaseHref=function(t){return t.protocol+"//"+t.hostname+(t.port?":"+t.port:"")+e.getBasePath(t.pathname)},e.loadTexture=function(t){return new Promise((function(r,n){var i=new XMLHttpRequest,s=e.getBaseHref(window.location)+"assets/"+t;i.open("GET",s,!0),i.responseType="arraybuffer",i.onload=function(){var e=i.response;e?r({data:new Uint8Array(e)}):n("no response")},i.onabort=function(e){n("aborted loading "+s)},i.onerror=function(e){n("error while loading "+s)},i.send(null)}))},e.prototype.getParams=function(){return{teams:[{slots:[{playerId:this.playerId}]},{slots:[{playerId:this.playerId}]}],teamsMin:2,teamsMax:99,title:"sandbox",map:"Maps/Map1.png",options:{map:!0,teams:!0,sandbox:!0},settings:{sandbox:!0},started:!1}},e.prototype.startup=function(t,r,o){var a,u,c,l,d,h,y=this;this.match=t,this.arenaFederation=r,this.battleFederation=o,this.createAlliances().then((function(){}),(function(e){return console.error(e)})),this.battleFederation.provideService("LoadTexture",(function(t){return e.loadTexture(t.name)})),this.subscription=this.arenaFederation.objects("Match").subscribe((function(){y.recreateAlliances().then((function(){}),(function(e){return console.error(e)}))})),this.subscription.add(this.arenaFederation.objects("Team").subscribe((function(){y.recreateAlliances().then((function(){}),(function(e){return console.error(e)}))}))),this.subscription.add(this.arenaFederation.objects("Slot").subscribe((function(){y.recreateAlliances().then((function(){}),(function(e){return console.error(e)}))}))),this.subscription.add(this.battleFederation.objects("Unit").subscribe((function(e){(e.fighters$changed&&!e.fighters||e.deletedByGesture)&&e.$delete()}))),this.battleFederation.observeEvents("DeployUnit",(function(e){e.deleted||y.deployUnit(e.deploymentUnit,e.position)}));try{for(var v=te(p),g=v.next();!g.done;g=v.next()){var m=g.value;this.battleFederation.objects("Shape").create(m)}}catch(e){a={error:e}}finally{try{g&&!g.done&&(u=v.return)&&u.call(v)}finally{if(a)throw a.error}}try{for(var b=te(f),w=b.next();!w.done;w=b.next()){m=w.value;this.battleFederation.objects("Shape").create(m)}}catch(e){c={error:e}}finally{try{w&&!w.done&&(l=b.return)&&l.call(b)}finally{if(c)throw c.error}}try{for(var x=te(Object.values(s)),S=x.next();!S.done;S=x.next()){var _=S.value;this.battleFederation.objects("Shape").create({name:_.unitType.subunits[0].element.shape,size:_.shape.size,skins:_.shape.skin?[i[_.shape.skin]]:null,lines:_.shape.line?[n[_.shape.line]]:null})}}catch(e){d={error:e}}finally{try{S&&!S.done&&(h=x.return)&&h.call(x)}finally{if(d)throw d.error}}},e.prototype.shutdown=function(){this.subscription&&(this.subscription.unsubscribe(),this.subscription=null)},e.prototype.deployUnit=function(e,t){var r={x:512-t.x,y:512-t.y},n=Math.atan2(r.y,r.x),i=e.alliance,s=e.unitType,o=e.marker,a=e.commander;a||(a=this.battleFederation.objects("Commander").find((function(e){return e.alliance===i}))),console.log("deployUnit, commander="+(a?a.playerId:"null")),this.battleFederation.objects("Unit").create({alliance:i,commander:a,unitType:s,marker:o,"stats.placement":{x:t.x,y:t.y,z:n},deletable:!0})},e.prototype.recreateAlliances=function(){return Z(this,void 0,void 0,(function(){return ee(this,(function(e){switch(e.label){case 0:return[4,this.removeAlliances()];case 1:return e.sent(),[4,this.createAlliances()];case 2:return e.sent(),[2]}}))}))},e.prototype.removeAlliances=function(){return Z(this,void 0,void 0,(function(){var e,t,r,n,i,s,o,a,u,c,l,d;return ee(this,(function(f){try{for(e=te(this.battleFederation.objects("Alliance")),t=e.next();!t.done;t=e.next())t.value.$delete()}catch(e){o={error:e}}finally{try{t&&!t.done&&(a=e.return)&&a.call(e)}finally{if(o)throw o.error}}try{for(r=te(this.battleFederation.objects("Commander")),n=r.next();!n.done;n=r.next())n.value.$delete()}catch(e){u={error:e}}finally{try{n&&!n.done&&(c=r.return)&&c.call(r)}finally{if(u)throw u.error}}try{for(i=te(this.battleFederation.objects("DeploymentUnit")),s=i.next();!s.done;s=i.next())s.value.$delete()}catch(e){l={error:e}}finally{try{s&&!s.done&&(d=i.return)&&d.call(i)}finally{if(l)throw l.error}}return[2]}))}))},e.prototype.createAlliances=function(){return Z(this,void 0,void 0,(function(){var e,t,r,n,i,s,o,a,u,c,l,d;return ee(this,(function(f){e=0;try{for(t=te(this.match.teams),r=t.next();!r.done;r=t.next()){n=r.value,i=this.battleFederation.objects("Alliance").create({position:++e}),this.createReinforcements(i,e);try{for(l=void 0,s=te(n.slots),o=s.next();!o.done;o=s.next())(a=o.value).playerId&&this.battleFederation.objects("Commander").create({alliance:i,playerId:a.playerId})}catch(e){l={error:e}}finally{try{o&&!o.done&&(d=s.return)&&d.call(s)}finally{if(l)throw l.error}}}}catch(e){u={error:e}}finally{try{r&&!r.done&&(c=t.return)&&c.call(t)}finally{if(u)throw u.error}}return[2]}))}))},e.prototype.createReinforcements=function(e,t){this.createReinforcement(e,t,0,0,5,S),this.createReinforcement(e,t,0,1,5,W),this.createReinforcement(e,t,0,2,5,E),this.createReinforcement(e,t,0,3,5,$),this.createReinforcement(e,t,0,4,5,O),this.createReinforcement(e,t,1,0,6,R),this.createReinforcement(e,t,1,1,6,Q),this.createReinforcement(e,t,1,2,6,T),this.createReinforcement(e,t,1,3,6,J),this.createReinforcement(e,t,1,4,6,j),this.createReinforcement(e,t,1,5,6,G),this.createReinforcement(e,t,2,0,5,q),this.createReinforcement(e,t,2,1,5,U),this.createReinforcement(e,t,2,2,5,D),this.createReinforcement(e,t,2,3,5,M),this.createReinforcement(e,t,2,4,5,L)},e.prototype.createReinforcement=function(e,t,r,n,i,s){var o=512+30*(r+1),a=40*(i>1?n-.5*(i-1):0)/o+.5*(1===t?1:3)*3.1415926535;this.battleFederation.objects("DeploymentUnit").create({hostingPlayerId:this.playerId,alliance:e,unitType:s.unitType,marker:s.marker,position:{x:512+o*Math.cos(a),y:512+o*Math.sin(a)},reinforcement:!0,deletable:!0})},e}();new o.ScenarioRunner((function(e){return new re(e)}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,