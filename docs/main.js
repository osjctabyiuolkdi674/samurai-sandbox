!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=29)}([function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var r=n(19),i=n(20),o=n(21);function s(){return c.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function u(t,e){if(s()<e)throw new RangeError("Invalid typed array length");return c.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=c.prototype:(null===t&&(t=new c(e)),t.length=e),t}function c(t,e,n){if(!(c.TYPED_ARRAY_SUPPORT||this instanceof c))return new c(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return f(this,t)}return a(this,t,e,n)}function a(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);c.TYPED_ARRAY_SUPPORT?(t=e).__proto__=c.prototype:t=l(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!c.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(e,n),i=(t=u(t,r)).write(e,n);i!==r&&(t=t.slice(0,i));return t}(t,e,n):function(t,e){if(c.isBuffer(e)){var n=0|d(e.length);return 0===(t=u(t,n)).length||e.copy(t,0,0,n),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?u(t,0):l(t,e);if("Buffer"===e.type&&o(e.data))return l(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function h(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function f(t,e){if(h(e),t=u(t,e<0?0:0|d(e)),!c.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function l(t,e){var n=e.length<0?0:0|d(e.length);t=u(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function d(t){if(t>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|t}function p(t,e){if(c.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return Y(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return L(t).length;default:if(r)return Y(t).length;e=(""+e).toLowerCase(),r=!0}}function y(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return j(this,e,n);case"utf8":case"utf-8":return O(this,e,n);case"ascii":return P(this,e,n);case"latin1":case"binary":return T(this,e,n);case"base64":return I(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function b(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function v(t,e,n,r,i){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=c.from(e,r)),c.isBuffer(e))return 0===e.length?-1:m(t,e,n,r,i);if("number"==typeof e)return e&=255,c.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):m(t,[e],n,r,i);throw new TypeError("val must be string, number or Buffer")}function m(t,e,n,r,i){var o,s=1,u=t.length,c=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;s=2,u/=2,c/=2,n/=2}function a(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(i){var h=-1;for(o=n;o<u;o++)if(a(t,o)===a(e,-1===h?0:o-h)){if(-1===h&&(h=o),o-h+1===c)return h*s}else-1!==h&&(o-=o-h),h=-1}else for(n+c>u&&(n=u-c),o=n;o>=0;o--){for(var f=!0,l=0;l<c;l++)if(a(t,o+l)!==a(e,l)){f=!1;break}if(f)return o}return-1}function g(t,e,n,r){n=Number(n)||0;var i=t.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var s=0;s<r;++s){var u=parseInt(e.substr(2*s,2),16);if(isNaN(u))return s;t[n+s]=u}return s}function w(t,e,n,r){return q(Y(e,t.length-n),t,n,r)}function _(t,e,n,r){return q(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function E(t,e,n,r){return _(t,e,n,r)}function S(t,e,n,r){return q(L(e),t,n,r)}function x(t,e,n,r){return q(function(t,e){for(var n,r,i,o=[],s=0;s<t.length&&!((e-=2)<0);++s)n=t.charCodeAt(s),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(e,t.length-n),t,n,r)}function I(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function O(t,e,n){n=Math.min(t.length,n);for(var r=[],i=e;i<n;){var o,s,u,c,a=t[i],h=null,f=a>239?4:a>223?3:a>191?2:1;if(i+f<=n)switch(f){case 1:a<128&&(h=a);break;case 2:128==(192&(o=t[i+1]))&&(c=(31&a)<<6|63&o)>127&&(h=c);break;case 3:o=t[i+1],s=t[i+2],128==(192&o)&&128==(192&s)&&(c=(15&a)<<12|(63&o)<<6|63&s)>2047&&(c<55296||c>57343)&&(h=c);break;case 4:o=t[i+1],s=t[i+2],u=t[i+3],128==(192&o)&&128==(192&s)&&128==(192&u)&&(c=(15&a)<<18|(63&o)<<12|(63&s)<<6|63&u)>65535&&c<1114112&&(h=c)}null===h?(h=65533,f=1):h>65535&&(h-=65536,r.push(h>>>10&1023|55296),h=56320|1023&h),r.push(h),i+=f}return function(t){var e=t.length;if(e<=4096)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=4096));return n}(r)}e.Buffer=c,e.SlowBuffer=function(t){+t!=t&&(t=0);return c.alloc(+t)},e.INSPECT_MAX_BYTES=50,c.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=s(),c.poolSize=8192,c._augment=function(t){return t.__proto__=c.prototype,t},c.from=function(t,e,n){return a(null,t,e,n)},c.TYPED_ARRAY_SUPPORT&&(c.prototype.__proto__=Uint8Array.prototype,c.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&c[Symbol.species]===c&&Object.defineProperty(c,Symbol.species,{value:null,configurable:!0})),c.alloc=function(t,e,n){return function(t,e,n,r){return h(e),e<=0?u(t,e):void 0!==n?"string"==typeof r?u(t,e).fill(n,r):u(t,e).fill(n):u(t,e)}(null,t,e,n)},c.allocUnsafe=function(t){return f(null,t)},c.allocUnsafeSlow=function(t){return f(null,t)},c.isBuffer=function(t){return!(null==t||!t._isBuffer)},c.compare=function(t,e){if(!c.isBuffer(t)||!c.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0},c.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(t,e){if(!o(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return c.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=c.allocUnsafe(e),i=0;for(n=0;n<t.length;++n){var s=t[n];if(!c.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(r,i),i+=s.length}return r},c.byteLength=p,c.prototype._isBuffer=!0,c.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)b(this,e,e+1);return this},c.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)b(this,e,e+3),b(this,e+1,e+2);return this},c.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)b(this,e,e+7),b(this,e+1,e+6),b(this,e+2,e+5),b(this,e+3,e+4);return this},c.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?O(this,0,t):y.apply(this,arguments)},c.prototype.equals=function(t){if(!c.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===c.compare(this,t)},c.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},c.prototype.compare=function(t,e,n,r,i){if(!c.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),e<0||n>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&e>=n)return 0;if(r>=i)return-1;if(e>=n)return 1;if(this===t)return 0;for(var o=(i>>>=0)-(r>>>=0),s=(n>>>=0)-(e>>>=0),u=Math.min(o,s),a=this.slice(r,i),h=t.slice(e,n),f=0;f<u;++f)if(a[f]!==h[f]){o=a[f],s=h[f];break}return o<s?-1:s<o?1:0},c.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},c.prototype.indexOf=function(t,e,n){return v(this,t,e,n,!0)},c.prototype.lastIndexOf=function(t,e,n){return v(this,t,e,n,!1)},c.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return g(this,t,e,n);case"utf8":case"utf-8":return w(this,t,e,n);case"ascii":return _(this,t,e,n);case"latin1":case"binary":return E(this,t,e,n);case"base64":return S(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return x(this,t,e,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function P(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function T(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function j(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=e;o<n;++o)i+=D(t[o]);return i}function k(t,e,n){for(var r=t.slice(e,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function A(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function C(t,e,n,r,i,o){if(!c.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function R(t,e,n,r){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-n,2);i<o;++i)t[n+i]=(e&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function M(t,e,n,r){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-n,4);i<o;++i)t[n+i]=e>>>8*(r?i:3-i)&255}function B(t,e,n,r,i,o){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function U(t,e,n,r,o){return o||B(t,0,n,4),i.write(t,e,n,r,23,4),n+4}function F(t,e,n,r,o){return o||B(t,0,n,8),i.write(t,e,n,r,52,8),n+8}c.prototype.slice=function(t,e){var n,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),c.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=c.prototype;else{var i=e-t;n=new c(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+t]}return n},c.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||A(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r},c.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||A(t,e,this.length);for(var r=this[t+--e],i=1;e>0&&(i*=256);)r+=this[t+--e]*i;return r},c.prototype.readUInt8=function(t,e){return e||A(t,1,this.length),this[t]},c.prototype.readUInt16LE=function(t,e){return e||A(t,2,this.length),this[t]|this[t+1]<<8},c.prototype.readUInt16BE=function(t,e){return e||A(t,2,this.length),this[t]<<8|this[t+1]},c.prototype.readUInt32LE=function(t,e){return e||A(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},c.prototype.readUInt32BE=function(t,e){return e||A(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},c.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||A(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*e)),r},c.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||A(t,e,this.length);for(var r=e,i=1,o=this[t+--r];r>0&&(i*=256);)o+=this[t+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},c.prototype.readInt8=function(t,e){return e||A(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},c.prototype.readInt16LE=function(t,e){e||A(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt16BE=function(t,e){e||A(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt32LE=function(t,e){return e||A(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},c.prototype.readInt32BE=function(t,e){return e||A(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},c.prototype.readFloatLE=function(t,e){return e||A(t,4,this.length),i.read(this,t,!0,23,4)},c.prototype.readFloatBE=function(t,e){return e||A(t,4,this.length),i.read(this,t,!1,23,4)},c.prototype.readDoubleLE=function(t,e){return e||A(t,8,this.length),i.read(this,t,!0,52,8)},c.prototype.readDoubleBE=function(t,e){return e||A(t,8,this.length),i.read(this,t,!1,52,8)},c.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||C(this,t,e,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[e]=255&t;++o<n&&(i*=256);)this[e+o]=t/i&255;return e+n},c.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||C(this,t,e,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+n},c.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,1,255,0),c.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},c.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):R(this,t,e,!0),e+2},c.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):R(this,t,e,!1),e+2},c.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):M(this,t,e,!0),e+4},c.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):M(this,t,e,!1),e+4},c.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);C(this,t,e,n,i-1,-i)}var o=0,s=1,u=0;for(this[e]=255&t;++o<n&&(s*=256);)t<0&&0===u&&0!==this[e+o-1]&&(u=1),this[e+o]=(t/s>>0)-u&255;return e+n},c.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);C(this,t,e,n,i-1,-i)}var o=n-1,s=1,u=0;for(this[e+o]=255&t;--o>=0&&(s*=256);)t<0&&0===u&&0!==this[e+o+1]&&(u=1),this[e+o]=(t/s>>0)-u&255;return e+n},c.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,1,127,-128),c.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},c.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):R(this,t,e,!0),e+2},c.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):R(this,t,e,!1),e+2},c.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,4,2147483647,-2147483648),c.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):M(this,t,e,!0),e+4},c.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),c.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):M(this,t,e,!1),e+4},c.prototype.writeFloatLE=function(t,e,n){return U(this,t,e,!0,n)},c.prototype.writeFloatBE=function(t,e,n){return U(this,t,e,!1,n)},c.prototype.writeDoubleLE=function(t,e,n){return F(this,t,e,!0,n)},c.prototype.writeDoubleBE=function(t,e,n){return F(this,t,e,!1,n)},c.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var i,o=r-n;if(this===t&&n<e&&e<r)for(i=o-1;i>=0;--i)t[i+e]=this[i+n];else if(o<1e3||!c.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+e]=this[i+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+o),e);return o},c.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!c.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var o;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(o=e;o<n;++o)this[o]=t;else{var s=c.isBuffer(t)?t:Y(new c(t,r).toString()),u=s.length;for(o=0;o<n-e;++o)this[o+e]=s[o%u]}return this};var N=/[^+\/0-9A-Za-z-_]/g;function D(t){return t<16?"0"+t.toString(16):t.toString(16)}function Y(t,e){var n;e=e||1/0;for(var r=t.length,i=null,o=[],s=0;s<r;++s){if((n=t.charCodeAt(s))>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===r){(e-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;o.push(n)}else if(n<2048){if((e-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function L(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(N,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function q(t,e,n,r){for(var i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}}).call(this,n(1))},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ObjectChange=e.MessageType=e.PacketType=e.ProcessType=void 0,function(t){t[t.Agent=1]="Agent",t[t.Headup=2]="Headup",t[t.Player=3]="Player",t[t.Server=4]="Server",t[t.Master=5]="Master",t[t.Module=6]="Module"}(e.ProcessType||(e.ProcessType={})),function(t){t[t.Heartbeat=0]="Heartbeat",t[t.Handshake=1]="Handshake",t[t.Authenticate=2]="Authenticate",t[t.Messages=3]="Messages",t[t.FederationAdded=4]="FederationAdded",t[t.FederationRemoved=5]="FederationRemoved"}(e.PacketType||(e.PacketType={})),function(t){t[t.Null=0]="Null",t[t.ObjectChanges=1]="ObjectChanges",t[t.EventDispatch=2]="EventDispatch",t[t.ServiceRequest=3]="ServiceRequest",t[t.ServiceFulfill=4]="ServiceFulfill",t[t.ServiceReject=5]="ServiceReject"}(e.MessageType||(e.MessageType={})),function(t){t[t.CREATE=1]="CREATE",t[t.UPDATE=2]="UPDATE",t[t.DELETE=3]="DELETE"}(e.ObjectChange||(e.ObjectChange={}))},function(t,e,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),i=this&&this.__exportStar||function(t,e){for(var n in t)"default"===n||Object.prototype.hasOwnProperty.call(e,n)||r(e,t,n)};Object.defineProperty(e,"__esModule",{value:!0}),i(n(18),e),i(n(4),e),i(n(5),e),i(n(7),e),i(n(8),e),i(n(10),e),i(n(23),e),i(n(2),e),i(n(9),e),i(n(6),e),i(n(11),e),i(n(15),e),i(n(25),e),i(n(14),e),i(n(26),e),i(n(27),e),i(n(28),e),i(n(16),e)},function(t,e,n){"use strict";var r=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0}),e.Compressor=void 0;var i=n(0),o=function(){function t(){this.properties={},this.objects={},this.lastPropertyId=0,this.lastObjectId=0,this.buffer=null,this.index=0}return t.prototype.encode=function(t){for(var e in this.buffer=i.Buffer.allocUnsafe(8),this.index=0,t)t.hasOwnProperty(e)&&this.write(t[e],e);return this.addByte(0),i.Buffer.from(this.buffer.subarray(0,this.index))},t.prototype.write=function(t,e){var n,i,o=e?this.getOrAddProperty(e):32768,s=256&o?128:0;if(null==t)return s|=1,this.addByte(s),void this.addProperty(o,e);var u=typeof t;if("boolean"===u)return s|=t?3:2,this.addByte(s),void this.addProperty(o,e);if("number"!==u&&"bigint"!==u){if(null==t.$id)if(t instanceof Uint8Array){var c=t.byteLength;0!==c&&c<31?(s|=64,s|=c,this.addByte(s),this.addProperty(o,e),this.addBinary(t)):c<65536?(s|=64,this.addByte(s),this.addProperty(o,e),this.addUInt16(c),this.addBinary(t)):c<4294967296&&(s|=95,this.addByte(s),this.addProperty(o,e),this.addUInt32(c),this.addBinary(t))}else{if("string"==typeof t||t instanceof String){var a=this.index;this.addByte(0),this.addProperty(o,e);var h=this.addString(t.toString());return 0!==h&&h<32?(s|=96,s|=h):(s|=96,this.addByte(0)),void(this.buffer[a]=s)}if(t instanceof Array){s|=5,this.addByte(s),this.addProperty(o,e);try{for(var f=r(t),l=f.next();!l.done;l=f.next()){var d=l.value;this.write(d,null)}}catch(t){n={error:t}}finally{try{l&&!l.done&&(i=f.return)&&i.call(f)}finally{if(n)throw n.error}}this.addByte(0)}else if("object"!==u);else{for(var p in s|=4,this.addByte(s),this.addProperty(o,e),t)t.hasOwnProperty(p)&&this.write(t[p],p);this.addByte(0)}}else if(s|=8,s|=(d=this.getOrAddObjectId(t.$id))>>8&7,this.addByte(s),this.addProperty(o,e),this.addByte(255&d),0===d||2047===d)for(var y=0;y<t.$id.length;y+=2)this.addByte(parseInt(t.$id.substr(y,2),16))}else Number.isInteger(t)?t>=0&&t<24?(s|=32,s|=t,this.addByte(s),this.addProperty(o,e)):(s|=56,t<0&&(s|=4,t+=4294967296,t^=4294967295),t<256?(this.addByte(s),this.addProperty(o,e),this.addByte(t)):t<65536?(s|=1,this.addByte(s),this.addProperty(o,e),this.addUInt16(t)):(s|=2,this.addByte(s),this.addProperty(o,e),this.addUInt32(t))):(s|=6,this.addByte(s),this.addProperty(o,e),this.addFloat(t))},t.prototype.ensureBufferSize=function(t){if(t>this.buffer.length){var e=i.Buffer.allocUnsafe(1.5*t|0);this.buffer.copy(e,0,0,this.index),this.buffer=e}},t.prototype.addByte=function(t){this.ensureBufferSize(this.index+1),this.buffer.writeUInt8(t,this.index++)},t.prototype.addUInt16=function(t){this.ensureBufferSize(this.index+2),this.buffer.writeUInt16BE(t,this.index),this.index+=2},t.prototype.addUInt32=function(t){this.ensureBufferSize(this.index+4),this.buffer.writeUInt32BE(t,this.index),this.index+=4},t.prototype.addFloat=function(t){this.ensureBufferSize(this.index+4),this.buffer.writeFloatLE(t,this.index),this.index+=4},t.prototype.addProperty=function(t,e){e&&(this.addByte(255&t),0!==t&&511!==t||(this.addString(e),this.addByte(0)))},t.prototype.addString=function(t){this.ensureBufferSize(this.index+t.length);var e=this.buffer.write(t,this.index,t.length,"utf-8");return this.index+=e,e},t.prototype.addBinary=function(t){this.ensureBufferSize(this.index+t.length);var e=i.Buffer.from(t).copy(this.buffer,this.index);this.index+=e},t.prototype.getOrAddProperty=function(t){var e=this.properties[t];if(null!=e)return e;var n=0;return 511==++this.lastPropertyId&&(this.properties={},this.lastPropertyId=1,n=511),this.properties[t]=this.lastPropertyId,n},t.prototype.getOrAddObjectId=function(t){var e=this.objects[t];if(null!=e)return e;var n=0;return 2047==++this.lastObjectId&&(this.objects={},this.lastObjectId=1,n=2047),this.objects[t]=this.lastObjectId,n},t}();e.Compressor=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Decompressor=void 0;var r=n(0),i=function(){function t(){this.propertyStrings=[],this.objectIds=[]}return t.prototype.decode=function(t){this.buffer=t,this.index=0;for(var e={};this.decodeElement(e,null););return e},t.prototype.decodeElement=function(t,e){var n=this.readByte();if(0===n)return!1;var i=127&n,o=t?this.readProperty(n):null;switch(i){case 1:return t?t[o]=null:e.push(null),!0;case 2:return t?t[o]=!1:e.push(!1),!0;case 3:return t?t[o]=!0:e.push(!0),!0;case 4:for(var s={};this.decodeElement(s,null););return t?t[o]=s:e.push(s),!0;case 5:for(s=[];this.decodeElement(null,s););return t?t[o]=s:e.push(s),!0;case 6:s=this.readFloat();return t?t[o]=s:e.push(s),!0}if(8==(120&i)){var u=this.readByte();2047===(u|=(7&i)<<8)&&(this.objectIds=[],u=0);s=void 0;if(0===u)s=this.readObjectId(),this.objectIds.push(s);else{if(!(u<=this.objectIds.length))throw new Error("decompressor: invalid object "+(u-1)+" (should be < "+this.objectIds.length+")");s=this.objectIds[u-1]}return t?t[o]=s:e.push(s),!0}switch(96&i){case 32:var c=31&i;if(c<24)return t?t[o]=c:e.push(c),!0;s=0;switch(3&i){case 0:s=this.readByte();break;case 1:s=this.readUInt16();break;case 2:s=this.readUInt32()}return 0!=(4&i)&&(s^=4294967295,s-=4294967296),t?t[o]=s:e.push(s),!0;case 64:0===(a=31&i)?a=this.readUInt16():31===a&&(a=this.readUInt32());s=r.Buffer.from(this.buffer.buffer,this.index,a);return this.index+=a,t?t[o]=s:e.push(s),!0;case 96:var a;s=void 0;return s=0===(a=31&i)?this.readString():this.readStringWithSize(a),t?t[o]=s:e.push(s),!0}return!1},t.prototype.readProperty=function(t){var e=this.readByte();if(0!=(128&t)&&(e|=256),511===e&&(this.propertyStrings=[],e=0),0===e){var n=this.readString();return this.propertyStrings.push(n),n}if(--e>=this.propertyStrings.length)throw new Error("decompressor: invalid property "+e+" (should be < "+this.propertyStrings.length+")");return this.propertyStrings[e]},t.prototype.readByte=function(){return this.buffer.readUInt8(this.index++)},t.prototype.readUInt16=function(){var t=this.buffer.readUInt16BE(this.index);return this.index+=2,t},t.prototype.readUInt32=function(){var t=this.buffer.readUInt32BE(this.index);return this.index+=4,t},t.prototype.readFloat=function(){var t=this.buffer.readFloatLE(this.index);return this.index+=4,t},t.prototype.readObjectId=function(){var t={$id:r.Buffer.from(this.buffer.buffer,this.index,12).toString("hex")};return this.index+=12,t},t.prototype.readString=function(){for(var t=this.index;0!==this.buffer.readUInt8(t);)++t;var e=this.buffer.subarray(this.index,t),n=new TextDecoder("utf-8").decode(e);return this.index=t+1,n},t.prototype.readStringWithSize=function(t){var e=this.buffer.subarray(this.index,this.index+t),n=new TextDecoder("utf-8").decode(e);return this.index+=t,n},t}();e.Decompressor=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.generateObjectId=void 0;var r=n(0),i=0;var o=function(t){for(var e=new Uint8Array(t),n=0;n<t;++n)e[n]=Math.floor(256*Math.random());return e}(5);e.generateObjectId=function(){var t=~~(Date.now()/1e3),e=i=(i+1)%16777215,n=r.Buffer.alloc(12);return n[3]=255&t,n[2]=t>>8&255,n[1]=t>>16&255,n[0]=t>>24&255,n[4]=o[0],n[5]=o[1],n[6]=o[2],n[7]=o[3],n[8]=o[4],n[11]=255&e,n[10]=e>>8&255,n[9]=e>>16&255,n.toString("hex")}},function(t,e,n){"use strict";(function(t){Object.defineProperty(e,"__esModule",{value:!0}),e.EmbeddedConnection=void 0;var r=n(4),i=n(5),o=function(){function e(){if(this.onOpenCallback=null,this.onCloseCallback=null,this.onPacketCallback=null,this.compressor=null,this.decompressor=null,!window.parent)throw Error("EmbeddedConnection: missing window.parent")}return e.prototype.onOpen=function(t){this.onOpenCallback=t},e.prototype.onClose=function(t){this.onCloseCallback=t},e.prototype.onPacket=function(t){this.onPacketCallback=t},e.prototype.open=function(){var e=this;this.messageListener?console.warn("EmbeddedConnection.open(): session is already opened"):(this.compressor=new r.Compressor,this.decompressor=new i.Decompressor,this.messageListener=function(n){if(n.source===window.parent)if(n.data.packet)if(e.onPacketCallback){var r=n.data.packet,i=t.from(r,0,r.byteLength),o=e.decompressor.decode(i);console.log("iframe.on-packet: "+JSON.stringify(o)),e.onPacketCallback(o)}else console.error("EmbeddedConnection: missing onPacket callback");else n.data.open?(console.log("iframe.on-open"),e.onOpenCallback&&e.onOpenCallback()):n.data.close&&(console.log("iframe.on-close"),window.removeEventListener("message",e.messageListener),e.messageListener=null,e.onCloseCallback&&e.onCloseCallback())},window.addEventListener("message",this.messageListener),window.parent.postMessage({open:!0},"*"),console.log("iframe.init"))},e.prototype.close=function(){this.messageListener?window.parent.postMessage({close:!0},"*"):console.warn("EmbeddedConnection.close(): session is not open")},e.prototype.sendPacket=function(t){console.log("iframe.sendPacket: "+JSON.stringify(t)),window.parent.postMessage({packet:this.compressor.encode(t)},"*")},e}();e.EmbeddedConnection=o}).call(this,n(0).Buffer)},function(t,e,n){"use strict";var r=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0}),e.Federation=void 0;var i=n(2),o=n(0),s=n(6),u=n(9),c=function(){function t(t,e){this.runtime=t,this.federationId=e,this.objectInstances={},this.undefinedInstances=[],this.objectClasses={},this.eventsObservers={},this.serviceProviders={}}return t._isObject=function(t){return t&&"object"==typeof t},t.prototype.objects=function(t){var e=this.objectClasses[t];return e||(e=new u.ObjectClass(this,t),this.objectClasses[t]=e),e},t.prototype.findObject=function(t){for(var e in this.objectInstances)if(this.objectInstances.hasOwnProperty(e)&&t(this.objectInstances[e]))return this.objectInstances[e];return null},t.prototype.getObjectOrNull=function(t){return this.objectInstances.hasOwnProperty(t)?this.objectInstances[t]:null},t.prototype.processNativeChanges=function(t){var e,n,o=this.getOrCreateObjectRef(t.i.$id);if(o._class||(o._class=t.c),!o.$class){var s=this.objects(o._class);o.$class=s;try{for(var c=r(s.propertyNames),a=c.next();!a.done;a=c.next()){var h=a.value;u.defineObjectProperty(this,o,h),o[h+"$changed"]=!1}}catch(t){e={error:t}}finally{try{a&&!a.done&&(n=c.return)&&n.call(c)}finally{if(e)throw e.error}}}var f=t.t===i.ObjectChange.CREATE,l=t.t===i.ObjectChange.DELETE;f?o.$defined||this.undefinedInstances.push(o):l&&(o._defined=!1,o._defined$changed=!0);var d=t.p;if(d)for(var p in d){if(d.hasOwnProperty(p))u.defineObjectProperty(this,o,p),o["-"+p]=this.decodeObjectIds(d[p].v),f||(o[p+"$changed"]=!0)}if((l||o.$defined)&&(o.$class.subject.next(o),o._defined$changed=!1),l){delete this.objectInstances[t.i.$id];var y=this.undefinedInstances.findIndex((function(t){return t===o}));-1!==y&&delete this.undefinedInstances[y]}if(d)for(var p in d)d.hasOwnProperty(p)&&(o[p+"$changed"]=!1);this.defineUndefinedInstances()},t.prototype.defineUndefinedInstances=function(){for(var t=this;;){var e=this.undefinedInstances.findIndex((function(e){return!t.objectHasUndefinedRefs(e)}));if(-1===e)return;var n=this.undefinedInstances[e];for(var r in this.undefinedInstances.splice(e,1),n)n.hasOwnProperty(r)&&!r.startsWith("$")&&r.endsWith("$changed")&&(n[r]=!0);for(var r in n._defined=!0,n.$class.subject.next(n),n)n.hasOwnProperty(r)&&!r.startsWith("$")&&r.endsWith("$changed")&&(n[r]=!1)}},t.prototype.createObjectInstance=function(t){var e=this.getOrCreateObjectRef(s.generateObjectId());return e._class=t,e.$class=this.objects(t),e._defined=!0,this.runtime.sendObjectChangesToRuntime(this.federationId,e,t,i.ObjectChange.CREATE,null,null),e},t.prototype.objectPropertyChanged=function(t,e,n){this.runtime.sendObjectChangesToRuntime(this.federationId,t,t._class,i.ObjectChange.UPDATE,e,n)},t.prototype.getOrCreateObjectRef=function(t){var e=this,n=this.objectInstances[t];if(!n){var r={_defined:!1,_defined$changed:!1};Object.defineProperty(r,"$id",{get:function(){return t}}),Object.defineProperty(r,"$defined",{get:function(){return r._defined}}),Object.defineProperty(r,"$defined$changed",{get:function(){return r._defined$changed}}),Object.defineProperty(r,"$deletable",{get:function(){return!1}}),Object.defineProperty(r,"$deletable$wanted",{get:function(){return!1}}),Object.defineProperty(r,"$delete",{value:function(){e.runtime.sendObjectChangesToRuntime(e.federationId,{$id:t},r._class,i.ObjectChange.DELETE,null,null),r._defined=!1}}),n=r,this.objectInstances[t]=n}return n},t.prototype.decodeObjectIds=function(e){var n=this;if(null!=e){var r=e.$id;if(null!=r)return this.getOrCreateObjectRef(r);if(e instanceof o.Buffer)return e;if(e instanceof Array){var i=[];return e.forEach((function(t){return i.push(n.decodeObjectIds(t))})),i}if(t._isObject(e)){var s={};for(var u in e)e.hasOwnProperty(u)&&(s[u]=this.decodeObjectIds(e[u]));return s}}return e},t.prototype.objectHasUndefinedRefs=function(t){for(var e in t)if(t.hasOwnProperty(e)&&e.startsWith("-")&&t.hasOwnProperty(e.substr(1)+"$changed")&&this.valueHasUndefinedRefs(t[e]))return!0;return!1},t.prototype.valueHasUndefinedRefs=function(e){var n=this;if(null==e)return!1;var r=e.$id;if(null!=r)return!this.objectInstances.hasOwnProperty(r)||!this.objectInstances[r]._defined;if(e instanceof o.Buffer)return!1;if(e instanceof Array)return e.some((function(t){return n.valueHasUndefinedRefs(t)}));if(t._isObject(e)){for(var i in e)if(e.hasOwnProperty(i)&&this.valueHasUndefinedRefs(e[i]))return!0;return!1}return!1},t.prototype.observeEvents=function(t,e){this.eventsObservers[t]=e},t.prototype.dispatchEvent=function(t,e){this.dispatchEventScript(t,e),this.runtime.sendEventNotificationToRuntime(this.federationId,t,e)},t.prototype.dispatchEventScript=function(t,e){var n=this.eventsObservers[t];n&&n(e)},t.prototype.provideService=function(t,e){this.serviceProviders[t]=e},t.prototype.requestService=function(t,e){return this.requestLocalService(t,e)||this.runtime.sendServiceRequestToRuntime(this.federationId,t,e)},t.prototype.requestLocalService=function(t,e){var n=this.serviceProviders[t];return n?n(e):null},t}();e.Federation=c},function(t,e,n){"use strict";var r=this&&this.__generator||function(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},i=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0}),e.ObjectClass=e.defineObjectProperty=void 0;var o=Reflect.getOwnPropertyDescriptor,s=n(17);function u(t,e,n){if(!o(e,n)){var r="-"+n;Object.defineProperty(e,n,{enumerable:!0,get:function(){return e[r]},set:function(i){e[r]=i,t.objectPropertyChanged(e,n,i)}})}}e.defineObjectProperty=u;var c=function(){function t(t,e){this.federation=t,this.name=e,this.subject=new s.Subject,this.propertyNames=[]}return t.prototype.define=function(t){var e,n;try{for(var r=i(t),o=r.next();!o.done;o=r.next()){var s=o.value;this.propertyNames.push(s)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}},t.prototype.create=function(t){var e,n,r=this.federation.createObjectInstance(this.name);try{for(var o=i(this.propertyNames),s=o.next();!s.done;s=o.next()){var c=s.value;u(this.federation,r,c)}}catch(t){e={error:t}}finally{try{s&&!s.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}if(t)for(var c in t)t.hasOwnProperty(c)&&(u(this.federation,r,c),r[c]=t[c]);return r},t.prototype.subscribe=function(t,e,n){return this.subject.subscribe(t,e,n)},t.prototype[Symbol.iterator]=function(){var t,e,n,i,o,s;return r(this,(function(r){switch(r.label){case 0:for(n in t=this.federation.objectInstances,e=[],t)e.push(n);i=0,r.label=1;case 1:return i<e.length?(o=e[i],t.hasOwnProperty(o)&&(s=t[o])._defined&&s.$class===this?[4,s]:[3,3]):[3,4];case 2:r.sent(),r.label=3;case 3:return i++,[3,1];case 4:return[2]}}))},t.prototype.find=function(t){var e,n;try{for(var r=i(this),o=r.next();!o.done;o=r.next()){var s=o.value;if(t(s))return s}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}return null},t}();e.ObjectClass=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.InputDevicePoster=void 0;var r=n(22),i=function(){function t(){this.inputDeviceAdapter=null,this.inputDeviceAdapter=new r.InputDeviceAdapter(this)}return t.prototype.keyDown=function(t){window.parent.postMessage({keyDown:{keyCode:t}},"*")},t.prototype.keyUp=function(t){window.parent.postMessage({keyUp:{keyCode:t}},"*")},t.prototype.mouseUpdate=function(t,e,n,r,i){window.parent.postMessage({mouseUpdate:{x:t,y:e,buttons:n,count:r,timestamp:i}},"*")},t.prototype.mouseWheel=function(t,e,n,r){window.parent.postMessage({mouseWheel:{x:t,y:e,dx:n,dy:r}},"*")},t}();e.InputDevicePoster=i},function(t,e,n){"use strict";(function(t,r){var i,o=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),s=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0}),e.Runtime=void 0,n(13);var u=n(8),c=n(2),a=n(14),h=n(17),f=function(e){function n(){var t=e.call(this)||this;return t.configuration=null,t.federations={},t.onStartup=new h.Subject,t.onError=null,t.connection=null,t.connectionIsOpen=!1,t.serviceRequests={},t.lastServiceRequestId=0,t.authentication=null,t.outgoingPayloads=[],t.outgoingMessages=[],t.outgoingImmediate=null,t}return o(n,e),n.toError=function(t){if(null==t)return null;if("[object Error]"===Object.prototype.toString.call(t))return t;if(t.message){var e=t.stackX?t.stackX:t.stack?t.stack:t.file?t.name+": "+t.message+"\n  at "+t.file+":"+t.line+" ("+t.file+":"+t.line+":1)":null;return(n=new Error(t.message)).name=t.name,n.stack=e||"",e&&(n.stackX=e),n}try{var n;return(n=new Error(JSON.stringify(t))).stack="",n}catch(t){}return t},n.toReason=function(t){return{name:Object.prototype.toString.call(t),message:t.message,stack:t.stack}},n.prototype.startup=function(t){var e=this;this.configuration=t,this.connection=this.configuration.newConnection(),this.connection.onOpen((function(){e.connectionIsOpen=!0;var t=e.outgoingPayloads;for(var n in e.outgoingPayloads=null,e.enqueueOrSendOutgoingPayload({m:c.PacketType.Handshake,id:e.configuration.processId,pt:e.configuration.processType}),e.configuration.subjectId&&e.enqueueOrSendOutgoingPayload({m:c.PacketType.Authenticate,a:"",s:e.configuration.subjectId,n:"",i:""}),e.federations)e.federations.hasOwnProperty(n)&&e.enqueueOrSendOutgoingPayload({m:c.PacketType.FederationAdded,x:n,id:e.configuration.processId});e.trySendAuthenticateMessage(),e.outgoingPayloads=t})),this.connection.onClose((function(){e.connectionIsOpen=!1})),this.connection.onPacket((function(t){try{e.dispatchPacket(t)}catch(t){e.onError&&e.onError(t)}})),this.connection.open(),this.onStartup.next(),this.onStartup.complete()},n.prototype.authenticate=function(t,e,n,r){this.authentication={accessToken:t,subjectId:e,nickname:n,imageUrl:r},this.trySendAuthenticateMessage()},n.prototype.trySendAuthenticateMessage=function(){this.connectionIsOpen&&this.authentication&&this.enqueueOrSendOutgoingPayload({m:c.PacketType.Authenticate,a:this.authentication.accessToken,s:this.authentication.subjectId,n:this.authentication.nickname,i:this.authentication.imageUrl})},n.prototype.joinFederation=function(t){var e=new u.Federation(this,t);return this.federations[t]=e,this.connectionIsOpen&&this.enqueueOrSendOutgoingPayload({m:c.PacketType.FederationAdded,x:t,id:this.configuration.processId}),e},n.prototype.leaveFederation=function(t){this.federations.hasOwnProperty(t)&&(this.enqueueOrSendOutgoingPayload({m:c.PacketType.FederationRemoved,x:t,id:this.configuration.processId}),delete this.federations[t])},n.prototype.dispatchPacket=function(t){var e,n;if(t.m===c.PacketType.Messages)try{for(var r=s(t.mm),i=r.next();!i.done;i=r.next()){var o=i.value;switch(o.m){case c.MessageType.ObjectChanges:this._dispatchObjectChangesFromRemote(o);break;case c.MessageType.EventDispatch:this._dispatchEventFromRemote(o);break;case c.MessageType.ServiceRequest:this._dispatchServiceRequestFromRemote(o);break;case c.MessageType.ServiceFulfill:this._dispatchServiceFulfillFromRemote(o);break;case c.MessageType.ServiceReject:this._dispatchServiceRejectFromRemote(o)}}}catch(t){e={error:t}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}},n.prototype.sendObjectChangesToRuntime=function(t,e,n,r,i,o){var s={};null!=i&&(s[i]={v:o,t:0}),this.enqueueOrSendOutgoingPayload({m:c.PacketType.Messages,mm:[{m:c.MessageType.ObjectChanges,x:t,i:e,c:n,t:r,p:s}]})},n.prototype.sendEventNotificationToRuntime=function(t,e,n){this.enqueueOrSendOutgoingPayload({m:c.PacketType.Messages,mm:[{m:c.MessageType.EventDispatch,x:t,e:e,v:n}]})},n.prototype.sendServiceRequestToRuntime=function(t,e,n){var r=this,i=++this.lastServiceRequestId;return new Promise((function(o,s){r.serviceRequests[i]={federationId:t,resolve:o,reject:s};try{r.enqueueOrSendOutgoingPayload({m:c.PacketType.Messages,mm:[{m:c.MessageType.ServiceRequest,x:t,s:e,r:i,v:n}]})}catch(t){delete r.serviceRequests[i],s(t)}}))},n.prototype.enqueueOrSendOutgoingPayload=function(t){var e,n;if(this.connectionIsOpen){if(this.outgoingPayloads){try{for(var r=s(this.outgoingPayloads),i=r.next();!i.done;i=r.next()){var o=i.value;this.connection.sendPacket(o)}}catch(t){e={error:t}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}this.outgoingPayloads=null}t.m===c.PacketType.Messages?this.enqueueOutgoingMessages(t.mm):(this.flushOutgoingMessages(),this.connection.sendPacket(t))}else this.outgoingPayloads.push(t)},n.prototype.enqueueOutgoingMessages=function(e){var n,r,i=this;try{for(var o=s(e),u=o.next();!u.done;u=o.next()){var c=u.value;this.outgoingMessages.push(c)}}catch(t){n={error:t}}finally{try{u&&!u.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}this.outgoingImmediate||(this.outgoingImmediate=t((function(){i.outgoingImmediate=null,i.flushOutgoingMessages()})))},n.prototype.flushOutgoingMessages=function(){this.outgoingMessages.length&&(this.connection.sendPacket({m:c.PacketType.Messages,mm:this.outgoingMessages}),this.outgoingMessages=[]),this.outgoingImmediate&&(r(this.outgoingImmediate),this.outgoingImmediate=null)},n.prototype._dispatchObjectChangesFromRemote=function(t){var e=this.federations[t.x];e&&e.processNativeChanges(t)},n.prototype._dispatchEventFromRemote=function(t){var e=this.federations[t.x];if(e){var n=e.decodeObjectIds(t.v);e.dispatchEventScript(t.e,n)}},n.prototype._dispatchServiceRequestFromRemote=function(t){var e=this,r=this.federations[t.x];if(!r)return this.enqueueOrSendOutgoingPayload({m:c.PacketType.Messages,mm:[{m:c.MessageType.ServiceReject,r:t.r,v:n.toReason(new Error("unknown federation: "+t.x))}]});var i=r.decodeObjectIds(t.v),o=r.requestLocalService(t.s,i);if(!o)return this.enqueueOrSendOutgoingPayload({m:c.PacketType.Messages,mm:[{m:c.MessageType.ServiceReject,r:t.r,v:n.toReason(new Error("unknown service: "+t.s))}]});o.then((function(n){e.enqueueOrSendOutgoingPayload({m:c.PacketType.Messages,mm:[{m:c.MessageType.ServiceFulfill,r:t.r,v:n}]})})).catch((function(r){e.enqueueOrSendOutgoingPayload({m:c.PacketType.Messages,mm:[{m:c.MessageType.ServiceReject,r:t.r,v:n.toReason(r)}]})}))},n.prototype._dispatchServiceFulfillFromRemote=function(t){var e=this.serviceRequests[t.r];if(e){delete this.serviceRequests[t.r];var n=this.federations[e.federationId];if(n){var r=n.decodeObjectIds(t.v);e.resolve(r)}else e.reject(new Error("federation not found"))}else console.error("_dispatchServiceFulfillFromRemote: request "+t.r+" not found")},n.prototype._dispatchServiceRejectFromRemote=function(t){var e=this.serviceRequests[t.r];if(e){delete this.serviceRequests[t.r];var r=this.federations[e.federationId];if(r){var i=r.decodeObjectIds(t.v);e.reject(n.toError(i))}else e.reject(new Error("federation not found"))}else console.error("_dispatchServiceRejectFromRemote: request "+t.r+" not found")},n}(a.RuntimeSession);e.Runtime=f}).call(this,n(12).setImmediate,n(12).clearImmediate)},function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout((function(){t._onTimeout&&t._onTimeout()}),e))},n(13),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(1))},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,i,o,s,u,c=1,a={},h=!1,f=t.document,l=Object.getPrototypeOf&&Object.getPrototypeOf(t);l=l&&l.setTimeout?l:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick((function(){p(t)}))}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?t.MessageChannel?((o=new MessageChannel).port1.onmessage=function(t){p(t.data)},r=function(t){o.port2.postMessage(t)}):f&&"onreadystatechange"in f.createElement("script")?(i=f.documentElement,r=function(t){var e=f.createElement("script");e.onreadystatechange=function(){p(t),e.onreadystatechange=null,i.removeChild(e),e=null},i.appendChild(e)}):r=function(t){setTimeout(p,0,t)}:(s="setImmediate$"+Math.random()+"$",u=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(s)&&p(+e.data.slice(s.length))},t.addEventListener?t.addEventListener("message",u,!1):t.attachEvent("onmessage",u),r=function(e){t.postMessage(s+e,"*")}),l.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var i={callback:t,args:e};return a[c]=i,r(c),c++},l.clearImmediate=d}function d(t){delete a[t]}function p(t){if(h)setTimeout(p,0,t);else{var e=a[t];if(e){h=!0;try{!function(t){var e=t.callback,n=t.args;switch(n.length){case 0:e();break;case 1:e(n[0]);break;case 2:e(n[0],n[1]);break;case 3:e(n[0],n[1],n[2]);break;default:e.apply(void 0,n)}}(e)}finally{d(t),h=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(1),n(24))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.RuntimeSession=void 0;var r=function(){};e.RuntimeSession=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.RuntimeConfiguration=void 0;var r=n(2),i=n(6),o=n(16),s=n(7),u=function(){function t(){}return t.autoRedirect=function(){window===window.parent&&(window.location.href="https://warstage.net/200915.1827/index.html?module="+encodeURI(window.location.toString()))},t.autoDetect=function(){var e=new t,n=new URLSearchParams(document.location.search.substring(1)),u=n.get("connect");u?(e.newConnection=function(){return new o.WebSocketConnection(u)},e.processType=r.ProcessType.Agent):(e.newConnection=function(){return new s.EmbeddedConnection},e.processType=r.ProcessType.Module);var c=n.get("pt");return c&&(e.processType=Number(c)),e.processId=n.get("pid")||i.generateObjectId(),e.subjectId=n.get("sub"),e},t}();e.RuntimeConfiguration=u},function(t,e,n){"use strict";(function(t,r){var i=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0}),e.WebSocketConnection=void 0;var o=n(4),s=n(5),u=function(){function e(t){this.url=t,this.webSocket=null,this.isOpen=!1,this.compressor=null,this.decompressor=null,this.queueOut=[],this.queueIn=[],this.reader=null}return e.toHexString=function(t){return Array.from(t,(function(t){return("0"+(255&t).toString(16)).slice(-2)})).join("")},e.prototype.reset=function(){this.webSocket=null,this.isOpen=!1,this.compressor=null,this.decompressor=null,this.queueOut=[],this.queueIn=[],this.reader=null},e.prototype.onOpen=function(t){this.onOpenCallback=t},e.prototype.onClose=function(t){this.onCloseCallback=t},e.prototype.onPacket=function(t){this.onPacketCallback=t},e.prototype.open=function(){var e=this;this.reopener||(this.reopener=t.setInterval((function(){e.webSocket||e.open()}),500)),this.onPacket&&(this.webSocket=new WebSocket(this.url,"warstage"),this.webSocket.addEventListener("open",(function(){var t,n;e.isOpen=!0,e.compressor=new o.Compressor,e.decompressor=new s.Decompressor,e.onOpenCallback&&e.onOpenCallback();try{for(var r=i(e.queueOut),u=r.next();!u.done;u=r.next()){var c=u.value,a=e.compressor.encode({p:c});e.webSocket.send(a.buffer)}}catch(e){t={error:e}}finally{try{u&&!u.done&&(n=r.return)&&n.call(r)}finally{if(t)throw t.error}}e.queueOut=[]})),this.webSocket.addEventListener("close",(function(){e.reset(),e.onCloseCallback&&e.onCloseCallback()})),this.webSocket.addEventListener("error",(function(){e.reset()})),this.webSocket.addEventListener("message",(function(t){e.queueIn.push(t.data),e.tryProcessQueueIn()})))},e.prototype.tryProcessQueueIn=function(){var t=this;if(!this.reader&&this.queueIn.length){var e=new FileReader;e.onload=function(){if(e===t.reader){t.reader=null;var n=e.result;try{var i=t.decompressor.decode(r.from(n,0,n.byteLength));t.onPacketCallback(i.p),t.tryProcessQueueIn()}catch(e){t.isOpen=!1,t.webSocket.close()}}},this.reader=e,e.readAsArrayBuffer(this.queueIn.shift())}},e.prototype.close=function(){this.isOpen=!1,this.webSocket&&this.webSocket.close(),this.reopener&&(clearInterval(this.reopener),this.reopener=null),this.reset()},e.prototype.sendPacket=function(t){if(this.isOpen){var e=this.compressor.encode({p:t});this.webSocket.send(e.buffer)}else this.queueOut.push(t)},e}();e.WebSocketConnection=u}).call(this,n(1),n(0).Buffer)},function(t,e,n){"use strict";n.r(e),n.d(e,"Observable",(function(){return S})),n.d(e,"ConnectableObservable",(function(){return C})),n.d(e,"GroupedObservable",(function(){return M})),n.d(e,"observable",(function(){return g})),n.d(e,"Subject",(function(){return T})),n.d(e,"BehaviorSubject",(function(){return U})),n.d(e,"ReplaySubject",(function(){return nt})),n.d(e,"AsyncSubject",(function(){return it})),n.d(e,"asap",(function(){return dt})),n.d(e,"asapScheduler",(function(){return lt})),n.d(e,"async",(function(){return yt})),n.d(e,"asyncScheduler",(function(){return pt})),n.d(e,"queue",(function(){return q})),n.d(e,"queueScheduler",(function(){return L})),n.d(e,"animationFrame",(function(){return mt})),n.d(e,"animationFrameScheduler",(function(){return vt})),n.d(e,"VirtualTimeScheduler",(function(){return gt})),n.d(e,"VirtualAction",(function(){return wt})),n.d(e,"Scheduler",(function(){return D})),n.d(e,"Subscription",(function(){return d})),n.d(e,"Subscriber",(function(){return b})),n.d(e,"Notification",(function(){return Z})),n.d(e,"NotificationKind",(function(){return H})),n.d(e,"pipe",(function(){return _})),n.d(e,"noop",(function(){return _t})),n.d(e,"identity",(function(){return w})),n.d(e,"isObservable",(function(){return Et})),n.d(e,"ArgumentOutOfRangeError",(function(){return St})),n.d(e,"EmptyError",(function(){return xt})),n.d(e,"ObjectUnsubscribedError",(function(){return I})),n.d(e,"UnsubscriptionError",(function(){return l})),n.d(e,"TimeoutError",(function(){return It})),n.d(e,"bindCallback",(function(){return jt})),n.d(e,"bindNodeCallback",(function(){return Ct})),n.d(e,"combineLatest",(function(){return Vt})),n.d(e,"concat",(function(){return ie})),n.d(e,"defer",(function(){return oe})),n.d(e,"empty",(function(){return W})),n.d(e,"forkJoin",(function(){return se})),n.d(e,"from",(function(){return Gt})),n.d(e,"fromEvent",(function(){return ce})),n.d(e,"fromEventPattern",(function(){return ae})),n.d(e,"generate",(function(){return he})),n.d(e,"iif",(function(){return le})),n.d(e,"interval",(function(){return pe})),n.d(e,"merge",(function(){return be})),n.d(e,"never",(function(){return me})),n.d(e,"of",(function(){return K})),n.d(e,"onErrorResumeNext",(function(){return ge})),n.d(e,"pairs",(function(){return we})),n.d(e,"partition",(function(){return Oe})),n.d(e,"race",(function(){return Pe})),n.d(e,"range",(function(){return ke})),n.d(e,"throwError",(function(){return J})),n.d(e,"timer",(function(){return Ce})),n.d(e,"using",(function(){return Me})),n.d(e,"zip",(function(){return Be})),n.d(e,"scheduled",(function(){return Xt})),n.d(e,"EMPTY",(function(){return $})),n.d(e,"NEVER",(function(){return ve})),n.d(e,"config",(function(){return u}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function o(t){return"function"==typeof t}var s=!1,u={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;s=t},get useDeprecatedSynchronousErrorHandling(){return s}};function c(t){setTimeout((function(){throw t}),0)}var a={closed:!0,next:function(t){},error:function(t){if(u.useDeprecatedSynchronousErrorHandling)throw t;c(t)},complete:function(){}},h=function(){return Array.isArray||function(t){return t&&"number"==typeof t.length}}();function f(t){return null!==t&&"object"==typeof t}var l=function(){function t(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t}(),d=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._ctorUnsubscribe=!0,this._unsubscribe=t)}return t.prototype.unsubscribe=function(){var e;if(!this.closed){var n=this._parentOrParents,r=this._ctorUnsubscribe,i=this._unsubscribe,s=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,n instanceof t)n.remove(this);else if(null!==n)for(var u=0;u<n.length;++u){n[u].remove(this)}if(o(i)){r&&(this._unsubscribe=void 0);try{i.call(this)}catch(t){e=t instanceof l?p(t.errors):[t]}}if(h(s)){u=-1;for(var c=s.length;++u<c;){var a=s[u];if(f(a))try{a.unsubscribe()}catch(t){e=e||[],t instanceof l?e=e.concat(p(t.errors)):e.push(t)}}}if(e)throw new l(e)}},t.prototype.add=function(e){var n=e;if(!e)return t.EMPTY;switch(typeof e){case"function":n=new t(e);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if(!(n instanceof t)){var r=n;(n=new t)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}var i=n._parentOrParents;if(null===i)n._parentOrParents=this;else if(i instanceof t){if(i===this)return n;n._parentOrParents=[i,this]}else{if(-1!==i.indexOf(this))return n;i.push(this)}var o=this._subscriptions;return null===o?this._subscriptions=[n]:o.push(n),n},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var n=e.indexOf(t);-1!==n&&e.splice(n,1)}},t.EMPTY=function(t){return t.closed=!0,t}(new t),t}();function p(t){return t.reduce((function(t,e){return t.concat(e instanceof l?e.errors:e)}),[])}var y=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}(),b=function(t){function e(n,r,i){var o=t.call(this)||this;switch(o.syncErrorValue=null,o.syncErrorThrown=!1,o.syncErrorThrowable=!1,o.isStopped=!1,arguments.length){case 0:o.destination=a;break;case 1:if(!n){o.destination=a;break}if("object"==typeof n){n instanceof e?(o.syncErrorThrowable=n.syncErrorThrowable,o.destination=n,n.add(o)):(o.syncErrorThrowable=!0,o.destination=new v(o,n));break}default:o.syncErrorThrowable=!0,o.destination=new v(o,n,r,i)}return o}return i(e,t),e.prototype[y]=function(){return this},e.create=function(t,n,r){var i=new e(t,n,r);return i.syncErrorThrowable=!1,i},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},e}(d),v=function(t){function e(e,n,r,i){var s,u=t.call(this)||this;u._parentSubscriber=e;var c=u;return o(n)?s=n:n&&(s=n.next,r=n.error,i=n.complete,n!==a&&(o((c=Object.create(n)).unsubscribe)&&u.add(c.unsubscribe.bind(c)),c.unsubscribe=u.unsubscribe.bind(u))),u._context=c,u._next=s,u._error=r,u._complete=i,u}return i(e,t),e.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;u.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},e.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber,n=u.useDeprecatedSynchronousErrorHandling;if(this._error)n&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)n?(e.syncErrorValue=t,e.syncErrorThrown=!0):c(t),this.unsubscribe();else{if(this.unsubscribe(),n)throw t;c(t)}}},e.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var n=function(){return t._complete.call(t._context)};u.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}},e.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){if(this.unsubscribe(),u.useDeprecatedSynchronousErrorHandling)throw t;c(t)}},e.prototype.__tryOrSetError=function(t,e,n){if(!u.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,n)}catch(e){return u.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0,!0):(c(e),!0)}return!1},e.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},e}(b);function m(t){for(;t;){var e=t,n=e.closed,r=e.destination,i=e.isStopped;if(n||i)return!1;t=r&&r instanceof b?r:null}return!0}var g=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}();function w(t){return t}function _(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return E(t)}function E(t){return 0===t.length?w:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var S=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r=this.operator,i=function(t,e,n){if(t){if(t instanceof b)return t;if(t[y])return t[y]()}return t||e||n?new b(t,e,n):new b(a)}(t,e,n);if(r?i.add(r.call(i,this.source)):i.add(this.source||u.useDeprecatedSynchronousErrorHandling&&!i.syncErrorThrowable?this._subscribe(i):this._trySubscribe(i)),u.useDeprecatedSynchronousErrorHandling&&i.syncErrorThrowable&&(i.syncErrorThrowable=!1,i.syncErrorThrown))throw i.syncErrorValue;return i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){u.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),m(t)?t.error(e):console.warn(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=x(e))((function(e,r){var i;i=n.subscribe((function(e){try{t(e)}catch(t){r(t),i&&i.unsubscribe()}}),r,e)}))},t.prototype._subscribe=function(t){var e=this.source;return e&&e.subscribe(t)},t.prototype[g]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?this:E(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=x(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function x(t){if(t||(t=u.Promise||Promise),!t)throw new Error("no Promise impl found");return t}var I=function(){function t(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return t.prototype=Object.create(Error.prototype),t}(),O=function(t){function e(e,n){var r=t.call(this)||this;return r.subject=e,r.subscriber=n,r.closed=!1,r}return i(e,t),e.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,e=t.observers;if(this.subject=null,e&&0!==e.length&&!t.isStopped&&!t.closed){var n=e.indexOf(this.subscriber);-1!==n&&e.splice(n,1)}}},e}(d),P=function(t){function e(e){var n=t.call(this,e)||this;return n.destination=e,n}return i(e,t),e}(b),T=function(t){function e(){var e=t.call(this)||this;return e.observers=[],e.closed=!1,e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return i(e,t),e.prototype[y]=function(){return new P(this)},e.prototype.lift=function(t){var e=new j(this,this);return e.operator=t,e},e.prototype.next=function(t){if(this.closed)throw new I;if(!this.isStopped)for(var e=this.observers,n=e.length,r=e.slice(),i=0;i<n;i++)r[i].next(t)},e.prototype.error=function(t){if(this.closed)throw new I;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var e=this.observers,n=e.length,r=e.slice(),i=0;i<n;i++)r[i].error(t);this.observers.length=0},e.prototype.complete=function(){if(this.closed)throw new I;this.isStopped=!0;for(var t=this.observers,e=t.length,n=t.slice(),r=0;r<e;r++)n[r].complete();this.observers.length=0},e.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},e.prototype._trySubscribe=function(e){if(this.closed)throw new I;return t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){if(this.closed)throw new I;return this.hasError?(t.error(this.thrownError),d.EMPTY):this.isStopped?(t.complete(),d.EMPTY):(this.observers.push(t),new O(this,t))},e.prototype.asObservable=function(){var t=new S;return t.source=this,t},e.create=function(t,e){return new j(t,e)},e}(S),j=function(t){function e(e,n){var r=t.call(this)||this;return r.destination=e,r.source=n,r}return i(e,t),e.prototype.next=function(t){var e=this.destination;e&&e.next&&e.next(t)},e.prototype.error=function(t){var e=this.destination;e&&e.error&&this.destination.error(t)},e.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},e.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):d.EMPTY},e}(T);var k=function(){function t(t){this.connectable=t}return t.prototype.call=function(t,e){var n=this.connectable;n._refCount++;var r=new A(t,n),i=e.subscribe(r);return r.closed||(r.connection=n.connect()),i},t}(),A=function(t){function e(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return i(e,t),e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._refCount;if(e<=0)this.connection=null;else if(t._refCount=e-1,e>1)this.connection=null;else{var n=this.connection,r=t._connection;this.connection=null,!r||n&&r!==n||r.unsubscribe()}}else this.connection=null},e}(b),C=function(t){function e(e,n){var r=t.call(this)||this;return r.source=e,r.subjectFactory=n,r._refCount=0,r._isComplete=!1,r}return i(e,t),e.prototype._subscribe=function(t){return this.getSubject().subscribe(t)},e.prototype.getSubject=function(){var t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject},e.prototype.connect=function(){var t=this._connection;return t||(this._isComplete=!1,(t=this._connection=new d).add(this.source.subscribe(new R(this.getSubject(),this))),t.closed&&(this._connection=null,t=d.EMPTY)),t},e.prototype.refCount=function(){return(t=this).lift(new k(t));var t},e}(S),R=function(t){function e(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return i(e,t),e.prototype._error=function(e){this._unsubscribe(),t.prototype._error.call(this,e)},e.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._connection;t._refCount=0,t._subject=null,t._connection=null,e&&e.unsubscribe()}},e}(P);var M=function(t){function e(e,n,r){var i=t.call(this)||this;return i.key=e,i.groupSubject=n,i.refCountSubscription=r,i}return i(e,t),e.prototype._subscribe=function(t){var e=new d,n=this.refCountSubscription,r=this.groupSubject;return n&&!n.closed&&e.add(new B(n)),e.add(r.subscribe(t)),e},e}(S),B=function(t){function e(e){var n=t.call(this)||this;return n.parent=e,e.count++,n}return i(e,t),e.prototype.unsubscribe=function(){var e=this.parent;e.closed||this.closed||(t.prototype.unsubscribe.call(this),e.count-=1,0===e.count&&e.attemptedToUnsubscribe&&e.unsubscribe())},e}(d),U=function(t){function e(e){var n=t.call(this)||this;return n._value=e,n}return i(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),e.prototype._subscribe=function(e){var n=t.prototype._subscribe.call(this,e);return n&&!n.closed&&e.next(this._value),n},e.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new I;return this._value},e.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},e}(T),F=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return i(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!==n&&this.delay===n&&!1===this.pending)return e;clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n=!1,r=void 0;try{this.work(t)}catch(t){n=!0,r=!!t&&t||new Error(t)}if(n)return this.unsubscribe(),r},e.prototype._unsubscribe=function(){var t=this.id,e=this.scheduler,n=e.actions,r=n.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&n.splice(r,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null},e}(function(t){function e(e,n){return t.call(this)||this}return i(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(d)),N=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return i(e,t),e.prototype.schedule=function(e,n){return void 0===n&&(n=0),n>0?t.prototype.schedule.call(this,e,n):(this.delay=n,this.state=e,this.scheduler.flush(this),this)},e.prototype.execute=function(e,n){return n>0||this.closed?t.prototype.execute.call(this,e,n):this._execute(e,n)},e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0?t.prototype.requestAsyncId.call(this,e,n,r):e.flush(this)},e}(F),D=function(){function t(e,n){void 0===n&&(n=t.now),this.SchedulerAction=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.SchedulerAction(this,t).schedule(n,e)},t.now=function(){return Date.now()},t}(),Y=function(t){function e(n,r){void 0===r&&(r=D.now);var i=t.call(this,n,(function(){return e.delegate&&e.delegate!==i?e.delegate.now():r()}))||this;return i.actions=[],i.active=!1,i.scheduled=void 0,i}return i(e,t),e.prototype.schedule=function(n,r,i){return void 0===r&&(r=0),e.delegate&&e.delegate!==this?e.delegate.schedule(n,r,i):t.prototype.schedule.call(this,n,r,i)},e.prototype.flush=function(t){var e=this.actions;if(this.active)e.push(t);else{var n;this.active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(D),L=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e}(Y))(N),q=L,$=new S((function(t){return t.complete()}));function W(t){return t?function(t){return new S((function(e){return t.schedule((function(){return e.complete()}))}))}(t):$}function V(t){return t&&"function"==typeof t.schedule}var H,z=function(t){return function(e){for(var n=0,r=t.length;n<r&&!e.closed;n++)e.next(t[n]);e.complete()}};function X(t,e){return new S((function(n){var r=new d,i=0;return r.add(e.schedule((function(){i!==t.length?(n.next(t[i++]),n.closed||r.add(this.schedule())):n.complete()}))),r}))}function G(t,e){return e?X(t,e):new S(z(t))}function K(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return V(n)?(t.pop(),X(t,n)):G(t)}function J(t,e){return new S(e?function(n){return e.schedule(Q,0,{error:t,subscriber:n})}:function(e){return e.error(t)})}function Q(t){var e=t.error;t.subscriber.error(e)}H||(H={});var Z=function(){function t(t,e,n){this.kind=t,this.value=e,this.error=n,this.hasValue="N"===t}return t.prototype.observe=function(t){switch(this.kind){case"N":return t.next&&t.next(this.value);case"E":return t.error&&t.error(this.error);case"C":return t.complete&&t.complete()}},t.prototype.do=function(t,e,n){switch(this.kind){case"N":return t&&t(this.value);case"E":return e&&e(this.error);case"C":return n&&n()}},t.prototype.accept=function(t,e,n){return t&&"function"==typeof t.next?this.observe(t):this.do(t,e,n)},t.prototype.toObservable=function(){switch(this.kind){case"N":return K(this.value);case"E":return J(this.error);case"C":return W()}throw new Error("unexpected notification kind value")},t.createNext=function(e){return void 0!==e?new t("N",e):t.undefinedValueNotification},t.createError=function(e){return new t("E",void 0,e)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t.undefinedValueNotification=new t("N",void 0),t}();var tt=function(t){function e(e,n,r){void 0===r&&(r=0);var i=t.call(this,e)||this;return i.scheduler=n,i.delay=r,i}return i(e,t),e.dispatch=function(t){var e=t.notification,n=t.destination;e.observe(n),this.unsubscribe()},e.prototype.scheduleMessage=function(t){this.destination.add(this.scheduler.schedule(e.dispatch,this.delay,new et(t,this.destination)))},e.prototype._next=function(t){this.scheduleMessage(Z.createNext(t))},e.prototype._error=function(t){this.scheduleMessage(Z.createError(t)),this.unsubscribe()},e.prototype._complete=function(){this.scheduleMessage(Z.createComplete()),this.unsubscribe()},e}(b),et=function(){return function(t,e){this.notification=t,this.destination=e}}(),nt=function(t){function e(e,n,r){void 0===e&&(e=Number.POSITIVE_INFINITY),void 0===n&&(n=Number.POSITIVE_INFINITY);var i=t.call(this)||this;return i.scheduler=r,i._events=[],i._infiniteTimeWindow=!1,i._bufferSize=e<1?1:e,i._windowTime=n<1?1:n,n===Number.POSITIVE_INFINITY?(i._infiniteTimeWindow=!0,i.next=i.nextInfiniteTimeWindow):i.next=i.nextTimeWindow,i}return i(e,t),e.prototype.nextInfiniteTimeWindow=function(e){if(!this.isStopped){var n=this._events;n.push(e),n.length>this._bufferSize&&n.shift()}t.prototype.next.call(this,e)},e.prototype.nextTimeWindow=function(e){this.isStopped||(this._events.push(new rt(this._getNow(),e)),this._trimBufferThenGetEvents()),t.prototype.next.call(this,e)},e.prototype._subscribe=function(t){var e,n=this._infiniteTimeWindow,r=n?this._events:this._trimBufferThenGetEvents(),i=this.scheduler,o=r.length;if(this.closed)throw new I;if(this.isStopped||this.hasError?e=d.EMPTY:(this.observers.push(t),e=new O(this,t)),i&&t.add(t=new tt(t,i)),n)for(var s=0;s<o&&!t.closed;s++)t.next(r[s]);else for(s=0;s<o&&!t.closed;s++)t.next(r[s].value);return this.hasError?t.error(this.thrownError):this.isStopped&&t.complete(),e},e.prototype._getNow=function(){return(this.scheduler||q).now()},e.prototype._trimBufferThenGetEvents=function(){for(var t=this._getNow(),e=this._bufferSize,n=this._windowTime,r=this._events,i=r.length,o=0;o<i&&!(t-r[o].time<n);)o++;return i>e&&(o=Math.max(o,i-e)),o>0&&r.splice(0,o),r},e}(T),rt=function(){return function(t,e){this.time=t,this.value=e}}(),it=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.value=null,e.hasNext=!1,e.hasCompleted=!1,e}return i(e,t),e.prototype._subscribe=function(e){return this.hasError?(e.error(this.thrownError),d.EMPTY):this.hasCompleted&&this.hasNext?(e.next(this.value),e.complete(),d.EMPTY):t.prototype._subscribe.call(this,e)},e.prototype.next=function(t){this.hasCompleted||(this.value=t,this.hasNext=!0)},e.prototype.error=function(e){this.hasCompleted||t.prototype.error.call(this,e)},e.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&t.prototype.next.call(this,this.value),t.prototype.complete.call(this)},e}(T),ot=1,st=function(){return Promise.resolve()}(),ut={};function ct(t){return t in ut&&(delete ut[t],!0)}var at=function(t){var e=ot++;return ut[e]=!0,st.then((function(){return ct(e)&&t()})),e},ht=function(t){ct(t)},ft=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return i(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e.scheduled||(e.scheduled=at(e.flush.bind(e,null))))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(ht(n),e.scheduled=void 0)},e}(F),lt=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,r=-1,i=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++r<i&&(t=n.shift()));if(this.active=!1,e){for(;++r<i&&(t=n.shift());)t.unsubscribe();throw e}},e}(Y))(ft),dt=lt,pt=new Y(F),yt=pt,bt=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return i(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e.scheduled||(e.scheduled=requestAnimationFrame((function(){return e.flush(null)}))))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(cancelAnimationFrame(n),e.scheduled=void 0)},e}(F),vt=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,r=-1,i=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++r<i&&(t=n.shift()));if(this.active=!1,e){for(;++r<i&&(t=n.shift());)t.unsubscribe();throw e}},e}(Y))(bt),mt=vt,gt=function(t){function e(e,n){void 0===e&&(e=wt),void 0===n&&(n=Number.POSITIVE_INFINITY);var r=t.call(this,e,(function(){return r.frame}))||this;return r.maxFrames=n,r.frame=0,r.index=-1,r}return i(e,t),e.prototype.flush=function(){for(var t,e,n=this.actions,r=this.maxFrames;(e=n[0])&&e.delay<=r&&(n.shift(),this.frame=e.delay,!(t=e.execute(e.state,e.delay))););if(t){for(;e=n.shift();)e.unsubscribe();throw t}},e.frameTimeFactor=10,e}(Y),wt=function(t){function e(e,n,r){void 0===r&&(r=e.index+=1);var i=t.call(this,e,n)||this;return i.scheduler=e,i.work=n,i.index=r,i.active=!0,i.index=e.index=r,i}return i(e,t),e.prototype.schedule=function(n,r){if(void 0===r&&(r=0),!this.id)return t.prototype.schedule.call(this,n,r);this.active=!1;var i=new e(this.scheduler,this.work);return this.add(i),i.schedule(n,r)},e.prototype.requestAsyncId=function(t,n,r){void 0===r&&(r=0),this.delay=t.frame+r;var i=t.actions;return i.push(this),i.sort(e.sortActions),!0},e.prototype.recycleAsyncId=function(t,e,n){void 0===n&&(n=0)},e.prototype._execute=function(e,n){if(!0===this.active)return t.prototype._execute.call(this,e,n)},e.sortActions=function(t,e){return t.delay===e.delay?t.index===e.index?0:t.index>e.index?1:-1:t.delay>e.delay?1:-1},e}(F);function _t(){}function Et(t){return!!t&&(t instanceof S||"function"==typeof t.lift&&"function"==typeof t.subscribe)}var St=function(){function t(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}return t.prototype=Object.create(Error.prototype),t}(),xt=function(){function t(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}return t.prototype=Object.create(Error.prototype),t}(),It=function(){function t(){return Error.call(this),this.message="Timeout has occurred",this.name="TimeoutError",this}return t.prototype=Object.create(Error.prototype),t}();function Ot(t,e){return function(n){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return n.lift(new Pt(t,e))}}var Pt=function(){function t(t,e){this.project=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new Tt(t,this.project,this.thisArg))},t}(),Tt=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.project=n,i.count=0,i.thisArg=r||i,i}return i(e,t),e.prototype._next=function(t){var e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(b);function jt(t,e,n){if(e){if(!V(e))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return jt(t,n).apply(void 0,r).pipe(Ot((function(t){return h(t)?e.apply(void 0,t):e(t)})))};n=e}return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var i,o=this,s={context:o,subject:i,callbackFunc:t,scheduler:n};return new S((function(r){if(n){var u={args:e,subscriber:r,params:s};return n.schedule(kt,0,u)}if(!i){i=new it;try{t.apply(o,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];i.next(t.length<=1?t[0]:t),i.complete()}]))}catch(t){m(i)?i.error(t):console.warn(t)}}return i.subscribe(r)}))}}function kt(t){var e=this,n=t.args,r=t.subscriber,i=t.params,o=i.callbackFunc,s=i.context,u=i.scheduler,c=i.subject;if(!c){c=i.subject=new it;try{o.apply(s,n.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.length<=1?t[0]:t;e.add(u.schedule(At,0,{value:r,subject:c}))}]))}catch(t){c.error(t)}}this.add(c.subscribe(r))}function At(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function Ct(t,e,n){if(e){if(!V(e))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return Ct(t,n).apply(void 0,r).pipe(Ot((function(t){return h(t)?e.apply(void 0,t):e(t)})))};n=e}return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var i={subject:void 0,args:e,callbackFunc:t,scheduler:n,context:this};return new S((function(r){var o=i.context,s=i.subject;if(n)return n.schedule(Rt,0,{params:i,subscriber:r,context:o});if(!s){s=i.subject=new it;try{t.apply(o,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t.shift();n?s.error(n):(s.next(t.length<=1?t[0]:t),s.complete())}]))}catch(t){m(s)?s.error(t):console.warn(t)}}return s.subscribe(r)}))}}function Rt(t){var e=this,n=t.params,r=t.subscriber,i=t.context,o=n.callbackFunc,s=n.args,u=n.scheduler,c=n.subject;if(!c){c=n.subject=new it;try{o.apply(i,s.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.shift();if(r)e.add(u.schedule(Bt,0,{err:r,subject:c}));else{var i=t.length<=1?t[0]:t;e.add(u.schedule(Mt,0,{value:i,subject:c}))}}]))}catch(t){this.add(u.schedule(Bt,0,{err:t,subject:c}))}}this.add(c.subscribe(r))}function Mt(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function Bt(t){var e=t.err;t.subject.error(e)}var Ut=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(e)},e.prototype.notifyError=function(t,e){this.destination.error(t)},e.prototype.notifyComplete=function(t){this.destination.complete()},e}(b),Ft=function(t){function e(e,n,r){var i=t.call(this)||this;return i.parent=e,i.outerValue=n,i.outerIndex=r,i.index=0,i}return i(e,t),e.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)},e.prototype._error=function(t){this.parent.notifyError(t,this),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},e}(b);function Nt(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}var Dt=Nt(),Yt=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function Lt(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}var qt=function(t){if(t&&"function"==typeof t[g])return r=t,function(t){var e=r[g]();if("function"!=typeof e.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return e.subscribe(t)};if(Yt(t))return z(t);if(Lt(t))return n=t,function(t){return n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,c),t};if(t&&"function"==typeof t[Dt])return e=t,function(t){for(var n=e[Dt]();;){var r=void 0;try{r=n.next()}catch(e){return t.error(e),t}if(r.done){t.complete();break}if(t.next(r.value),t.closed)break}return"function"==typeof n.return&&t.add((function(){n.return&&n.return()})),t};var e,n,r,i=f(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+i+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")};function $t(t,e,n,r,i){if(void 0===i&&(i=new Ft(t,n,r)),!i.closed)return e instanceof S?e.subscribe(i):qt(e)(i)}var Wt={};function Vt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=void 0,r=void 0;return V(t[t.length-1])&&(r=t.pop()),"function"==typeof t[t.length-1]&&(n=t.pop()),1===t.length&&h(t[0])&&(t=t[0]),G(t,r).lift(new Ht(n))}var Ht=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new zt(t,this.resultSelector))},t}(),zt=function(t){function e(e,n){var r=t.call(this,e)||this;return r.resultSelector=n,r.active=0,r.values=[],r.observables=[],r}return i(e,t),e.prototype._next=function(t){this.values.push(Wt),this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{this.active=e,this.toRespond=e;for(var n=0;n<e;n++){var r=t[n];this.add($t(this,r,void 0,n))}}},e.prototype.notifyComplete=function(t){0==(this.active-=1)&&this.destination.complete()},e.prototype.notifyNext=function(t,e,n){var r=this.values,i=r[n],o=this.toRespond?i===Wt?--this.toRespond:this.toRespond:0;r[n]=e,0===o&&(this.resultSelector?this._tryResultSelector(r):this.destination.next(r.slice()))},e.prototype._tryResultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(Ut);function Xt(t,e){if(null!=t){if(function(t){return t&&"function"==typeof t[g]}(t))return function(t,e){return new S((function(n){var r=new d;return r.add(e.schedule((function(){var i=t[g]();r.add(i.subscribe({next:function(t){r.add(e.schedule((function(){return n.next(t)})))},error:function(t){r.add(e.schedule((function(){return n.error(t)})))},complete:function(){r.add(e.schedule((function(){return n.complete()})))}}))}))),r}))}(t,e);if(Lt(t))return function(t,e){return new S((function(n){var r=new d;return r.add(e.schedule((function(){return t.then((function(t){r.add(e.schedule((function(){n.next(t),r.add(e.schedule((function(){return n.complete()})))})))}),(function(t){r.add(e.schedule((function(){return n.error(t)})))}))}))),r}))}(t,e);if(Yt(t))return X(t,e);if(function(t){return t&&"function"==typeof t[Dt]}(t)||"string"==typeof t)return function(t,e){if(!t)throw new Error("Iterable cannot be null");return new S((function(n){var r,i=new d;return i.add((function(){r&&"function"==typeof r.return&&r.return()})),i.add(e.schedule((function(){r=t[Dt](),i.add(e.schedule((function(){if(!n.closed){var t,e;try{var i=r.next();t=i.value,e=i.done}catch(t){return void n.error(t)}e?n.complete():(n.next(t),this.schedule())}})))}))),i}))}(t,e)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}function Gt(t,e){return e?Xt(t,e):t instanceof S?t:new S(qt(t))}var Kt=function(t){function e(e){var n=t.call(this)||this;return n.parent=e,n}return i(e,t),e.prototype._next=function(t){this.parent.notifyNext(t)},e.prototype._error=function(t){this.parent.notifyError(t),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(),this.unsubscribe()},e}(b),Jt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.notifyNext=function(t){this.destination.next(t)},e.prototype.notifyError=function(t){this.destination.error(t)},e.prototype.notifyComplete=function(){this.destination.complete()},e}(b);function Qt(t,e){if(!e.closed)return t instanceof S?t.subscribe(e):qt(t)(e)}function Zt(t,e,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),"function"==typeof e?function(r){return r.pipe(Zt((function(n,r){return Gt(t(n,r)).pipe(Ot((function(t,i){return e(n,t,r,i)})))}),n))}:("number"==typeof e&&(n=e),function(e){return e.lift(new te(t,n))})}var te=function(){function t(t,e){void 0===e&&(e=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=e}return t.prototype.call=function(t,e){return e.subscribe(new ee(t,this.project,this.concurrent))},t}(),ee=function(t){function e(e,n,r){void 0===r&&(r=Number.POSITIVE_INFINITY);var i=t.call(this,e)||this;return i.project=n,i.concurrent=r,i.hasCompleted=!1,i.buffer=[],i.active=0,i.index=0,i}return i(e,t),e.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},e.prototype._tryNext=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(e)},e.prototype._innerSub=function(t){var e=new Kt(this),n=this.destination;n.add(e);var r=Qt(t,e);r!==e&&n.add(r)},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t){this.destination.next(t)},e.prototype.notifyComplete=function(){var t=this.buffer;this.active--,t.length>0?this._next(t.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},e}(Jt);function ne(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),Zt(w,t)}function re(){return ne(1)}function ie(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return re()(K.apply(void 0,t))}function oe(t){return new S((function(e){var n;try{n=t()}catch(t){return void e.error(t)}return(n?Gt(n):W()).subscribe(e)}))}function se(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){var n=t[0];if(h(n))return ue(n,null);if(f(n)&&Object.getPrototypeOf(n)===Object.prototype){var r=Object.keys(n);return ue(r.map((function(t){return n[t]})),r)}}if("function"==typeof t[t.length-1]){var i=t.pop();return ue(t=1===t.length&&h(t[0])?t[0]:t,null).pipe(Ot((function(t){return i.apply(void 0,t)})))}return ue(t,null)}function ue(t,e){return new S((function(n){var r=t.length;if(0!==r)for(var i=new Array(r),o=0,s=0,u=function(u){var c=Gt(t[u]),a=!1;n.add(c.subscribe({next:function(t){a||(a=!0,s++),i[u]=t},error:function(t){return n.error(t)},complete:function(){++o!==r&&a||(s===r&&n.next(e?e.reduce((function(t,e,n){return t[e]=i[n],t}),{}):i),n.complete())}}))},c=0;c<r;c++)u(c);else n.complete()}))}function ce(t,e,n,r){return o(n)&&(r=n,n=void 0),r?ce(t,e,n).pipe(Ot((function(t){return h(t)?r.apply(void 0,t):r(t)}))):new S((function(r){!function t(e,n,r,i,o){var s;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(e)){var u=e;e.addEventListener(n,r,o),s=function(){return u.removeEventListener(n,r,o)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(e)){var c=e;e.on(n,r),s=function(){return c.off(n,r)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(e)){var a=e;e.addListener(n,r),s=function(){return a.removeListener(n,r)}}else{if(!e||!e.length)throw new TypeError("Invalid event target");for(var h=0,f=e.length;h<f;h++)t(e[h],n,r,i,o)}i.add(s)}(t,e,(function(t){arguments.length>1?r.next(Array.prototype.slice.call(arguments)):r.next(t)}),r,n)}))}function ae(t,e,n){return n?ae(t,e).pipe(Ot((function(t){return h(t)?n.apply(void 0,t):n(t)}))):new S((function(n){var r,i=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return n.next(1===t.length?t[0]:t)};try{r=t(i)}catch(t){return void n.error(t)}if(o(e))return function(){return e(i,r)}}))}function he(t,e,n,r,i){var o,s;if(1==arguments.length){var u=t;s=u.initialState,e=u.condition,n=u.iterate,o=u.resultSelector||w,i=u.scheduler}else void 0===r||V(r)?(s=t,o=w,i=r):(s=t,o=r);return new S((function(t){var r=s;if(i)return i.schedule(fe,0,{subscriber:t,iterate:n,condition:e,resultSelector:o,state:r});for(;;){if(e){var u=void 0;try{u=e(r)}catch(e){return void t.error(e)}if(!u){t.complete();break}}var c=void 0;try{c=o(r)}catch(e){return void t.error(e)}if(t.next(c),t.closed)break;try{r=n(r)}catch(e){return void t.error(e)}}}))}function fe(t){var e=t.subscriber,n=t.condition;if(!e.closed){if(t.needIterate)try{t.state=t.iterate(t.state)}catch(t){return void e.error(t)}else t.needIterate=!0;if(n){var r=void 0;try{r=n(t.state)}catch(t){return void e.error(t)}if(!r)return void e.complete();if(e.closed)return}var i;try{i=t.resultSelector(t.state)}catch(t){return void e.error(t)}if(!e.closed&&(e.next(i),!e.closed))return this.schedule(t)}}function le(t,e,n){return void 0===e&&(e=$),void 0===n&&(n=$),oe((function(){return t()?e:n}))}function de(t){return!h(t)&&t-parseFloat(t)+1>=0}function pe(t,e){return void 0===t&&(t=0),void 0===e&&(e=yt),(!de(t)||t<0)&&(t=0),e&&"function"==typeof e.schedule||(e=yt),new S((function(n){return n.add(e.schedule(ye,t,{subscriber:n,counter:0,period:t})),n}))}function ye(t){var e=t.subscriber,n=t.counter,r=t.period;e.next(n),this.schedule({subscriber:e,counter:n+1,period:r},r)}function be(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Number.POSITIVE_INFINITY,r=null,i=t[t.length-1];return V(i)?(r=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(n=t.pop())):"number"==typeof i&&(n=t.pop()),null===r&&1===t.length&&t[0]instanceof S?t[0]:ne(n)(G(t,r))}var ve=new S(_t);function me(){return ve}function ge(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(0===t.length)return $;var n=t[0],r=t.slice(1);return 1===t.length&&h(n)?ge.apply(void 0,n):new S((function(t){var e=function(){return t.add(ge.apply(void 0,r).subscribe(t))};return Gt(n).subscribe({next:function(e){t.next(e)},error:e,complete:e})}))}function we(t,e){return new S(e?function(n){var r=Object.keys(t),i=new d;return i.add(e.schedule(_e,0,{keys:r,index:0,subscriber:n,subscription:i,obj:t})),i}:function(e){for(var n=Object.keys(t),r=0;r<n.length&&!e.closed;r++){var i=n[r];t.hasOwnProperty(i)&&e.next([i,t[i]])}e.complete()})}function _e(t){var e=t.keys,n=t.index,r=t.subscriber,i=t.subscription,o=t.obj;if(!r.closed)if(n<e.length){var s=e[n];r.next([s,o[s]]),i.add(this.schedule({keys:e,index:n+1,subscriber:r,subscription:i,obj:o}))}else r.complete()}function Ee(t,e){function n(){return!n.pred.apply(n.thisArg,arguments)}return n.pred=t,n.thisArg=e,n}function Se(t,e){return function(n){return n.lift(new xe(t,e))}}var xe=function(){function t(t,e){this.predicate=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new Ie(t,this.predicate,this.thisArg))},t}(),Ie=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.thisArg=r,i.count=0,i}return i(e,t),e.prototype._next=function(t){var e;try{e=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}e&&this.destination.next(t)},e}(b);function Oe(t,e,n){return[Se(e,n)(new S(qt(t))),Se(Ee(e,n))(new S(qt(t)))]}function Pe(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){if(!h(t[0]))return t[0];t=t[0]}return G(t,void 0).lift(new Te)}var Te=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new je(t))},t}(),je=function(t){function e(e){var n=t.call(this,e)||this;return n.hasFirst=!1,n.observables=[],n.subscriptions=[],n}return i(e,t),e.prototype._next=function(t){this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{for(var n=0;n<e&&!this.hasFirst;n++){var r=$t(this,t[n],void 0,n);this.subscriptions&&this.subscriptions.push(r),this.add(r)}this.observables=null}},e.prototype.notifyNext=function(t,e,n){if(!this.hasFirst){this.hasFirst=!0;for(var r=0;r<this.subscriptions.length;r++)if(r!==n){var i=this.subscriptions[r];i.unsubscribe(),this.remove(i)}this.subscriptions=null}this.destination.next(e)},e}(Ut);function ke(t,e,n){return void 0===t&&(t=0),new S((function(r){void 0===e&&(e=t,t=0);var i=0,o=t;if(n)return n.schedule(Ae,0,{index:i,count:e,start:t,subscriber:r});for(;;){if(i++>=e){r.complete();break}if(r.next(o++),r.closed)break}}))}function Ae(t){var e=t.start,n=t.index,r=t.count,i=t.subscriber;n>=r?i.complete():(i.next(e),i.closed||(t.index=n+1,t.start=e+1,this.schedule(t)))}function Ce(t,e,n){void 0===t&&(t=0);var r=-1;return de(e)?r=Number(e)<1?1:Number(e):V(e)&&(n=e),V(n)||(n=yt),new S((function(e){var i=de(t)?t:+t-n.now();return n.schedule(Re,i,{index:0,period:r,subscriber:e})}))}function Re(t){var e=t.index,n=t.period,r=t.subscriber;if(r.next(e),!r.closed){if(-1===n)return r.complete();t.index=e+1,this.schedule(t,n)}}function Me(t,e){return new S((function(n){var r,i;try{r=t()}catch(t){return void n.error(t)}try{i=e(r)}catch(t){return void n.error(t)}var o=(i?Gt(i):$).subscribe(n);return function(){o.unsubscribe(),r&&r.unsubscribe()}}))}function Be(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return"function"==typeof n&&t.pop(),G(t,void 0).lift(new Ue(n))}var Ue=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new Fe(t,this.resultSelector))},t}(),Fe=function(t){function e(e,n,r){void 0===r&&(r=Object.create(null));var i=t.call(this,e)||this;return i.resultSelector=n,i.iterators=[],i.active=0,i.resultSelector="function"==typeof n?n:void 0,i}return i(e,t),e.prototype._next=function(t){var e=this.iterators;h(t)?e.push(new De(t)):"function"==typeof t[Dt]?e.push(new Ne(t[Dt]())):e.push(new Ye(this.destination,this,t))},e.prototype._complete=function(){var t=this.iterators,e=t.length;if(this.unsubscribe(),0!==e){this.active=e;for(var n=0;n<e;n++){var r=t[n];if(r.stillUnsubscribed)this.destination.add(r.subscribe());else this.active--}}else this.destination.complete()},e.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},e.prototype.checkIterators=function(){for(var t=this.iterators,e=t.length,n=this.destination,r=0;r<e;r++){if("function"==typeof(s=t[r]).hasValue&&!s.hasValue())return}var i=!1,o=[];for(r=0;r<e;r++){var s,u=(s=t[r]).next();if(s.hasCompleted()&&(i=!0),u.done)return void n.complete();o.push(u.value)}this.resultSelector?this._tryresultSelector(o):n.next(o),i&&n.complete()},e.prototype._tryresultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(b),Ne=function(){function t(t){this.iterator=t,this.nextResult=t.next()}return t.prototype.hasValue=function(){return!0},t.prototype.next=function(){var t=this.nextResult;return this.nextResult=this.iterator.next(),t},t.prototype.hasCompleted=function(){var t=this.nextResult;return Boolean(t&&t.done)},t}(),De=function(){function t(t){this.array=t,this.index=0,this.length=0,this.length=t.length}return t.prototype[Dt]=function(){return this},t.prototype.next=function(t){var e=this.index++,n=this.array;return e<this.length?{value:n[e],done:!1}:{value:null,done:!0}},t.prototype.hasValue=function(){return this.array.length>this.index},t.prototype.hasCompleted=function(){return this.array.length===this.index},t}(),Ye=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.parent=n,i.observable=r,i.stillUnsubscribed=!0,i.buffer=[],i.isComplete=!1,i}return i(e,t),e.prototype[Dt]=function(){return this},e.prototype.next=function(){var t=this.buffer;return 0===t.length&&this.isComplete?{value:null,done:!0}:{value:t.shift(),done:!1}},e.prototype.hasValue=function(){return this.buffer.length>0},e.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},e.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},e.prototype.notifyNext=function(t){this.buffer.push(t),this.parent.checkIterators()},e.prototype.subscribe=function(){return Qt(this.observable,new Kt(this))},e}(Jt)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.vec2=void 0;var r=function(){function t(){}return t.add=function(t,e){return{x:t.x+e.x,y:t.y+e.y}},t.sub=function(t,e){return{x:t.x-e.x,y:t.y-e.y}},t.mul=function(t,e){return{x:t.x*e,y:t.y*e}},t.distanceSquared=function(t,e){var n=e.x-t.x,r=e.y-t.y;return n*n+r*r},t.distance=function(e,n){return Math.sqrt(t.distanceSquared(e,n))},t.normSquared=function(t){return t.x*t.x+t.y*t.y},t.norm=function(e){return Math.sqrt(t.normSquared(e))},t.rotate=function(e,n){var r=t.norm(e);return n+=t.angle(e),{x:r*Math.cos(n),y:r*Math.sin(n)}},t.angle=function(t){return Math.atan2(t.y,t.x)},t}();e.vec2=r},function(t,e,n){"use strict";e.byteLength=function(t){var e=a(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){var e,n,r=a(t),s=r[0],u=r[1],c=new o(function(t,e,n){return 3*(e+n)/4-n}(0,s,u)),h=0,f=u>0?s-4:s;for(n=0;n<f;n+=4)e=i[t.charCodeAt(n)]<<18|i[t.charCodeAt(n+1)]<<12|i[t.charCodeAt(n+2)]<<6|i[t.charCodeAt(n+3)],c[h++]=e>>16&255,c[h++]=e>>8&255,c[h++]=255&e;2===u&&(e=i[t.charCodeAt(n)]<<2|i[t.charCodeAt(n+1)]>>4,c[h++]=255&e);1===u&&(e=i[t.charCodeAt(n)]<<10|i[t.charCodeAt(n+1)]<<4|i[t.charCodeAt(n+2)]>>2,c[h++]=e>>8&255,c[h++]=255&e);return c},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,o=[],s=0,u=n-i;s<u;s+=16383)o.push(h(t,s,s+16383>u?u:s+16383));1===i?(e=t[n-1],o.push(r[e>>2]+r[e<<4&63]+"==")):2===i&&(e=(t[n-2]<<8)+t[n-1],o.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return o.join("")};for(var r=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",u=0,c=s.length;u<c;++u)r[u]=s[u],i[s.charCodeAt(u)]=u;function a(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function h(t,e,n){for(var i,o,s=[],u=e;u<n;u+=3)i=(t[u]<<16&16711680)+(t[u+1]<<8&65280)+(255&t[u+2]),s.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return s.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,i){var o,s,u=8*i-r-1,c=(1<<u)-1,a=c>>1,h=-7,f=n?i-1:0,l=n?-1:1,d=t[e+f];for(f+=l,o=d&(1<<-h)-1,d>>=-h,h+=u;h>0;o=256*o+t[e+f],f+=l,h-=8);for(s=o&(1<<-h)-1,o>>=-h,h+=r;h>0;s=256*s+t[e+f],f+=l,h-=8);if(0===o)o=1-a;else{if(o===c)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,r),o-=a}return(d?-1:1)*s*Math.pow(2,o-r)},e.write=function(t,e,n,r,i,o){var s,u,c,a=8*o-i-1,h=(1<<a)-1,f=h>>1,l=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:o-1,p=r?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(u=isNaN(e)?1:0,s=h):(s=Math.floor(Math.log(e)/Math.LN2),e*(c=Math.pow(2,-s))<1&&(s--,c*=2),(e+=s+f>=1?l/c:l*Math.pow(2,1-f))*c>=2&&(s++,c/=2),s+f>=h?(u=0,s=h):s+f>=1?(u=(e*c-1)*Math.pow(2,i),s+=f):(u=e*Math.pow(2,f-1)*Math.pow(2,i),s=0));i>=8;t[n+d]=255&u,d+=p,u/=256,i-=8);for(s=s<<i|u,a+=i;a>0;t[n+d]=255&s,d+=p,s/=256,a-=8);t[n+d-p]|=128*y}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.InputDeviceAdapter=void 0;var r=function(){function t(t){var e=this;this.observer=t,this.canvas=null,this.activeTextInput=!1,this.trackMouse=!1,this.keysDown={},this.mouseX=0,this.mouseY=0,this.buttons=0,this.mousedownTimestamp=null,this.mouseupX=0,this.mouseupY=0,this.clickCount=0,window.addEventListener("focus",(function(t){return e.handleFocusEvent(t)}),!0),window.addEventListener("blur",(function(){return e.handleBlurEvent()}),!0),window.addEventListener("keydown",(function(t){return e.handleKeyDownEvent(t)})),window.addEventListener("keyup",(function(t){return e.handleKeyUpEvent(t)})),window.addEventListener("mousedown",(function(t){return e.handleMouseDownEvent(t)}),!0),window.addEventListener("mouseup",(function(t){return e.handleMouseUpEvent(t)}),!0),window.addEventListener("mousemove",(function(t){return e.handleMouseMoveEvent(t)}),!0),window.addEventListener("DOMMouseScroll",(function(t){return e.handleMouseWheelEvent(t)})),window.addEventListener("mousewheel",(function(t){return e.handleMouseWheelEvent(t)})),window.addEventListener("wheel",(function(t){return e.handleMouseWheelEvent(t)})),document.addEventListener("contextmenu",(function(t){return e.handleContextMenuEvent(t)}),!1),setInterval((function(){if(e.buttons)try{var t=new Event("timestamp");e.mouseUpdate(t.timeStamp)}catch(t){}}),33)}return t.isWithinDistance=function(t,e,n,r,i){var o=t-n,s=e-r;return o*o+s*s<=i*i},t.shouldTrackGesture=function(e,n){for(var r=document.elementFromPoint(e,n);r;r=r.parentNode)if(t.isClickable(r)&&t.hasOpacity(r))return!1;return!0},t.shouldTrackWheel=function(e){for(var n=document.elementFromPoint(e.clientX,e.clientY);n;n=n.parentNode)if(t.isScrollable(n))return!1;return!0},t.hasOpacity=function(t){for(;t;){if(t.style&&"0"===t.style.opacity)return!1;t=t.parentNode}return!0},t.isClickable=function(t){if("INPUT"===t.tagName||"BUTTON"===t.tagName)return!0;if(t.className){var e=" "+t.className+" ";return-1!==e.indexOf(" clickable ")||-1!==e.indexOf(" panel ")}return!1},t.isScrollable=function(t){if("scroll"===t.overflowY)return!0;if(t.className&&-1!==(" "+t.className+" ").indexOf(" scrollable "))return!0;return!1},t.normalizeMouseWheelDelta=function(t){var e=t.deltaY;return e&&t.wheelDelta?e/4:Math.abs(e)<52.95000076293945?10*e:e/52.95000076293945},t.prototype.getCanvas=function(){return this.canvas||(this.canvas=document.getElementById("canvas")),this.canvas},t.prototype.mouseUpdate=function(t){this.observer.mouseUpdate(this.mouseX,this.mouseY,this.buttons,this.clickCount,t)},t.prototype.mouseWheel=function(t,e,n,r){this.observer.mouseWheel(t,e,n,r)},t.prototype.handleFocusEvent=function(t){this.activeTextInput="INPUT"===t.target.tagName},t.prototype.handleBlurEvent=function(){this.activeTextInput=!1},t.prototype.handleKeyDownEvent=function(t){if(!this.activeTextInput&&!(t.ctrlKey||t.shiftKey||t.altKey||t.metaKey)){var e=t.keyCode;this.keysDown[e]=!0,this.observer.keyDown(t.keyCode),t.preventDefault()}},t.prototype.handleKeyUpEvent=function(t){var e=t.keyCode;this.keysDown[e]&&(this.keysDown[e]=!1,this.observer.keyUp(t.keyCode))},t.prototype.handleMouseDownEvent=function(e){if(!this.trackMouse&&this.shouldTrackMouse(e)&&(this.trackMouse=!0),this.trackMouse){if(this.mouseX=e.pageX,this.mouseY=window.innerHeight-e.pageY,null!=this.mousedownTimestamp&&e.timeStamp-this.mousedownTimestamp<500&&t.isWithinDistance(this.mouseX,this.mouseY,this.mouseupX,this.mouseupY,12)?this.clickCount+=1:this.clickCount=1,this.mousedownTimestamp=e.timeStamp,void 0!==e.buttons)this.buttons=e.buttons;else switch(e.button){case 0:this.buttons|=1;break;case 1:this.buttons|=4;break;case 2:this.buttons|=2}this.mouseUpdate(e.timeStamp),e.stopPropagation(),e.preventDefault();var n=this.getCanvas();n&&n.setCapture&&n.setCapture()}},t.prototype.handleMouseUpEvent=function(t){if(this.trackMouse){if(this.mouseX=t.pageX,this.mouseY=window.innerHeight-t.pageY,this.mouseupX=this.mouseX,this.mouseupY=this.mouseY,void 0!==t.buttons)this.buttons=t.buttons;else switch(t.button){case 0:this.buttons&=6;break;case 1:this.buttons&=3;break;case 2:this.buttons&=5}this.mouseUpdate(t.timeStamp),t.stopPropagation(),t.preventDefault(),t.buttons||(this.trackMouse=!1)}},t.prototype.handleMouseMoveEvent=function(t){this.trackMouse&&(this.mouseX=t.pageX,this.mouseY=window.innerHeight-t.pageY,this.mouseUpdate(t.timeStamp),t.stopPropagation(),t.preventDefault())},t.prototype.handleMouseWheelEvent=function(e){if(t.shouldTrackWheel(e)){var n=-2*t.normalizeMouseWheelDelta(e);this.mouseWheel(e.pageX,window.innerHeight-e.pageY,0,n),e.stopPropagation()}},t.prototype.handleContextMenuEvent=function(t){this.shouldTrackMouse(t)&&t.preventDefault()},t.prototype.shouldTrackMouse=function(e){return e.target===this.canvas||t.shouldTrackGesture(e.clientX,e.clientY)},t}();e.InputDeviceAdapter=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0})},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function u(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(t){r=s}}();var c,a=[],h=!1,f=-1;function l(){h&&c&&(h=!1,c.length?a=c.concat(a):f=-1,a.length&&d())}function d(){if(!h){var t=u(l);h=!0;for(var e=a.length;e;){for(c=a,a=[];++f<e;)c&&c[f].run();f=-1,e=a.length}c=null,h=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function y(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];a.push(new p(t,e)),1!==a.length||h||u(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=y,i.addListener=y,i.once=y,i.off=y,i.removeListener=y,i.removeAllListeners=y,i.emit=y,i.prependListener=y,i.prependOnceListener=y,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0})},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{c(r.next(t))}catch(t){o(t)}}function u(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,u)}c((r=r.apply(t,e||[])).next())}))},i=this&&this.__generator||function(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.ScenarioRunner=void 0;var o=n(11),s=n(10),u=n(15),c=function(){function t(t){var e=this;this.scenarioFactory=t,this.runtime=null,this.systemFederation=null,this.lobbyFederation=null,this.battleFederation=null,this.player=null,this.launcher=null,this.module=null,this.match=null,this.scenario=null,this.inputDevicePoster=null,this.runtime=new o.Runtime,this.runtime.startup(u.RuntimeConfiguration.autoDetect()),this.systemFederation=this.runtime.joinFederation("000000000000000000000000"),this.systemFederation.objects("Player").subscribe((function(t){e.playerChanged(t)})),this.systemFederation.objects("Launcher").subscribe((function(t){e.launcherChanged(t)})),this.inputDevicePoster=new s.InputDevicePoster}return t.prototype.playerChanged=function(t){t.$defined$changed&&t.$defined&&(this.player=t),(t.playerId$changed||t.playerName$changed||t.playerIcon$changed)&&this.runtime.authenticate("",t.playerId||"",t.playerName||"",t.playerIcon||""),t.playerId$changed&&t.playerId&&(this.runtime.authenticate("",t.playerId,"",""),this.tryStartScenario())},t.prototype.launcherChanged=function(t){t.$defined$changed&&t.$defined&&(this.launcher=t),t.lobbyId$changed&&t.lobbyId&&this.launcherJoinedLobby(t.lobbyId),t.matchId$changed&&(t.matchId?this.match=this.lobbyFederation.getObjectOrNull(t.matchId):(this.match=null,this.battleFederation&&this.launcherLeftMatch()))},t.prototype.launcherJoinedLobby=function(t){var e=this;this.lobbyFederation&&this.lobbyFederation.federationId!==t&&(this.runtime.leaveFederation(t),this.lobbyFederation=null),this.lobbyFederation||(this.lobbyFederation=this.runtime.joinFederation(t),this.lobbyFederation.objects("Module").subscribe((function(t){t.$defined$changed&&(e.module=t.$defined?t:null),t.ownerId$changed&&e.tryStartScenario()})))},t.prototype.tryStartScenario=function(){this.module&&this.player&&this.module.ownerId===this.player.playerId&&!this.scenario&&this.startScenario(this.scenarioFactory()).then((function(){}),(function(t){console.error(t)}))},t.prototype.launcherLeftMatch=function(){this.scenario&&(this.scenario.shutdown(),this.scenario=null),this.battleFederation&&(this.runtime.leaveFederation(this.battleFederation.federationId),this.battleFederation=null)},t.prototype.startScenario=function(t){return r(this,void 0,void 0,(function(){var e,n,r,o;return i(this,(function(i){switch(i.label){case 0:return i.trys.push([0,3,,4]),[4,this.systemFederation.requestService("CreateMatch",{lobbyId:this.lobbyFederation.federationId,params:t.getParams()})];case 1:return e=i.sent(),n=e.matchId,r=this.lobbyFederation.getObjectOrNull(n),this.scenario=t,this.battleFederation=this.runtime.joinFederation(n),[4,this.pingBattleServices(this.battleFederation)];case 2:return i.sent(),t.startup(this.player.playerId,r,this.lobbyFederation,this.battleFederation),[3,4];case 3:return o=i.sent(),console.error(o),[3,4];case 4:return[2]}}))}))},t.prototype.pingBattleServices=function(t){return r(this,void 0,void 0,(function(){var e,n;return i(this,(function(r){switch(r.label){case 0:e=0,r.label=1;case 1:0,r.label=2;case 2:return r.trys.push([2,4,,8]),[4,t.requestService("PingBattleServices",{})];case 3:return r.sent(),[2];case 4:return n=r.sent(),e++<10?[4,new Promise((function(t){return setTimeout(t,100)}))]:[3,6];case 5:return r.sent(),[3,7];case 6:throw n;case 7:return[3,8];case 8:return[3,1];case 9:return[2]}}))}))},t}();e.ScenarioRunner=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0})},function(t,e,n){"use strict";n.r(e),n.d(e,"SandboxScenario",(function(){return f}));var r,i,o=n(3);function s(t,e){var n="";switch(t){case r.Cavalry:n+="CAV";break;case r.General:n+="GEN";break;case r.Ashigaru:n+="ASH";break;case r.Samurai:n+="SAM"}switch(e){case i.Yari:n+="-YARI";break;case i.Katana:n+="-KATA";break;case i.Naginata:n+="-NAGI";break;case i.Bow:n+="-BOW";break;case i.Arq:n+="-ARQ";break;case i.Cannon:n+="-CAN"}return n}function u(t,e){if(e===i.Cannon)return 12;switch(t){case r.Cavalry:case r.General:return 40;case r.Ashigaru:case r.Samurai:return 80}return 0}!function(t){t[t.Cavalry=0]="Cavalry",t[t.General=1]="General",t[t.Ashigaru=2]="Ashigaru",t[t.Samurai=3]="Samurai"}(r||(r={})),function(t){t[t.Yari=0]="Yari",t[t.Katana=1]="Katana",t[t.Naginata=2]="Naginata",t[t.Bow=3]="Bow",t[t.Arq=4]="Arq",t[t.Cannon=5]="Cannon"}(i||(i={}));var c=function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{c(r.next(t))}catch(t){o(t)}}function u(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,u)}c((r=r.apply(t,e||[])).next())}))},a=function(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},h=function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};o.RuntimeConfiguration.autoRedirect();var f=function(){function t(){}return t.prototype.getParams=function(){return{teams:[{slots:[{playerId:null}]},{slots:[{playerId:null}]}],teamsMin:2,teamsMax:99,title:"sandbox",map:"Maps/Map1.png",options:{map:!0,teams:!0,sandbox:!0},settings:{sandbox:!0},started:!1}},t.prototype.startup=function(t,e,n,r){var i=this;this.playerId=t,this.match=e,this.arenaFederation=n,this.battleFederation=r,this.createAlliances().then((function(){}),(function(t){return console.error(t)})),this.subscription=this.arenaFederation.objects("Match").subscribe((function(){i.recreateAlliances().then((function(){}),(function(t){return console.error(t)}))})),this.subscription.add(this.arenaFederation.objects("Team").subscribe((function(){i.recreateAlliances().then((function(){}),(function(t){return console.error(t)}))}))),this.subscription.add(this.arenaFederation.objects("Slot").subscribe((function(){i.recreateAlliances().then((function(){}),(function(t){return console.error(t)}))}))),this.subscription.add(this.battleFederation.objects("Unit").subscribe((function(t){(t.fighters$changed&&!t.fighters||t.deletedByGesture)&&t.$delete()}))),this.battleFederation.observeEvents("DeployUnit",(function(t){t.deleted||i.deployUnit(t.deploymentUnit,t.position)}))},t.prototype.shutdown=function(){this.subscription&&(this.subscription.unsubscribe(),this.subscription=null)},t.prototype.deployUnit=function(t,e){var n=t.platform,r=t.weapon,i={x:512-e.x,y:512-e.y},o=Math.atan2(i.y,i.x),c=t.alliance,a=t.commander;a||(a=this.battleFederation.objects("Commander").find((function(t){return t.alliance===c}))),this.battleFederation.objects("Unit").create({alliance:c,commander:a,"stats.unitClass":s(n,r),"stats.fighterCount":u(n,r),"stats.placement":{x:e.x,y:e.y,z:o},deletable:!0})},t.prototype.recreateAlliances=function(){return c(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return console.log("recreateAlliances"),[4,this.removeAlliances()];case 1:return t.sent(),[4,this.createAlliances()];case 2:return t.sent(),[2]}}))}))},t.prototype.removeAlliances=function(){return c(this,void 0,void 0,(function(){var t,e,n,r,i,o,s,u,c,f,l,d;return a(this,(function(a){console.log("removeAlliances");try{for(t=h(this.battleFederation.objects("Alliance")),e=t.next();!e.done;e=t.next())e.value.$delete()}catch(t){s={error:t}}finally{try{e&&!e.done&&(u=t.return)&&u.call(t)}finally{if(s)throw s.error}}try{for(n=h(this.battleFederation.objects("Commander")),r=n.next();!r.done;r=n.next())r.value.$delete()}catch(t){c={error:t}}finally{try{r&&!r.done&&(f=n.return)&&f.call(n)}finally{if(c)throw c.error}}try{for(i=h(this.battleFederation.objects("DeploymentUnit")),o=i.next();!o.done;o=i.next())o.value.$delete()}catch(t){l={error:t}}finally{try{o&&!o.done&&(d=i.return)&&d.call(i)}finally{if(l)throw l.error}}return[2]}))}))},t.prototype.createAlliances=function(){return c(this,void 0,void 0,(function(){var t,e,n,r,i,o,s,u,c,f,l,d;return a(this,(function(a){console.log("createAlliances"),t=0;try{for(e=h(this.match.teams),n=e.next();!n.done;n=e.next()){r=n.value,i=this.battleFederation.objects("Alliance").create({position:++t}),this.createReinforcements(i,t);try{for(l=void 0,o=h(r.slots),s=o.next();!s.done;s=o.next())u=s.value,console.log("slot.playerId:"+u.playerId),u.playerId&&this.battleFederation.objects("Commander").create({alliance:i,playerId:u.playerId})}catch(t){l={error:t}}finally{try{s&&!s.done&&(d=o.return)&&d.call(o)}finally{if(l)throw l.error}}}}catch(t){c={error:t}}finally{try{n&&!n.done&&(f=e.return)&&f.call(e)}finally{if(c)throw c.error}}return[2]}))}))},t.prototype.createReinforcements=function(t,e){this.createReinforcement(t,e,0,0,5,r.Ashigaru,i.Arq),this.createReinforcement(t,e,0,1,5,r.Samurai,i.Arq),this.createReinforcement(t,e,0,2,5,r.Ashigaru,i.Bow),this.createReinforcement(t,e,0,3,5,r.Samurai,i.Bow),this.createReinforcement(t,e,0,4,5,r.Ashigaru,i.Cannon),this.createReinforcement(t,e,1,0,6,r.Ashigaru,i.Yari),this.createReinforcement(t,e,1,1,6,r.Samurai,i.Yari),this.createReinforcement(t,e,1,2,6,r.Ashigaru,i.Katana),this.createReinforcement(t,e,1,3,6,r.Samurai,i.Katana),this.createReinforcement(t,e,1,4,6,r.Ashigaru,i.Naginata),this.createReinforcement(t,e,1,5,6,r.Samurai,i.Naginata),this.createReinforcement(t,e,2,0,5,r.Cavalry,i.Yari),this.createReinforcement(t,e,2,1,5,r.Cavalry,i.Katana),this.createReinforcement(t,e,2,2,5,r.Cavalry,i.Naginata),this.createReinforcement(t,e,2,3,5,r.Cavalry,i.Bow),this.createReinforcement(t,e,2,4,5,r.Cavalry,i.Arq)},t.prototype.createReinforcement=function(t,e,n,r,i,o,s){var u=512+30*(n+1),c=40*(i>1?r-.5*(i-1):0)/u+.5*(1===e?1:3)*3.1415926535;this.battleFederation.objects("DeploymentUnit").create({hostingPlayerId:this.playerId,alliance:t,position:{x:512+u*Math.cos(c),y:512+u*Math.sin(c)},platform:o,weapon:s,reinforcement:!0,deletable:!0})},t}();new o.ScenarioRunner((function(){return new f}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,